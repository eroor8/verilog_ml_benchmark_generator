//-------------------------------------------------------------------------
// test_odin_sm.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component RELU Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module RELU__input_width_32__output_width_8__registered_False
(
activation_function_in,
activation_function_out,
clk,
reset
);
input  [31:0] activation_function_in ;
output [7:0] activation_function_out ;
input  [0:0] clk ;
input  [0:0] reset ;

//  localparam wire [5:0] __const__input_width_at_upblk3  = 6'd32;
//  localparam wire [3:0] __const__min_width_at_upblk3  = 4'd8;
  wire [0:0] clk_tieoff;
  wire [7:0] internal_out0;
  wire [0:0] internal_out1;
  wire [0:0] reset_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py:65
  // @update
  // def upblk3():
  //     s.internal_out0 @= (s.activation_function_in[0:min_width]
  //                         if (s.activation_function_in[
  //                                 input_width - 1] == 0) else 0)
  //     s.internal_out1 @= 0
  
  always@(*) begin : upblk3
    internal_out0 = ( activation_function_in[6'd32 - 6'd1] == 1'd0 ) ? activation_function_in[5'd7:5'd0] : 8'd0;
    internal_out1 = 1'd0;
  end

  assign clk_tieoff = clk;
  assign reset_tieoff = reset;
  assign activation_function_out[7:0] = internal_out0;

endmodule


// PyMTL Component ActivationWrapper Definition
// Full name: ActivationWrapper__count_16__function_RELU__input_width_32__output_width_8__registered_False
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module ActivationWrapper__11a85bfd35a404ba
(
activation_function_in_0,
activation_function_in_1,
activation_function_in_10,
activation_function_in_11,
activation_function_in_12,
activation_function_in_13,
activation_function_in_14,
activation_function_in_15,
activation_function_in_2,
activation_function_in_3,
activation_function_in_4,
activation_function_in_5,
activation_function_in_6,
activation_function_in_7,
activation_function_in_8,
activation_function_in_9,
activation_function_out_0,
activation_function_out_1,
activation_function_out_10,
activation_function_out_11,
activation_function_out_12,
activation_function_out_13,
activation_function_out_14,
activation_function_out_15,
activation_function_out_2,
activation_function_out_3,
activation_function_out_4,
activation_function_out_5,
activation_function_out_6,
activation_function_out_7,
activation_function_out_8,
activation_function_out_9,
clk,
reset
);
input  [31:0] activation_function_in_0 ;
input  [31:0] activation_function_in_1 ;
input  [31:0] activation_function_in_10 ;
input  [31:0] activation_function_in_11 ;
input  [31:0] activation_function_in_12 ;
input  [31:0] activation_function_in_13 ;
input  [31:0] activation_function_in_14 ;
input  [31:0] activation_function_in_15 ;
input  [31:0] activation_function_in_2 ;
input  [31:0] activation_function_in_3 ;
input  [31:0] activation_function_in_4 ;
input  [31:0] activation_function_in_5 ;
input  [31:0] activation_function_in_6 ;
input  [31:0] activation_function_in_7 ;
input  [31:0] activation_function_in_8 ;
input  [31:0] activation_function_in_9 ;
output [7:0] activation_function_out_0 ;
output [7:0] activation_function_out_1 ;
output [7:0] activation_function_out_10 ;
output [7:0] activation_function_out_11 ;
output [7:0] activation_function_out_12 ;
output [7:0] activation_function_out_13 ;
output [7:0] activation_function_out_14 ;
output [7:0] activation_function_out_15 ;
output [7:0] activation_function_out_2 ;
output [7:0] activation_function_out_3 ;
output [7:0] activation_function_out_4 ;
output [7:0] activation_function_out_5 ;
output [7:0] activation_function_out_6 ;
output [7:0] activation_function_out_7 ;
output [7:0] activation_function_out_8 ;
output [7:0] activation_function_out_9 ;
input  [0:0] clk ;
input  [0:0] reset ;

  wire [31:0] activation_function_in_0_tieoff;
  wire [31:0] activation_function_in_10_tieoff;
  wire [31:0] activation_function_in_11_tieoff;
  wire [31:0] activation_function_in_12_tieoff;
  wire [31:0] activation_function_in_13_tieoff;
  wire [31:0] activation_function_in_14_tieoff;
  wire [31:0] activation_function_in_15_tieoff;
  wire [31:0] activation_function_in_1_tieoff;
  wire [31:0] activation_function_in_2_tieoff;
  wire [31:0] activation_function_in_3_tieoff;
  wire [31:0] activation_function_in_4_tieoff;
  wire [31:0] activation_function_in_5_tieoff;
  wire [31:0] activation_function_in_6_tieoff;
  wire [31:0] activation_function_in_7_tieoff;
  wire [31:0] activation_function_in_8_tieoff;
  wire [31:0] activation_function_in_9_tieoff;
  //-------------------------------------------------------------
  // Component RELU_inst_0
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_0__activation_function_in;
  wire [7:0] RELU_inst_0__activation_function_out;
  wire [0:0] RELU_inst_0__clk;
  wire [0:0] RELU_inst_0__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_0
  (
    .activation_function_in( RELU_inst_0__activation_function_in ),
    .activation_function_out( RELU_inst_0__activation_function_out ),
    .clk( RELU_inst_0__clk ),
    .reset( RELU_inst_0__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_1
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_1__activation_function_in;
  wire [7:0] RELU_inst_1__activation_function_out;
  wire [0:0] RELU_inst_1__clk;
  wire [0:0] RELU_inst_1__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_1
  (
    .activation_function_in( RELU_inst_1__activation_function_in ),
    .activation_function_out( RELU_inst_1__activation_function_out ),
    .clk( RELU_inst_1__clk ),
    .reset( RELU_inst_1__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_1
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_10
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_10__activation_function_in;
  wire [7:0] RELU_inst_10__activation_function_out;
  wire [0:0] RELU_inst_10__clk;
  wire [0:0] RELU_inst_10__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_10
  (
    .activation_function_in( RELU_inst_10__activation_function_in ),
    .activation_function_out( RELU_inst_10__activation_function_out ),
    .clk( RELU_inst_10__clk ),
    .reset( RELU_inst_10__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_10
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_11
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_11__activation_function_in;
  wire [7:0] RELU_inst_11__activation_function_out;
  wire [0:0] RELU_inst_11__clk;
  wire [0:0] RELU_inst_11__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_11
  (
    .activation_function_in( RELU_inst_11__activation_function_in ),
    .activation_function_out( RELU_inst_11__activation_function_out ),
    .clk( RELU_inst_11__clk ),
    .reset( RELU_inst_11__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_11
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_12
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_12__activation_function_in;
  wire [7:0] RELU_inst_12__activation_function_out;
  wire [0:0] RELU_inst_12__clk;
  wire [0:0] RELU_inst_12__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_12
  (
    .activation_function_in( RELU_inst_12__activation_function_in ),
    .activation_function_out( RELU_inst_12__activation_function_out ),
    .clk( RELU_inst_12__clk ),
    .reset( RELU_inst_12__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_12
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_13
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_13__activation_function_in;
  wire [7:0] RELU_inst_13__activation_function_out;
  wire [0:0] RELU_inst_13__clk;
  wire [0:0] RELU_inst_13__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_13
  (
    .activation_function_in( RELU_inst_13__activation_function_in ),
    .activation_function_out( RELU_inst_13__activation_function_out ),
    .clk( RELU_inst_13__clk ),
    .reset( RELU_inst_13__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_13
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_14
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_14__activation_function_in;
  wire [7:0] RELU_inst_14__activation_function_out;
  wire [0:0] RELU_inst_14__clk;
  wire [0:0] RELU_inst_14__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_14
  (
    .activation_function_in( RELU_inst_14__activation_function_in ),
    .activation_function_out( RELU_inst_14__activation_function_out ),
    .clk( RELU_inst_14__clk ),
    .reset( RELU_inst_14__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_14
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_15
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_15__activation_function_in;
  wire [7:0] RELU_inst_15__activation_function_out;
  wire [0:0] RELU_inst_15__clk;
  wire [0:0] RELU_inst_15__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_15
  (
    .activation_function_in( RELU_inst_15__activation_function_in ),
    .activation_function_out( RELU_inst_15__activation_function_out ),
    .clk( RELU_inst_15__clk ),
    .reset( RELU_inst_15__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_15
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_2
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_2__activation_function_in;
  wire [7:0] RELU_inst_2__activation_function_out;
  wire [0:0] RELU_inst_2__clk;
  wire [0:0] RELU_inst_2__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_2
  (
    .activation_function_in( RELU_inst_2__activation_function_in ),
    .activation_function_out( RELU_inst_2__activation_function_out ),
    .clk( RELU_inst_2__clk ),
    .reset( RELU_inst_2__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_2
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_3
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_3__activation_function_in;
  wire [7:0] RELU_inst_3__activation_function_out;
  wire [0:0] RELU_inst_3__clk;
  wire [0:0] RELU_inst_3__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_3
  (
    .activation_function_in( RELU_inst_3__activation_function_in ),
    .activation_function_out( RELU_inst_3__activation_function_out ),
    .clk( RELU_inst_3__clk ),
    .reset( RELU_inst_3__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_3
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_4
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_4__activation_function_in;
  wire [7:0] RELU_inst_4__activation_function_out;
  wire [0:0] RELU_inst_4__clk;
  wire [0:0] RELU_inst_4__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_4
  (
    .activation_function_in( RELU_inst_4__activation_function_in ),
    .activation_function_out( RELU_inst_4__activation_function_out ),
    .clk( RELU_inst_4__clk ),
    .reset( RELU_inst_4__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_4
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_5
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_5__activation_function_in;
  wire [7:0] RELU_inst_5__activation_function_out;
  wire [0:0] RELU_inst_5__clk;
  wire [0:0] RELU_inst_5__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_5
  (
    .activation_function_in( RELU_inst_5__activation_function_in ),
    .activation_function_out( RELU_inst_5__activation_function_out ),
    .clk( RELU_inst_5__clk ),
    .reset( RELU_inst_5__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_5
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_6
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_6__activation_function_in;
  wire [7:0] RELU_inst_6__activation_function_out;
  wire [0:0] RELU_inst_6__clk;
  wire [0:0] RELU_inst_6__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_6
  (
    .activation_function_in( RELU_inst_6__activation_function_in ),
    .activation_function_out( RELU_inst_6__activation_function_out ),
    .clk( RELU_inst_6__clk ),
    .reset( RELU_inst_6__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_6
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_7
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_7__activation_function_in;
  wire [7:0] RELU_inst_7__activation_function_out;
  wire [0:0] RELU_inst_7__clk;
  wire [0:0] RELU_inst_7__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_7
  (
    .activation_function_in( RELU_inst_7__activation_function_in ),
    .activation_function_out( RELU_inst_7__activation_function_out ),
    .clk( RELU_inst_7__clk ),
    .reset( RELU_inst_7__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_7
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_8
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_8__activation_function_in;
  wire [7:0] RELU_inst_8__activation_function_out;
  wire [0:0] RELU_inst_8__clk;
  wire [0:0] RELU_inst_8__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_8
  (
    .activation_function_in( RELU_inst_8__activation_function_in ),
    .activation_function_out( RELU_inst_8__activation_function_out ),
    .clk( RELU_inst_8__clk ),
    .reset( RELU_inst_8__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_8
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component RELU_inst_9
  //-------------------------------------------------------------

  wire [31:0] RELU_inst_9__activation_function_in;
  wire [7:0] RELU_inst_9__activation_function_out;
  wire [0:0] RELU_inst_9__clk;
  wire [0:0] RELU_inst_9__reset;

  RELU__input_width_32__output_width_8__registered_False RELU_inst_9
  (
    .activation_function_in( RELU_inst_9__activation_function_in ),
    .activation_function_out( RELU_inst_9__activation_function_out ),
    .clk( RELU_inst_9__clk ),
    .reset( RELU_inst_9__reset )
  );

  //-------------------------------------------------------------
  // End of component RELU_inst_9
  //-------------------------------------------------------------

  assign RELU_inst_0__clk = clk;
  assign RELU_inst_0__reset = reset;
  assign activation_function_in_0_tieoff = activation_function_in_0;
  assign RELU_inst_0__activation_function_in = activation_function_in_0;
  assign activation_function_out_0 = RELU_inst_0__activation_function_out;
  assign RELU_inst_1__clk = clk;
  assign RELU_inst_1__reset = reset;
  assign activation_function_in_1_tieoff = activation_function_in_1;
  assign RELU_inst_1__activation_function_in = activation_function_in_1;
  assign activation_function_out_1 = RELU_inst_1__activation_function_out;
  assign RELU_inst_2__clk = clk;
  assign RELU_inst_2__reset = reset;
  assign activation_function_in_2_tieoff = activation_function_in_2;
  assign RELU_inst_2__activation_function_in = activation_function_in_2;
  assign activation_function_out_2 = RELU_inst_2__activation_function_out;
  assign RELU_inst_3__clk = clk;
  assign RELU_inst_3__reset = reset;
  assign activation_function_in_3_tieoff = activation_function_in_3;
  assign RELU_inst_3__activation_function_in = activation_function_in_3;
  assign activation_function_out_3 = RELU_inst_3__activation_function_out;
  assign RELU_inst_4__clk = clk;
  assign RELU_inst_4__reset = reset;
  assign activation_function_in_4_tieoff = activation_function_in_4;
  assign RELU_inst_4__activation_function_in = activation_function_in_4;
  assign activation_function_out_4 = RELU_inst_4__activation_function_out;
  assign RELU_inst_5__clk = clk;
  assign RELU_inst_5__reset = reset;
  assign activation_function_in_5_tieoff = activation_function_in_5;
  assign RELU_inst_5__activation_function_in = activation_function_in_5;
  assign activation_function_out_5 = RELU_inst_5__activation_function_out;
  assign RELU_inst_6__clk = clk;
  assign RELU_inst_6__reset = reset;
  assign activation_function_in_6_tieoff = activation_function_in_6;
  assign RELU_inst_6__activation_function_in = activation_function_in_6;
  assign activation_function_out_6 = RELU_inst_6__activation_function_out;
  assign RELU_inst_7__clk = clk;
  assign RELU_inst_7__reset = reset;
  assign activation_function_in_7_tieoff = activation_function_in_7;
  assign RELU_inst_7__activation_function_in = activation_function_in_7;
  assign activation_function_out_7 = RELU_inst_7__activation_function_out;
  assign RELU_inst_8__clk = clk;
  assign RELU_inst_8__reset = reset;
  assign activation_function_in_8_tieoff = activation_function_in_8;
  assign RELU_inst_8__activation_function_in = activation_function_in_8;
  assign activation_function_out_8 = RELU_inst_8__activation_function_out;
  assign RELU_inst_9__clk = clk;
  assign RELU_inst_9__reset = reset;
  assign activation_function_in_9_tieoff = activation_function_in_9;
  assign RELU_inst_9__activation_function_in = activation_function_in_9;
  assign activation_function_out_9 = RELU_inst_9__activation_function_out;
  assign RELU_inst_10__clk = clk;
  assign RELU_inst_10__reset = reset;
  assign activation_function_in_10_tieoff = activation_function_in_10;
  assign RELU_inst_10__activation_function_in = activation_function_in_10;
  assign activation_function_out_10 = RELU_inst_10__activation_function_out;
  assign RELU_inst_11__clk = clk;
  assign RELU_inst_11__reset = reset;
  assign activation_function_in_11_tieoff = activation_function_in_11;
  assign RELU_inst_11__activation_function_in = activation_function_in_11;
  assign activation_function_out_11 = RELU_inst_11__activation_function_out;
  assign RELU_inst_12__clk = clk;
  assign RELU_inst_12__reset = reset;
  assign activation_function_in_12_tieoff = activation_function_in_12;
  assign RELU_inst_12__activation_function_in = activation_function_in_12;
  assign activation_function_out_12 = RELU_inst_12__activation_function_out;
  assign RELU_inst_13__clk = clk;
  assign RELU_inst_13__reset = reset;
  assign activation_function_in_13_tieoff = activation_function_in_13;
  assign RELU_inst_13__activation_function_in = activation_function_in_13;
  assign activation_function_out_13 = RELU_inst_13__activation_function_out;
  assign RELU_inst_14__clk = clk;
  assign RELU_inst_14__reset = reset;
  assign activation_function_in_14_tieoff = activation_function_in_14;
  assign RELU_inst_14__activation_function_in = activation_function_in_14;
  assign activation_function_out_14 = RELU_inst_14__activation_function_out;
  assign RELU_inst_15__clk = clk;
  assign RELU_inst_15__reset = reset;
  assign activation_function_in_15_tieoff = activation_function_in_15;
  assign RELU_inst_15__activation_function_in = activation_function_in_15;
  assign activation_function_out_15 = RELU_inst_15__activation_function_out;

endmodule


// PyMTL Component HWB_Sim Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

//module ml_block_input
//(
//clk,
//clk_portain,
//clk_portaout,
//clr0,
//clr1,
//ena0,
//ena1,
//ena2,
//ena3,
//portaaddr,
//portaaddrstall,
//portabyteenamasks,
//portadatain,
//portadataout,
//portare,
//portawe,
//reset
//);
//input  [0:0] clk ;
//input  [0:0] clk_portain ;
//input  [0:0] clk_portaout ;
//input  [0:0] clr0 ;
//input  [0:0] clr1 ;
//input  [0:0] ena0 ;
//input  [0:0] ena1 ;
//input  [0:0] ena2 ;
//input  [0:0] ena3 ;
//input  [7:0] portaaddr ;
//input  [0:0] portaaddrstall ;
//input  [0:0] portabyteenamasks ;
//input  [31:0] portadatain ;
//output [31:0] portadataout ;
//input  [0:0] portare ;
//input  [0:0] portawe ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_portain_tieoff;
//  wire [0:0] clk_portaout_tieoff;
//  wire [0:0] clr0_tieoff;
//  wire [0:0] clr1_tieoff;
//  wire [0:0] ena0_tieoff;
//  wire [0:0] ena1_tieoff;
//  wire [0:0] ena2_tieoff;
//  wire [0:0] ena3_tieoff;
//  wire [7:0] portaaddr_tieoff;
//  wire [0:0] portaaddrstall_tieoff;
//  wire [0:0] portabyteenamasks_tieoff;
//  wire [31:0] portadatain_tieoff;
//  wire [0:0] portare_tieoff;
//  wire [0:0] portawe_tieoff;
//
//  assign clk_portain_tieoff = clk_portain;
//  assign clk_portaout_tieoff = clk_portaout;
//  assign portare_tieoff = portare;
//  assign clr1_tieoff = clr1;
//  assign clr0_tieoff = clr0;
//  assign ena0_tieoff = ena0;
//  assign ena1_tieoff = ena1;
//  assign ena2_tieoff = ena2;
//  assign ena3_tieoff = ena3;
//  assign portaaddrstall_tieoff = portaaddrstall;
//  assign portabyteenamasks_tieoff = portabyteenamasks;
//  assign portawe_tieoff = portawe;
//  assign portaaddr_tieoff = portaaddr;
//  assign portadatain_tieoff = portadatain;
//  assign portadataout = 32'd0;
//
//endmodule


// PyMTL Component HWB_Wrapper Definition
// Full name: HWB_Wrapper__spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__count_2__name__v1__projection_empty
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module HWB_Wrapper__ec4a40ddf7e4f27f
(
clk,
clk_portain,
clk_portaout,
clr0,
clr1,
ena0,
ena1,
ena2,
ena3,
portaaddr,
portaaddrstall,
portabyteenamasks,
portadatain_0,
portadatain_1,
portadataout_0,
portadataout_1,
portare,
portawe_0,
portawe_1,
reset
);
input  [0:0] clk ;
input  [0:0] clk_portain ;
input  [0:0] clk_portaout ;
input  [0:0] clr0 ;
input  [0:0] clr1 ;
input  [0:0] ena0 ;
input  [0:0] ena1 ;
input  [0:0] ena2 ;
input  [0:0] ena3 ;
input  [7:0] portaaddr ;
input  [0:0] portaaddrstall ;
input  [0:0] portabyteenamasks ;
input  [31:0] portadatain_0 ;
input  [31:0] portadatain_1 ;
output [31:0] portadataout_0 ;
output [31:0] portadataout_1 ;
input  [0:0] portare ;
input  [0:0] portawe_0 ;
input  [0:0] portawe_1 ;
input  [0:0] reset ;

  wire [0:0] clk_portain_tieoff;
  wire [0:0] clk_portaout_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] clr0_tieoff;
  wire [0:0] clr1_tieoff;
  wire [0:0] ena0_tieoff;
  wire [0:0] ena1_tieoff;
  wire [0:0] ena2_tieoff;
  wire [0:0] ena3_tieoff;
  wire [7:0] portaaddr_tieoff;
  wire [0:0] portaaddrstall_tieoff;
  wire [0:0] portabyteenamasks_tieoff;
  wire [31:0] portadatain_0_tieoff;
  wire [31:0] portadatain_1_tieoff;
  wire [0:0] portare_tieoff;
  wire [0:0] portawe_0_tieoff;
  wire [0:0] portawe_1_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component ml_block_input_inst_0
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_0__clk;
  wire [0:0] ml_block_input_inst_0__clk_portain;
  wire [0:0] ml_block_input_inst_0__clk_portaout;
  wire [0:0] ml_block_input_inst_0__clr0;
  wire [0:0] ml_block_input_inst_0__clr1;
  wire [0:0] ml_block_input_inst_0__ena0;
  wire [0:0] ml_block_input_inst_0__ena1;
  wire [0:0] ml_block_input_inst_0__ena2;
  wire [0:0] ml_block_input_inst_0__ena3;
  wire [7:0] ml_block_input_inst_0__portaaddr;
  wire [0:0] ml_block_input_inst_0__portaaddrstall;
  wire [0:0] ml_block_input_inst_0__portabyteenamasks;
  wire [31:0] ml_block_input_inst_0__portadatain;
  wire [31:0] ml_block_input_inst_0__portadataout;
  wire [0:0] ml_block_input_inst_0__portare;
  wire [0:0] ml_block_input_inst_0__portawe;
  wire [0:0] ml_block_input_inst_0__reset;

  ml_block_input ml_block_input_inst_0
  (
////    .clk( ml_block_input_inst_0__clk ),
    .clk_portain( ml_block_input_inst_0__clk_portain ),
    .clk_portaout( ml_block_input_inst_0__clk_portaout ),
    .clr0( ml_block_input_inst_0__clr0 ),
    .clr1( ml_block_input_inst_0__clr1 ),
    .ena0( ml_block_input_inst_0__ena0 ),
    .ena1( ml_block_input_inst_0__ena1 ),
    .ena2( ml_block_input_inst_0__ena2 ),
    .ena3( ml_block_input_inst_0__ena3 ),
    .portaaddr( ml_block_input_inst_0__portaaddr ),
    .portaaddrstall( ml_block_input_inst_0__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_0__portabyteenamasks ),
    .portadatain( ml_block_input_inst_0__portadatain ),
    .portadataout( ml_block_input_inst_0__portadataout ),
    .portare( ml_block_input_inst_0__portare ),
    .portawe( ml_block_input_inst_0__portawe )
//    .reset( ml_block_input_inst_0__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_input_inst_1
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_1__clk;
  wire [0:0] ml_block_input_inst_1__clk_portain;
  wire [0:0] ml_block_input_inst_1__clk_portaout;
  wire [0:0] ml_block_input_inst_1__clr0;
  wire [0:0] ml_block_input_inst_1__clr1;
  wire [0:0] ml_block_input_inst_1__ena0;
  wire [0:0] ml_block_input_inst_1__ena1;
  wire [0:0] ml_block_input_inst_1__ena2;
  wire [0:0] ml_block_input_inst_1__ena3;
  wire [7:0] ml_block_input_inst_1__portaaddr;
  wire [0:0] ml_block_input_inst_1__portaaddrstall;
  wire [0:0] ml_block_input_inst_1__portabyteenamasks;
  wire [31:0] ml_block_input_inst_1__portadatain;
  wire [31:0] ml_block_input_inst_1__portadataout;
  wire [0:0] ml_block_input_inst_1__portare;
  wire [0:0] ml_block_input_inst_1__portawe;
  wire [0:0] ml_block_input_inst_1__reset;

  ml_block_input ml_block_input_inst_1
  (
////    .clk( ml_block_input_inst_1__clk ),
    .clk_portain( ml_block_input_inst_1__clk_portain ),
    .clk_portaout( ml_block_input_inst_1__clk_portaout ),
    .clr0( ml_block_input_inst_1__clr0 ),
    .clr1( ml_block_input_inst_1__clr1 ),
    .ena0( ml_block_input_inst_1__ena0 ),
    .ena1( ml_block_input_inst_1__ena1 ),
    .ena2( ml_block_input_inst_1__ena2 ),
    .ena3( ml_block_input_inst_1__ena3 ),
    .portaaddr( ml_block_input_inst_1__portaaddr ),
    .portaaddrstall( ml_block_input_inst_1__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_1__portabyteenamasks ),
    .portadatain( ml_block_input_inst_1__portadatain ),
    .portadataout( ml_block_input_inst_1__portadataout ),
    .portare( ml_block_input_inst_1__portare ),
    .portawe( ml_block_input_inst_1__portawe )
//    .reset( ml_block_input_inst_1__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_1
  //-------------------------------------------------------------

  assign ml_block_input_inst_0__clk = clk;
  assign ml_block_input_inst_0__reset = reset;
  assign clk_portain_tieoff = clk_portain;
  assign ml_block_input_inst_0__clk_portain = clk_portain;
  assign clk_portaout_tieoff = clk_portaout;
  assign ml_block_input_inst_0__clk_portaout = clk_portaout;
  assign portare_tieoff = portare;
  assign ml_block_input_inst_0__portare = portare;
  assign clr1_tieoff = clr1;
  assign ml_block_input_inst_0__clr1 = clr1;
  assign clr0_tieoff = clr0;
  assign ml_block_input_inst_0__clr0 = clr0;
  assign ena0_tieoff = ena0;
  assign ml_block_input_inst_0__ena0 = ena0;
  assign ena1_tieoff = ena1;
  assign ml_block_input_inst_0__ena1 = ena1;
  assign ena2_tieoff = ena2;
  assign ml_block_input_inst_0__ena2 = ena2;
  assign ena3_tieoff = ena3;
  assign ml_block_input_inst_0__ena3 = ena3;
  assign portaaddrstall_tieoff = portaaddrstall;
  assign ml_block_input_inst_0__portaaddrstall = portaaddrstall;
  assign portabyteenamasks_tieoff = portabyteenamasks;
  assign ml_block_input_inst_0__portabyteenamasks = portabyteenamasks;
  assign portawe_0_tieoff = portawe_0;
  assign ml_block_input_inst_0__portawe = portawe_0;
  assign portaaddr_tieoff = portaaddr;
  assign ml_block_input_inst_0__portaaddr = portaaddr;
  assign portadatain_0_tieoff = portadatain_0;
  assign ml_block_input_inst_0__portadatain = portadatain_0;
  assign portadataout_0 = ml_block_input_inst_0__portadataout;
  assign ml_block_input_inst_1__clk = clk;
  assign ml_block_input_inst_1__reset = reset;
  assign ml_block_input_inst_1__clk_portain = clk_portain;
  assign ml_block_input_inst_1__clk_portaout = clk_portaout;
  assign ml_block_input_inst_1__portare = portare;
  assign ml_block_input_inst_1__clr1 = clr1;
  assign ml_block_input_inst_1__clr0 = clr0;
  assign ml_block_input_inst_1__ena0 = ena0;
  assign ml_block_input_inst_1__ena1 = ena1;
  assign ml_block_input_inst_1__ena2 = ena2;
  assign ml_block_input_inst_1__ena3 = ena3;
  assign ml_block_input_inst_1__portaaddrstall = portaaddrstall;
  assign ml_block_input_inst_1__portabyteenamasks = portabyteenamasks;
  assign portawe_1_tieoff = portawe_1;
  assign ml_block_input_inst_1__portawe = portawe_1;
  assign ml_block_input_inst_1__portaaddr = portaaddr;
  assign portadatain_1_tieoff = portadatain_1;
  assign ml_block_input_inst_1__portadatain = portadatain_1;
  assign portadataout_1 = ml_block_input_inst_1__portadataout;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component InputInterconnect Definition
// Full name: InputInterconnect__buffer_width_32__mlb_width_24__mlb_width_used_8__num_buffers_2__num_mlbs_32__projection_{'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}__sim_False
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module InputInterconnect__4f39730aa7415db6
(
clk,
inputs_from_buffer_0,
inputs_from_buffer_1,
inputs_from_mlb_0,
inputs_from_mlb_1,
inputs_from_mlb_10,
inputs_from_mlb_11,
inputs_from_mlb_12,
inputs_from_mlb_13,
inputs_from_mlb_14,
inputs_from_mlb_15,
inputs_from_mlb_16,
inputs_from_mlb_17,
inputs_from_mlb_18,
inputs_from_mlb_19,
inputs_from_mlb_2,
inputs_from_mlb_20,
inputs_from_mlb_21,
inputs_from_mlb_22,
inputs_from_mlb_23,
inputs_from_mlb_24,
inputs_from_mlb_25,
inputs_from_mlb_26,
inputs_from_mlb_27,
inputs_from_mlb_28,
inputs_from_mlb_29,
inputs_from_mlb_3,
inputs_from_mlb_30,
inputs_from_mlb_31,
inputs_from_mlb_4,
inputs_from_mlb_5,
inputs_from_mlb_6,
inputs_from_mlb_7,
inputs_from_mlb_8,
inputs_from_mlb_9,
outputs_to_buffer_0,
outputs_to_buffer_1,
outputs_to_mlb_0,
outputs_to_mlb_1,
outputs_to_mlb_10,
outputs_to_mlb_11,
outputs_to_mlb_12,
outputs_to_mlb_13,
outputs_to_mlb_14,
outputs_to_mlb_15,
outputs_to_mlb_16,
outputs_to_mlb_17,
outputs_to_mlb_18,
outputs_to_mlb_19,
outputs_to_mlb_2,
outputs_to_mlb_20,
outputs_to_mlb_21,
outputs_to_mlb_22,
outputs_to_mlb_23,
outputs_to_mlb_24,
outputs_to_mlb_25,
outputs_to_mlb_26,
outputs_to_mlb_27,
outputs_to_mlb_28,
outputs_to_mlb_29,
outputs_to_mlb_3,
outputs_to_mlb_30,
outputs_to_mlb_31,
outputs_to_mlb_4,
outputs_to_mlb_5,
outputs_to_mlb_6,
outputs_to_mlb_7,
outputs_to_mlb_8,
outputs_to_mlb_9,
reset
);
input  [0:0] clk ;
input  [31:0] inputs_from_buffer_0 ;
input  [31:0] inputs_from_buffer_1 ;
input  [23:0] inputs_from_mlb_0 ;
input  [23:0] inputs_from_mlb_1 ;
input  [23:0] inputs_from_mlb_10 ;
input  [23:0] inputs_from_mlb_11 ;
input  [23:0] inputs_from_mlb_12 ;
input  [23:0] inputs_from_mlb_13 ;
input  [23:0] inputs_from_mlb_14 ;
input  [23:0] inputs_from_mlb_15 ;
input  [23:0] inputs_from_mlb_16 ;
input  [23:0] inputs_from_mlb_17 ;
input  [23:0] inputs_from_mlb_18 ;
input  [23:0] inputs_from_mlb_19 ;
input  [23:0] inputs_from_mlb_2 ;
input  [23:0] inputs_from_mlb_20 ;
input  [23:0] inputs_from_mlb_21 ;
input  [23:0] inputs_from_mlb_22 ;
input  [23:0] inputs_from_mlb_23 ;
input  [23:0] inputs_from_mlb_24 ;
input  [23:0] inputs_from_mlb_25 ;
input  [23:0] inputs_from_mlb_26 ;
input  [23:0] inputs_from_mlb_27 ;
input  [23:0] inputs_from_mlb_28 ;
input  [23:0] inputs_from_mlb_29 ;
input  [23:0] inputs_from_mlb_3 ;
input  [23:0] inputs_from_mlb_30 ;
input  [23:0] inputs_from_mlb_31 ;
input  [23:0] inputs_from_mlb_4 ;
input  [23:0] inputs_from_mlb_5 ;
input  [23:0] inputs_from_mlb_6 ;
input  [23:0] inputs_from_mlb_7 ;
input  [23:0] inputs_from_mlb_8 ;
input  [23:0] inputs_from_mlb_9 ;
output [31:0] outputs_to_buffer_0 ;
output [31:0] outputs_to_buffer_1 ;
output [23:0] outputs_to_mlb_0 ;
output [23:0] outputs_to_mlb_1 ;
output [23:0] outputs_to_mlb_10 ;
output [23:0] outputs_to_mlb_11 ;
output [23:0] outputs_to_mlb_12 ;
output [23:0] outputs_to_mlb_13 ;
output [23:0] outputs_to_mlb_14 ;
output [23:0] outputs_to_mlb_15 ;
output [23:0] outputs_to_mlb_16 ;
output [23:0] outputs_to_mlb_17 ;
output [23:0] outputs_to_mlb_18 ;
output [23:0] outputs_to_mlb_19 ;
output [23:0] outputs_to_mlb_2 ;
output [23:0] outputs_to_mlb_20 ;
output [23:0] outputs_to_mlb_21 ;
output [23:0] outputs_to_mlb_22 ;
output [23:0] outputs_to_mlb_23 ;
output [23:0] outputs_to_mlb_24 ;
output [23:0] outputs_to_mlb_25 ;
output [23:0] outputs_to_mlb_26 ;
output [23:0] outputs_to_mlb_27 ;
output [23:0] outputs_to_mlb_28 ;
output [23:0] outputs_to_mlb_29 ;
output [23:0] outputs_to_mlb_3 ;
output [23:0] outputs_to_mlb_30 ;
output [23:0] outputs_to_mlb_31 ;
output [23:0] outputs_to_mlb_4 ;
output [23:0] outputs_to_mlb_5 ;
output [23:0] outputs_to_mlb_6 ;
output [23:0] outputs_to_mlb_7 ;
output [23:0] outputs_to_mlb_8 ;
output [23:0] outputs_to_mlb_9 ;
input  [0:0] reset ;

  wire [0:0] clk_tieoff;
  wire [31:0] inputs_from_buffer_0_tieoff;
  wire [31:0] inputs_from_buffer_1_tieoff;
  wire [23:0] inputs_from_mlb_0_tieoff;
  wire [23:0] inputs_from_mlb_10_tieoff;
  wire [23:0] inputs_from_mlb_11_tieoff;
  wire [23:0] inputs_from_mlb_12_tieoff;
  wire [23:0] inputs_from_mlb_13_tieoff;
  wire [23:0] inputs_from_mlb_14_tieoff;
  wire [23:0] inputs_from_mlb_15_tieoff;
  wire [23:0] inputs_from_mlb_16_tieoff;
  wire [23:0] inputs_from_mlb_17_tieoff;
  wire [23:0] inputs_from_mlb_18_tieoff;
  wire [23:0] inputs_from_mlb_19_tieoff;
  wire [23:0] inputs_from_mlb_1_tieoff;
  wire [23:0] inputs_from_mlb_20_tieoff;
  wire [23:0] inputs_from_mlb_21_tieoff;
  wire [23:0] inputs_from_mlb_22_tieoff;
  wire [23:0] inputs_from_mlb_23_tieoff;
  wire [23:0] inputs_from_mlb_24_tieoff;
  wire [23:0] inputs_from_mlb_25_tieoff;
  wire [23:0] inputs_from_mlb_26_tieoff;
  wire [23:0] inputs_from_mlb_27_tieoff;
  wire [23:0] inputs_from_mlb_28_tieoff;
  wire [23:0] inputs_from_mlb_29_tieoff;
  wire [23:0] inputs_from_mlb_2_tieoff;
  wire [23:0] inputs_from_mlb_30_tieoff;
  wire [23:0] inputs_from_mlb_31_tieoff;
  wire [23:0] inputs_from_mlb_3_tieoff;
  wire [23:0] inputs_from_mlb_4_tieoff;
  wire [23:0] inputs_from_mlb_5_tieoff;
  wire [23:0] inputs_from_mlb_6_tieoff;
  wire [23:0] inputs_from_mlb_7_tieoff;
  wire [23:0] inputs_from_mlb_8_tieoff;
  wire [23:0] inputs_from_mlb_9_tieoff;
  wire [0:0] reset_tieoff;

  assign inputs_from_buffer_0_tieoff = inputs_from_buffer_0;
  assign inputs_from_buffer_1_tieoff = inputs_from_buffer_1;
  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
  assign outputs_to_mlb_1 = inputs_from_mlb_0;
  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
  assign outputs_to_mlb_0[7:0] = inputs_from_buffer_0[7:0];
  assign outputs_to_buffer_0[7:0] = inputs_from_mlb_1[7:0];
  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
  assign outputs_to_mlb_3 = inputs_from_mlb_2;
  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
  assign outputs_to_mlb_2[7:0] = inputs_from_buffer_0[15:8];
  assign outputs_to_buffer_0[15:8] = inputs_from_mlb_3[7:0];
  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
  assign outputs_to_mlb_9 = inputs_from_mlb_8;
  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
  assign outputs_to_mlb_8[7:0] = inputs_from_buffer_0[23:16];
  assign outputs_to_buffer_0[23:16] = inputs_from_mlb_9[7:0];
  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
  assign outputs_to_mlb_11 = inputs_from_mlb_10;
  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
  assign outputs_to_mlb_10[7:0] = inputs_from_buffer_0[31:24];
  assign outputs_to_buffer_0[31:24] = inputs_from_mlb_11[7:0];
  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
  assign outputs_to_mlb_5 = inputs_from_mlb_4;
  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
  assign outputs_to_mlb_4[7:0] = inputs_from_buffer_0[7:0];
  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
  assign outputs_to_mlb_7 = inputs_from_mlb_6;
  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
  assign outputs_to_mlb_6[7:0] = inputs_from_buffer_0[15:8];
  assign inputs_from_mlb_12_tieoff = inputs_from_mlb_12;
  assign outputs_to_mlb_13 = inputs_from_mlb_12;
  assign inputs_from_mlb_13_tieoff = inputs_from_mlb_13;
  assign outputs_to_mlb_12[7:0] = inputs_from_buffer_0[23:16];
  assign inputs_from_mlb_14_tieoff = inputs_from_mlb_14;
  assign outputs_to_mlb_15 = inputs_from_mlb_14;
  assign inputs_from_mlb_15_tieoff = inputs_from_mlb_15;
  assign outputs_to_mlb_14[7:0] = inputs_from_buffer_0[31:24];
  assign inputs_from_mlb_16_tieoff = inputs_from_mlb_16;
  assign outputs_to_mlb_17 = inputs_from_mlb_16;
  assign inputs_from_mlb_17_tieoff = inputs_from_mlb_17;
  assign outputs_to_mlb_16[7:0] = inputs_from_buffer_1[7:0];
  assign outputs_to_buffer_1[7:0] = inputs_from_mlb_17[7:0];
  assign inputs_from_mlb_18_tieoff = inputs_from_mlb_18;
  assign outputs_to_mlb_19 = inputs_from_mlb_18;
  assign inputs_from_mlb_19_tieoff = inputs_from_mlb_19;
  assign outputs_to_mlb_18[7:0] = inputs_from_buffer_1[15:8];
  assign outputs_to_buffer_1[15:8] = inputs_from_mlb_19[7:0];
  assign inputs_from_mlb_24_tieoff = inputs_from_mlb_24;
  assign outputs_to_mlb_25 = inputs_from_mlb_24;
  assign inputs_from_mlb_25_tieoff = inputs_from_mlb_25;
  assign outputs_to_mlb_24[7:0] = inputs_from_buffer_1[23:16];
  assign outputs_to_buffer_1[23:16] = inputs_from_mlb_25[7:0];
  assign inputs_from_mlb_26_tieoff = inputs_from_mlb_26;
  assign outputs_to_mlb_27 = inputs_from_mlb_26;
  assign inputs_from_mlb_27_tieoff = inputs_from_mlb_27;
  assign outputs_to_mlb_26[7:0] = inputs_from_buffer_1[31:24];
  assign outputs_to_buffer_1[31:24] = inputs_from_mlb_27[7:0];
  assign inputs_from_mlb_20_tieoff = inputs_from_mlb_20;
  assign outputs_to_mlb_21 = inputs_from_mlb_20;
  assign inputs_from_mlb_21_tieoff = inputs_from_mlb_21;
  assign outputs_to_mlb_20[7:0] = inputs_from_buffer_1[7:0];
  assign inputs_from_mlb_22_tieoff = inputs_from_mlb_22;
  assign outputs_to_mlb_23 = inputs_from_mlb_22;
  assign inputs_from_mlb_23_tieoff = inputs_from_mlb_23;
  assign outputs_to_mlb_22[7:0] = inputs_from_buffer_1[15:8];
  assign inputs_from_mlb_28_tieoff = inputs_from_mlb_28;
  assign outputs_to_mlb_29 = inputs_from_mlb_28;
  assign inputs_from_mlb_29_tieoff = inputs_from_mlb_29;
  assign outputs_to_mlb_28[7:0] = inputs_from_buffer_1[23:16];
  assign inputs_from_mlb_30_tieoff = inputs_from_mlb_30;
  assign outputs_to_mlb_31 = inputs_from_mlb_30;
  assign inputs_from_mlb_31_tieoff = inputs_from_mlb_31;
  assign outputs_to_mlb_30[7:0] = inputs_from_buffer_1[31:24];
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component InputInterconnect Definition
//// Full name: InputInterconnect__buffer_width_8__mlb_width_-1__mlb_width_used_8__num_buffers_1__num_mlbs_12__projection_{'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py
//
//module InputInterconnect__58c180ebeb1b5092
//(
//clk,
//inputs_from_buffer_0,
//inputs_from_mlb_0,
//inputs_from_mlb_1,
//inputs_from_mlb_10,
//inputs_from_mlb_11,
//inputs_from_mlb_2,
//inputs_from_mlb_3,
//inputs_from_mlb_4,
//inputs_from_mlb_5,
//inputs_from_mlb_6,
//inputs_from_mlb_7,
//inputs_from_mlb_8,
//inputs_from_mlb_9,
//outputs_to_buffer_0,
//outputs_to_mlb_0,
//outputs_to_mlb_1,
//outputs_to_mlb_10,
//outputs_to_mlb_11,
//outputs_to_mlb_2,
//outputs_to_mlb_3,
//outputs_to_mlb_4,
//outputs_to_mlb_5,
//outputs_to_mlb_6,
//outputs_to_mlb_7,
//outputs_to_mlb_8,
//outputs_to_mlb_9,
//reset
//);
//input  [0:0] clk ;
//input  [7:0] inputs_from_buffer_0 ;
//input  [7:0] inputs_from_mlb_0 ;
//input  [7:0] inputs_from_mlb_1 ;
//input  [7:0] inputs_from_mlb_10 ;
//input  [7:0] inputs_from_mlb_11 ;
//input  [7:0] inputs_from_mlb_2 ;
//input  [7:0] inputs_from_mlb_3 ;
//input  [7:0] inputs_from_mlb_4 ;
//input  [7:0] inputs_from_mlb_5 ;
//input  [7:0] inputs_from_mlb_6 ;
//input  [7:0] inputs_from_mlb_7 ;
//input  [7:0] inputs_from_mlb_8 ;
//input  [7:0] inputs_from_mlb_9 ;
//output [7:0] outputs_to_buffer_0 ;
//output [7:0] outputs_to_mlb_0 ;
//output [7:0] outputs_to_mlb_1 ;
//output [7:0] outputs_to_mlb_10 ;
//output [7:0] outputs_to_mlb_11 ;
//output [7:0] outputs_to_mlb_2 ;
//output [7:0] outputs_to_mlb_3 ;
//output [7:0] outputs_to_mlb_4 ;
//output [7:0] outputs_to_mlb_5 ;
//output [7:0] outputs_to_mlb_6 ;
//output [7:0] outputs_to_mlb_7 ;
//output [7:0] outputs_to_mlb_8 ;
//output [7:0] outputs_to_mlb_9 ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_tieoff;
//  wire [7:0] inputs_from_buffer_0_tieoff;
//  wire [7:0] inputs_from_mlb_0_tieoff;
//  wire [7:0] inputs_from_mlb_10_tieoff;
//  wire [7:0] inputs_from_mlb_11_tieoff;
//  wire [7:0] inputs_from_mlb_1_tieoff;
//  wire [7:0] inputs_from_mlb_2_tieoff;
//  wire [7:0] inputs_from_mlb_3_tieoff;
//  wire [7:0] inputs_from_mlb_4_tieoff;
//  wire [7:0] inputs_from_mlb_5_tieoff;
//  wire [7:0] inputs_from_mlb_6_tieoff;
//  wire [7:0] inputs_from_mlb_7_tieoff;
//  wire [7:0] inputs_from_mlb_8_tieoff;
//  wire [7:0] inputs_from_mlb_9_tieoff;
//  wire [0:0] reset_tieoff;
//
//  assign inputs_from_buffer_0_tieoff = inputs_from_buffer_0;
//  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
//  assign outputs_to_mlb_1 = inputs_from_mlb_0;
//  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
//  assign outputs_to_mlb_2 = inputs_from_mlb_1;
//  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
//  assign outputs_to_mlb_3 = inputs_from_mlb_2;
//  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
//  assign outputs_to_mlb_4 = inputs_from_mlb_3;
//  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
//  assign outputs_to_mlb_5 = inputs_from_mlb_4;
//  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
//  assign outputs_to_mlb_0[7:0] = inputs_from_buffer_0[7:0];
//  assign outputs_to_buffer_0[7:0] = inputs_from_mlb_5[7:0];
//  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
//  assign outputs_to_mlb_7 = inputs_from_mlb_6;
//  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
//  assign outputs_to_mlb_8 = inputs_from_mlb_7;
//  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
//  assign outputs_to_mlb_9 = inputs_from_mlb_8;
//  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
//  assign outputs_to_mlb_10 = inputs_from_mlb_9;
//  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
//  assign outputs_to_mlb_11 = inputs_from_mlb_10;
//  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
//  assign outputs_to_mlb_6[7:0] = inputs_from_buffer_0[7:0];
//  assign clk_tieoff = clk;
//  assign reset_tieoff = reset;
//
//endmodule


// PyMTL Component Register Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py

//module Register__reg_width_8__preload_value_0__sim_True
//(
//clk,
//ena,
//input_data,
//output_data,
//reset
//);
//input  [0:0] clk ;
//input  [0:0] ena ;
//input  [7:0] input_data ;
//output [7:0] output_data ;
//input  [0:0] reset ;
//
////  localparam wire [0:0] __const__preload_value_at_upblk0  = 1'd0;
//  wire [7:0] REG;
//  wire [0:0] ena_tieoff;
//  wire [7:0] input_data_tieoff;
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:38
//  // @update_ff
//  // def upblk0():
//  //     if s.reset:
//  //         s.REG <<= preload_value
//  //     else:
//  //         if s.ena:
//  //             s.REG <<= s.input_data
//  
//  always @(posedge clk) begin : upblk0
//    if ( reset ) begin
//      REG <= 1'd0;
//    end
//    else if ( ena ) begin
//      REG <= input_data;
//    end
//  end
//
//  assign input_data_tieoff = input_data;
//  assign ena_tieoff = ena;
//  assign output_data = REG;
//
//endmodule


// PyMTL Component Register Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py

//module Register__reg_width_32__preload_value_0__sim_True
//(
//clk,
//ena,
//input_data,
//output_data,
//reset
//);
//input  [0:0] clk ;
//input  [0:0] ena ;
//input  [31:0] input_data ;
//output [31:0] output_data ;
//input  [0:0] reset ;
//
////  localparam wire [0:0] __const__preload_value_at_upblk0  = 1'd0;
//  wire [31:0] REG;
//  wire [0:0] ena_tieoff;
//  wire [31:0] input_data_tieoff;
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:38
//  // @update_ff
//  // def upblk0():
//  //     if s.reset:
//  //         s.REG <<= preload_value
//  //     else:
//  //         if s.ena:
//  //             s.REG <<= s.input_data
//  
//  always @(posedge clk) begin : upblk0
//    if ( reset ) begin
//      REG <= 31'd0;
//    end
//    else if ( ena ) begin
//      REG <= input_data;
//    end
//  end
//
//  assign input_data_tieoff = input_data;
//  assign ena_tieoff = ena;
//  assign output_data = REG;
//
//endmodule


// PyMTL Component MAC Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py

//module MAC__input_width_8__weight_width_8__sum_width_32__sim_True
//(
//acc_en,
//clk,
//input_en,
//input_in,
//input_out,
//reset,
//sum_in,
//sum_out,
//weight_en,
//weight_in,
//weight_out
//);
//input  [0:0] acc_en ;
//input  [0:0] clk ;
//input  [0:0] input_en ;
//input  [7:0] input_in ;
//output [7:0] input_out ;
//input  [0:0] reset ;
//input  [31:0] sum_in ;
//output [31:0] sum_out ;
//input  [0:0] weight_en ;
//input  [7:0] weight_in ;
//output [7:0] weight_out ;
//
//  wire [0:0] acc_en_tieoff;
//  wire [0:0] input_en_tieoff;
//  wire [7:0] input_in_tieoff;
//  wire [31:0] input_in_w;
//  wire [31:0] input_out_w;
//  wire [31:0] sum_in_tieoff;
//  wire [0:0] weight_en_tieoff;
//  wire [7:0] weight_in_tieoff;
//  wire [31:0] weight_in_w;
//  wire [31:0] weight_out_w;
//  //-------------------------------------------------------------
//  // Component input_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] input_reg__clk;
//  wire [0:0] input_reg__ena;
//  wire [7:0] input_reg__input_data;
//  wire [7:0] input_reg__output_data;
//  wire [0:0] input_reg__reset;
//
//  Register__reg_width_8__preload_value_0__sim_True input_reg
//  (
//    .clk( input_reg__clk ),
//    .ena( input_reg__ena ),
//    .input_data( input_reg__input_data ),
//    .output_data( input_reg__output_data ),
//    .reset( input_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component input_reg
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component sum_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] sum_reg__clk;
//  wire [0:0] sum_reg__ena;
//  wire [31:0] sum_reg__input_data;
//  wire [31:0] sum_reg__output_data;
//  wire [0:0] sum_reg__reset;
//
//  Register__reg_width_32__preload_value_0__sim_True sum_reg
//  (
//    .clk( sum_reg__clk ),
//    .ena( sum_reg__ena ),
//    .input_data( sum_reg__input_data ),
//    .output_data( sum_reg__output_data ),
//    .reset( sum_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component sum_reg
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component weight_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] weight_reg__clk;
//  wire [0:0] weight_reg__ena;
//  wire [7:0] weight_reg__input_data;
//  wire [7:0] weight_reg__output_data;
//  wire [0:0] weight_reg__reset;
//
//  Register__reg_width_8__preload_value_0__sim_True weight_reg
//  (
//    .clk( weight_reg__clk ),
//    .ena( weight_reg__ena ),
//    .input_data( weight_reg__input_data ),
//    .output_data( weight_reg__output_data ),
//    .reset( weight_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component weight_reg
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:254
//  // @update
//  // def upblk0():
//  //     s.sum_reg.input_data @= s.sum_reg.output_data + \
//  //                             s.input_in_w * s.weight_in_w
//  //     if s.acc_en:
//  //         s.sum_out @= s.sum_reg.output_data
//  //     else:
//  //         s.sum_out @= s.sum_in + s.input_out_w * s.weight_out_w
//  
//  always@(*) begin : upblk0
//    sum_reg__input_data = sum_reg__output_data + ( input_in_w * weight_in_w );
//    if ( acc_en ) begin
//      sum_out = sum_reg__output_data;
//    end
//    else
//      sum_out = sum_in + ( input_out_w * weight_out_w );
//  end
//
//  assign input_in_tieoff = input_in;
//  assign input_en_tieoff = input_en;
//  assign input_reg__clk = clk;
//  assign input_reg__reset = reset;
//  assign input_reg__input_data = input_in;
//  assign input_reg__ena = input_en;
//  assign input_out = input_reg__output_data;
//  assign weight_in_tieoff = weight_in;
//  assign weight_en_tieoff = weight_en;
//  assign weight_reg__clk = clk;
//  assign weight_reg__reset = reset;
//  assign weight_reg__input_data = weight_in;
//  assign weight_reg__ena = weight_en;
//  assign weight_out = weight_reg__output_data;
//  assign sum_in_tieoff = sum_in;
//  assign acc_en_tieoff = acc_en;
//  assign sum_reg__clk = clk;
//  assign sum_reg__reset = reset;
//  assign sum_reg__ena = acc_en;
//  assign input_in_w[7:0] = input_in;
//  assign input_out_w[7:0] = input_out;
//  assign input_in_w[31:8] = 24'd0;
//  assign input_out_w[31:8] = 24'd0;
//  assign weight_in_w[7:0] = weight_in;
//  assign weight_out_w[7:0] = weight_out;
//  assign weight_in_w[31:8] = 24'd0;
//  assign weight_out_w[31:8] = 24'd0;
//
//endmodule


// PyMTL Component MACWrapper Definition
//// Full name: MACWrapper__count_12__input_width_8__weight_width_8__sum_width_32__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module MACWrapper__99bc39287f4a9fb4
//(
//acc_en_0,
//acc_en_1,
//acc_en_10,
//acc_en_11,
//acc_en_2,
//acc_en_3,
//acc_en_4,
//acc_en_5,
//acc_en_6,
//acc_en_7,
//acc_en_8,
//acc_en_9,
//clk,
//input_en_0,
//input_en_1,
//input_en_10,
//input_en_11,
//input_en_2,
//input_en_3,
//input_en_4,
//input_en_5,
//input_en_6,
//input_en_7,
//input_en_8,
//input_en_9,
//input_in_0,
//input_in_1,
//input_in_10,
//input_in_11,
//input_in_2,
//input_in_3,
//input_in_4,
//input_in_5,
//input_in_6,
//input_in_7,
//input_in_8,
//input_in_9,
//input_out_0,
//input_out_1,
//input_out_10,
//input_out_11,
//input_out_2,
//input_out_3,
//input_out_4,
//input_out_5,
//input_out_6,
//input_out_7,
//input_out_8,
//input_out_9,
//reset,
//sum_in_0,
//sum_in_1,
//sum_in_10,
//sum_in_11,
//sum_in_2,
//sum_in_3,
//sum_in_4,
//sum_in_5,
//sum_in_6,
//sum_in_7,
//sum_in_8,
//sum_in_9,
//sum_out_0,
//sum_out_1,
//sum_out_10,
//sum_out_11,
//sum_out_2,
//sum_out_3,
//sum_out_4,
//sum_out_5,
//sum_out_6,
//sum_out_7,
//sum_out_8,
//sum_out_9,
//weight_en_0,
//weight_en_1,
//weight_en_10,
//weight_en_11,
//weight_en_2,
//weight_en_3,
//weight_en_4,
//weight_en_5,
//weight_en_6,
//weight_en_7,
//weight_en_8,
//weight_en_9,
//weight_in_0,
//weight_in_1,
//weight_in_10,
//weight_in_11,
//weight_in_2,
//weight_in_3,
//weight_in_4,
//weight_in_5,
//weight_in_6,
//weight_in_7,
//weight_in_8,
//weight_in_9,
//weight_out_0,
//weight_out_1,
//weight_out_10,
//weight_out_11,
//weight_out_2,
//weight_out_3,
//weight_out_4,
//weight_out_5,
//weight_out_6,
//weight_out_7,
//weight_out_8,
//weight_out_9
//);
//input  [0:0] acc_en_0 ;
//input  [0:0] acc_en_1 ;
//input  [0:0] acc_en_10 ;
//input  [0:0] acc_en_11 ;
//input  [0:0] acc_en_2 ;
//input  [0:0] acc_en_3 ;
//input  [0:0] acc_en_4 ;
//input  [0:0] acc_en_5 ;
//input  [0:0] acc_en_6 ;
//input  [0:0] acc_en_7 ;
//input  [0:0] acc_en_8 ;
//input  [0:0] acc_en_9 ;
//input  [0:0] clk ;
//input  [0:0] input_en_0 ;
//input  [0:0] input_en_1 ;
//input  [0:0] input_en_10 ;
//input  [0:0] input_en_11 ;
//input  [0:0] input_en_2 ;
//input  [0:0] input_en_3 ;
//input  [0:0] input_en_4 ;
//input  [0:0] input_en_5 ;
//input  [0:0] input_en_6 ;
//input  [0:0] input_en_7 ;
//input  [0:0] input_en_8 ;
//input  [0:0] input_en_9 ;
//input  [7:0] input_in_0 ;
//input  [7:0] input_in_1 ;
//input  [7:0] input_in_10 ;
//input  [7:0] input_in_11 ;
//input  [7:0] input_in_2 ;
//input  [7:0] input_in_3 ;
//input  [7:0] input_in_4 ;
//input  [7:0] input_in_5 ;
//input  [7:0] input_in_6 ;
//input  [7:0] input_in_7 ;
//input  [7:0] input_in_8 ;
//input  [7:0] input_in_9 ;
//output [7:0] input_out_0 ;
//output [7:0] input_out_1 ;
//output [7:0] input_out_10 ;
//output [7:0] input_out_11 ;
//output [7:0] input_out_2 ;
//output [7:0] input_out_3 ;
//output [7:0] input_out_4 ;
//output [7:0] input_out_5 ;
//output [7:0] input_out_6 ;
//output [7:0] input_out_7 ;
//output [7:0] input_out_8 ;
//output [7:0] input_out_9 ;
//input  [0:0] reset ;
//input  [31:0] sum_in_0 ;
//input  [31:0] sum_in_1 ;
//input  [31:0] sum_in_10 ;
//input  [31:0] sum_in_11 ;
//input  [31:0] sum_in_2 ;
//input  [31:0] sum_in_3 ;
//input  [31:0] sum_in_4 ;
//input  [31:0] sum_in_5 ;
//input  [31:0] sum_in_6 ;
//input  [31:0] sum_in_7 ;
//input  [31:0] sum_in_8 ;
//input  [31:0] sum_in_9 ;
//output [31:0] sum_out_0 ;
//output [31:0] sum_out_1 ;
//output [31:0] sum_out_10 ;
//output [31:0] sum_out_11 ;
//output [31:0] sum_out_2 ;
//output [31:0] sum_out_3 ;
//output [31:0] sum_out_4 ;
//output [31:0] sum_out_5 ;
//output [31:0] sum_out_6 ;
//output [31:0] sum_out_7 ;
//output [31:0] sum_out_8 ;
//output [31:0] sum_out_9 ;
//input  [0:0] weight_en_0 ;
//input  [0:0] weight_en_1 ;
//input  [0:0] weight_en_10 ;
//input  [0:0] weight_en_11 ;
//input  [0:0] weight_en_2 ;
//input  [0:0] weight_en_3 ;
//input  [0:0] weight_en_4 ;
//input  [0:0] weight_en_5 ;
//input  [0:0] weight_en_6 ;
//input  [0:0] weight_en_7 ;
//input  [0:0] weight_en_8 ;
//input  [0:0] weight_en_9 ;
//input  [7:0] weight_in_0 ;
//input  [7:0] weight_in_1 ;
//input  [7:0] weight_in_10 ;
//input  [7:0] weight_in_11 ;
//input  [7:0] weight_in_2 ;
//input  [7:0] weight_in_3 ;
//input  [7:0] weight_in_4 ;
//input  [7:0] weight_in_5 ;
//input  [7:0] weight_in_6 ;
//input  [7:0] weight_in_7 ;
//input  [7:0] weight_in_8 ;
//input  [7:0] weight_in_9 ;
//output [7:0] weight_out_0 ;
//output [7:0] weight_out_1 ;
//output [7:0] weight_out_10 ;
//output [7:0] weight_out_11 ;
//output [7:0] weight_out_2 ;
//output [7:0] weight_out_3 ;
//output [7:0] weight_out_4 ;
//output [7:0] weight_out_5 ;
//output [7:0] weight_out_6 ;
//output [7:0] weight_out_7 ;
//output [7:0] weight_out_8 ;
//output [7:0] weight_out_9 ;
//
//  wire [0:0] acc_en_0_tieoff;
//  wire [0:0] acc_en_10_tieoff;
//  wire [0:0] acc_en_11_tieoff;
//  wire [0:0] acc_en_1_tieoff;
//  wire [0:0] acc_en_2_tieoff;
//  wire [0:0] acc_en_3_tieoff;
//  wire [0:0] acc_en_4_tieoff;
//  wire [0:0] acc_en_5_tieoff;
//  wire [0:0] acc_en_6_tieoff;
//  wire [0:0] acc_en_7_tieoff;
//  wire [0:0] acc_en_8_tieoff;
//  wire [0:0] acc_en_9_tieoff;
//  wire [0:0] input_en_0_tieoff;
//  wire [0:0] input_en_10_tieoff;
//  wire [0:0] input_en_11_tieoff;
//  wire [0:0] input_en_1_tieoff;
//  wire [0:0] input_en_2_tieoff;
//  wire [0:0] input_en_3_tieoff;
//  wire [0:0] input_en_4_tieoff;
//  wire [0:0] input_en_5_tieoff;
//  wire [0:0] input_en_6_tieoff;
//  wire [0:0] input_en_7_tieoff;
//  wire [0:0] input_en_8_tieoff;
//  wire [0:0] input_en_9_tieoff;
//  wire [7:0] input_in_0_tieoff;
//  wire [7:0] input_in_10_tieoff;
//  wire [7:0] input_in_11_tieoff;
//  wire [7:0] input_in_1_tieoff;
//  wire [7:0] input_in_2_tieoff;
//  wire [7:0] input_in_3_tieoff;
//  wire [7:0] input_in_4_tieoff;
//  wire [7:0] input_in_5_tieoff;
//  wire [7:0] input_in_6_tieoff;
//  wire [7:0] input_in_7_tieoff;
//  wire [7:0] input_in_8_tieoff;
//  wire [7:0] input_in_9_tieoff;
//  wire [31:0] sum_in_0_tieoff;
//  wire [31:0] sum_in_10_tieoff;
//  wire [31:0] sum_in_11_tieoff;
//  wire [31:0] sum_in_1_tieoff;
//  wire [31:0] sum_in_2_tieoff;
//  wire [31:0] sum_in_3_tieoff;
//  wire [31:0] sum_in_4_tieoff;
//  wire [31:0] sum_in_5_tieoff;
//  wire [31:0] sum_in_6_tieoff;
//  wire [31:0] sum_in_7_tieoff;
//  wire [31:0] sum_in_8_tieoff;
//  wire [31:0] sum_in_9_tieoff;
//  wire [0:0] weight_en_0_tieoff;
//  wire [0:0] weight_en_10_tieoff;
//  wire [0:0] weight_en_11_tieoff;
//  wire [0:0] weight_en_1_tieoff;
//  wire [0:0] weight_en_2_tieoff;
//  wire [0:0] weight_en_3_tieoff;
//  wire [0:0] weight_en_4_tieoff;
//  wire [0:0] weight_en_5_tieoff;
//  wire [0:0] weight_en_6_tieoff;
//  wire [0:0] weight_en_7_tieoff;
//  wire [0:0] weight_en_8_tieoff;
//  wire [0:0] weight_en_9_tieoff;
//  wire [7:0] weight_in_0_tieoff;
//  wire [7:0] weight_in_10_tieoff;
//  wire [7:0] weight_in_11_tieoff;
//  wire [7:0] weight_in_1_tieoff;
//  wire [7:0] weight_in_2_tieoff;
//  wire [7:0] weight_in_3_tieoff;
//  wire [7:0] weight_in_4_tieoff;
//  wire [7:0] weight_in_5_tieoff;
//  wire [7:0] weight_in_6_tieoff;
//  wire [7:0] weight_in_7_tieoff;
//  wire [7:0] weight_in_8_tieoff;
//  wire [7:0] weight_in_9_tieoff;
//  //-------------------------------------------------------------
//  // Component MAC_inst_0
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_0__acc_en;
//  wire [0:0] MAC_inst_0__clk;
//  wire [0:0] MAC_inst_0__input_en;
//  wire [7:0] MAC_inst_0__input_in;
//  wire [7:0] MAC_inst_0__input_out;
//  wire [0:0] MAC_inst_0__reset;
//  wire [31:0] MAC_inst_0__sum_in;
//  wire [31:0] MAC_inst_0__sum_out;
//  wire [0:0] MAC_inst_0__weight_en;
//  wire [7:0] MAC_inst_0__weight_in;
//  wire [7:0] MAC_inst_0__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_0
//  (
//    .acc_en( MAC_inst_0__acc_en ),
//    .clk( MAC_inst_0__clk ),
//    .input_en( MAC_inst_0__input_en ),
//    .input_in( MAC_inst_0__input_in ),
//    .input_out( MAC_inst_0__input_out ),
//    .reset( MAC_inst_0__reset ),
//    .sum_in( MAC_inst_0__sum_in ),
//    .sum_out( MAC_inst_0__sum_out ),
//    .weight_en( MAC_inst_0__weight_en ),
//    .weight_in( MAC_inst_0__weight_in ),
//    .weight_out( MAC_inst_0__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_0
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_1
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_1__acc_en;
//  wire [0:0] MAC_inst_1__clk;
//  wire [0:0] MAC_inst_1__input_en;
//  wire [7:0] MAC_inst_1__input_in;
//  wire [7:0] MAC_inst_1__input_out;
//  wire [0:0] MAC_inst_1__reset;
//  wire [31:0] MAC_inst_1__sum_in;
//  wire [31:0] MAC_inst_1__sum_out;
//  wire [0:0] MAC_inst_1__weight_en;
//  wire [7:0] MAC_inst_1__weight_in;
//  wire [7:0] MAC_inst_1__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_1
//  (
//    .acc_en( MAC_inst_1__acc_en ),
//    .clk( MAC_inst_1__clk ),
//    .input_en( MAC_inst_1__input_en ),
//    .input_in( MAC_inst_1__input_in ),
//    .input_out( MAC_inst_1__input_out ),
//    .reset( MAC_inst_1__reset ),
//    .sum_in( MAC_inst_1__sum_in ),
//    .sum_out( MAC_inst_1__sum_out ),
//    .weight_en( MAC_inst_1__weight_en ),
//    .weight_in( MAC_inst_1__weight_in ),
//    .weight_out( MAC_inst_1__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_1
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_10
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_10__acc_en;
//  wire [0:0] MAC_inst_10__clk;
//  wire [0:0] MAC_inst_10__input_en;
//  wire [7:0] MAC_inst_10__input_in;
//  wire [7:0] MAC_inst_10__input_out;
//  wire [0:0] MAC_inst_10__reset;
//  wire [31:0] MAC_inst_10__sum_in;
//  wire [31:0] MAC_inst_10__sum_out;
//  wire [0:0] MAC_inst_10__weight_en;
//  wire [7:0] MAC_inst_10__weight_in;
//  wire [7:0] MAC_inst_10__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_10
//  (
//    .acc_en( MAC_inst_10__acc_en ),
//    .clk( MAC_inst_10__clk ),
//    .input_en( MAC_inst_10__input_en ),
//    .input_in( MAC_inst_10__input_in ),
//    .input_out( MAC_inst_10__input_out ),
//    .reset( MAC_inst_10__reset ),
//    .sum_in( MAC_inst_10__sum_in ),
//    .sum_out( MAC_inst_10__sum_out ),
//    .weight_en( MAC_inst_10__weight_en ),
//    .weight_in( MAC_inst_10__weight_in ),
//    .weight_out( MAC_inst_10__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_10
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_11
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_11__acc_en;
//  wire [0:0] MAC_inst_11__clk;
//  wire [0:0] MAC_inst_11__input_en;
//  wire [7:0] MAC_inst_11__input_in;
//  wire [7:0] MAC_inst_11__input_out;
//  wire [0:0] MAC_inst_11__reset;
//  wire [31:0] MAC_inst_11__sum_in;
//  wire [31:0] MAC_inst_11__sum_out;
//  wire [0:0] MAC_inst_11__weight_en;
//  wire [7:0] MAC_inst_11__weight_in;
//  wire [7:0] MAC_inst_11__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_11
//  (
//    .acc_en( MAC_inst_11__acc_en ),
//    .clk( MAC_inst_11__clk ),
//    .input_en( MAC_inst_11__input_en ),
//    .input_in( MAC_inst_11__input_in ),
//    .input_out( MAC_inst_11__input_out ),
//    .reset( MAC_inst_11__reset ),
//    .sum_in( MAC_inst_11__sum_in ),
//    .sum_out( MAC_inst_11__sum_out ),
//    .weight_en( MAC_inst_11__weight_en ),
//    .weight_in( MAC_inst_11__weight_in ),
//    .weight_out( MAC_inst_11__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_11
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_2
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_2__acc_en;
//  wire [0:0] MAC_inst_2__clk;
//  wire [0:0] MAC_inst_2__input_en;
//  wire [7:0] MAC_inst_2__input_in;
//  wire [7:0] MAC_inst_2__input_out;
//  wire [0:0] MAC_inst_2__reset;
//  wire [31:0] MAC_inst_2__sum_in;
//  wire [31:0] MAC_inst_2__sum_out;
//  wire [0:0] MAC_inst_2__weight_en;
//  wire [7:0] MAC_inst_2__weight_in;
//  wire [7:0] MAC_inst_2__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_2
//  (
//    .acc_en( MAC_inst_2__acc_en ),
//    .clk( MAC_inst_2__clk ),
//    .input_en( MAC_inst_2__input_en ),
//    .input_in( MAC_inst_2__input_in ),
//    .input_out( MAC_inst_2__input_out ),
//    .reset( MAC_inst_2__reset ),
//    .sum_in( MAC_inst_2__sum_in ),
//    .sum_out( MAC_inst_2__sum_out ),
//    .weight_en( MAC_inst_2__weight_en ),
//    .weight_in( MAC_inst_2__weight_in ),
//    .weight_out( MAC_inst_2__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_2
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_3
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_3__acc_en;
//  wire [0:0] MAC_inst_3__clk;
//  wire [0:0] MAC_inst_3__input_en;
//  wire [7:0] MAC_inst_3__input_in;
//  wire [7:0] MAC_inst_3__input_out;
//  wire [0:0] MAC_inst_3__reset;
//  wire [31:0] MAC_inst_3__sum_in;
//  wire [31:0] MAC_inst_3__sum_out;
//  wire [0:0] MAC_inst_3__weight_en;
//  wire [7:0] MAC_inst_3__weight_in;
//  wire [7:0] MAC_inst_3__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_3
//  (
//    .acc_en( MAC_inst_3__acc_en ),
//    .clk( MAC_inst_3__clk ),
//    .input_en( MAC_inst_3__input_en ),
//    .input_in( MAC_inst_3__input_in ),
//    .input_out( MAC_inst_3__input_out ),
//    .reset( MAC_inst_3__reset ),
//    .sum_in( MAC_inst_3__sum_in ),
//    .sum_out( MAC_inst_3__sum_out ),
//    .weight_en( MAC_inst_3__weight_en ),
//    .weight_in( MAC_inst_3__weight_in ),
//    .weight_out( MAC_inst_3__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_3
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_4
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_4__acc_en;
//  wire [0:0] MAC_inst_4__clk;
//  wire [0:0] MAC_inst_4__input_en;
//  wire [7:0] MAC_inst_4__input_in;
//  wire [7:0] MAC_inst_4__input_out;
//  wire [0:0] MAC_inst_4__reset;
//  wire [31:0] MAC_inst_4__sum_in;
//  wire [31:0] MAC_inst_4__sum_out;
//  wire [0:0] MAC_inst_4__weight_en;
//  wire [7:0] MAC_inst_4__weight_in;
//  wire [7:0] MAC_inst_4__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_4
//  (
//    .acc_en( MAC_inst_4__acc_en ),
//    .clk( MAC_inst_4__clk ),
//    .input_en( MAC_inst_4__input_en ),
//    .input_in( MAC_inst_4__input_in ),
//    .input_out( MAC_inst_4__input_out ),
//    .reset( MAC_inst_4__reset ),
//    .sum_in( MAC_inst_4__sum_in ),
//    .sum_out( MAC_inst_4__sum_out ),
//    .weight_en( MAC_inst_4__weight_en ),
//    .weight_in( MAC_inst_4__weight_in ),
//    .weight_out( MAC_inst_4__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_4
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_5
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_5__acc_en;
//  wire [0:0] MAC_inst_5__clk;
//  wire [0:0] MAC_inst_5__input_en;
//  wire [7:0] MAC_inst_5__input_in;
//  wire [7:0] MAC_inst_5__input_out;
//  wire [0:0] MAC_inst_5__reset;
//  wire [31:0] MAC_inst_5__sum_in;
//  wire [31:0] MAC_inst_5__sum_out;
//  wire [0:0] MAC_inst_5__weight_en;
//  wire [7:0] MAC_inst_5__weight_in;
//  wire [7:0] MAC_inst_5__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_5
//  (
//    .acc_en( MAC_inst_5__acc_en ),
//    .clk( MAC_inst_5__clk ),
//    .input_en( MAC_inst_5__input_en ),
//    .input_in( MAC_inst_5__input_in ),
//    .input_out( MAC_inst_5__input_out ),
//    .reset( MAC_inst_5__reset ),
//    .sum_in( MAC_inst_5__sum_in ),
//    .sum_out( MAC_inst_5__sum_out ),
//    .weight_en( MAC_inst_5__weight_en ),
//    .weight_in( MAC_inst_5__weight_in ),
//    .weight_out( MAC_inst_5__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_5
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_6
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_6__acc_en;
//  wire [0:0] MAC_inst_6__clk;
//  wire [0:0] MAC_inst_6__input_en;
//  wire [7:0] MAC_inst_6__input_in;
//  wire [7:0] MAC_inst_6__input_out;
//  wire [0:0] MAC_inst_6__reset;
//  wire [31:0] MAC_inst_6__sum_in;
//  wire [31:0] MAC_inst_6__sum_out;
//  wire [0:0] MAC_inst_6__weight_en;
//  wire [7:0] MAC_inst_6__weight_in;
//  wire [7:0] MAC_inst_6__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_6
//  (
//    .acc_en( MAC_inst_6__acc_en ),
//    .clk( MAC_inst_6__clk ),
//    .input_en( MAC_inst_6__input_en ),
//    .input_in( MAC_inst_6__input_in ),
//    .input_out( MAC_inst_6__input_out ),
//    .reset( MAC_inst_6__reset ),
//    .sum_in( MAC_inst_6__sum_in ),
//    .sum_out( MAC_inst_6__sum_out ),
//    .weight_en( MAC_inst_6__weight_en ),
//    .weight_in( MAC_inst_6__weight_in ),
//    .weight_out( MAC_inst_6__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_6
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_7
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_7__acc_en;
//  wire [0:0] MAC_inst_7__clk;
//  wire [0:0] MAC_inst_7__input_en;
//  wire [7:0] MAC_inst_7__input_in;
//  wire [7:0] MAC_inst_7__input_out;
//  wire [0:0] MAC_inst_7__reset;
//  wire [31:0] MAC_inst_7__sum_in;
//  wire [31:0] MAC_inst_7__sum_out;
//  wire [0:0] MAC_inst_7__weight_en;
//  wire [7:0] MAC_inst_7__weight_in;
//  wire [7:0] MAC_inst_7__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_7
//  (
//    .acc_en( MAC_inst_7__acc_en ),
//    .clk( MAC_inst_7__clk ),
//    .input_en( MAC_inst_7__input_en ),
//    .input_in( MAC_inst_7__input_in ),
//    .input_out( MAC_inst_7__input_out ),
//    .reset( MAC_inst_7__reset ),
//    .sum_in( MAC_inst_7__sum_in ),
//    .sum_out( MAC_inst_7__sum_out ),
//    .weight_en( MAC_inst_7__weight_en ),
//    .weight_in( MAC_inst_7__weight_in ),
//    .weight_out( MAC_inst_7__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_7
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_8
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_8__acc_en;
//  wire [0:0] MAC_inst_8__clk;
//  wire [0:0] MAC_inst_8__input_en;
//  wire [7:0] MAC_inst_8__input_in;
//  wire [7:0] MAC_inst_8__input_out;
//  wire [0:0] MAC_inst_8__reset;
//  wire [31:0] MAC_inst_8__sum_in;
//  wire [31:0] MAC_inst_8__sum_out;
//  wire [0:0] MAC_inst_8__weight_en;
//  wire [7:0] MAC_inst_8__weight_in;
//  wire [7:0] MAC_inst_8__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_8
//  (
//    .acc_en( MAC_inst_8__acc_en ),
//    .clk( MAC_inst_8__clk ),
//    .input_en( MAC_inst_8__input_en ),
//    .input_in( MAC_inst_8__input_in ),
//    .input_out( MAC_inst_8__input_out ),
//    .reset( MAC_inst_8__reset ),
//    .sum_in( MAC_inst_8__sum_in ),
//    .sum_out( MAC_inst_8__sum_out ),
//    .weight_en( MAC_inst_8__weight_en ),
//    .weight_in( MAC_inst_8__weight_in ),
//    .weight_out( MAC_inst_8__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_8
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component MAC_inst_9
//  //-------------------------------------------------------------
//
//  wire [0:0] MAC_inst_9__acc_en;
//  wire [0:0] MAC_inst_9__clk;
//  wire [0:0] MAC_inst_9__input_en;
//  wire [7:0] MAC_inst_9__input_in;
//  wire [7:0] MAC_inst_9__input_out;
//  wire [0:0] MAC_inst_9__reset;
//  wire [31:0] MAC_inst_9__sum_in;
//  wire [31:0] MAC_inst_9__sum_out;
//  wire [0:0] MAC_inst_9__weight_en;
//  wire [7:0] MAC_inst_9__weight_in;
//  wire [7:0] MAC_inst_9__weight_out;
//
//  MAC__input_width_8__weight_width_8__sum_width_32__sim_True MAC_inst_9
//  (
//    .acc_en( MAC_inst_9__acc_en ),
//    .clk( MAC_inst_9__clk ),
//    .input_en( MAC_inst_9__input_en ),
//    .input_in( MAC_inst_9__input_in ),
//    .input_out( MAC_inst_9__input_out ),
//    .reset( MAC_inst_9__reset ),
//    .sum_in( MAC_inst_9__sum_in ),
//    .sum_out( MAC_inst_9__sum_out ),
//    .weight_en( MAC_inst_9__weight_en ),
//    .weight_in( MAC_inst_9__weight_in ),
//    .weight_out( MAC_inst_9__weight_out )
//  );
//
//  //-------------------------------------------------------------
//  // End of component MAC_inst_9
//  //-------------------------------------------------------------
//
//  assign MAC_inst_0__clk = clk;
//  assign MAC_inst_0__reset = reset;
//  assign weight_in_0_tieoff = weight_in_0;
//  assign MAC_inst_0__weight_in = weight_in_0;
//  assign input_in_0_tieoff = input_in_0;
//  assign MAC_inst_0__input_in = input_in_0;
//  assign sum_in_0_tieoff = sum_in_0;
//  assign MAC_inst_0__sum_in = sum_in_0;
//  assign acc_en_0_tieoff = acc_en_0;
//  assign MAC_inst_0__acc_en = acc_en_0;
//  assign input_en_0_tieoff = input_en_0;
//  assign MAC_inst_0__input_en = input_en_0;
//  assign weight_en_0_tieoff = weight_en_0;
//  assign MAC_inst_0__weight_en = weight_en_0;
//  assign input_out_0 = MAC_inst_0__input_out;
//  assign sum_out_0 = MAC_inst_0__sum_out;
//  assign weight_out_0 = MAC_inst_0__weight_out;
//  assign MAC_inst_1__clk = clk;
//  assign MAC_inst_1__reset = reset;
//  assign weight_in_1_tieoff = weight_in_1;
//  assign MAC_inst_1__weight_in = weight_in_1;
//  assign acc_en_1_tieoff = acc_en_1;
//  assign MAC_inst_1__acc_en = acc_en_1;
//  assign sum_in_1_tieoff = sum_in_1;
//  assign MAC_inst_1__sum_in = sum_in_1;
//  assign input_en_1_tieoff = input_en_1;
//  assign MAC_inst_1__input_en = input_en_1;
//  assign weight_en_1_tieoff = weight_en_1;
//  assign MAC_inst_1__weight_en = weight_en_1;
//  assign input_in_1_tieoff = input_in_1;
//  assign MAC_inst_1__input_in = input_in_1;
//  assign sum_out_1 = MAC_inst_1__sum_out;
//  assign input_out_1 = MAC_inst_1__input_out;
//  assign weight_out_1 = MAC_inst_1__weight_out;
//  assign MAC_inst_2__clk = clk;
//  assign MAC_inst_2__reset = reset;
//  assign weight_in_2_tieoff = weight_in_2;
//  assign MAC_inst_2__weight_in = weight_in_2;
//  assign acc_en_2_tieoff = acc_en_2;
//  assign MAC_inst_2__acc_en = acc_en_2;
//  assign input_en_2_tieoff = input_en_2;
//  assign MAC_inst_2__input_en = input_en_2;
//  assign sum_in_2_tieoff = sum_in_2;
//  assign MAC_inst_2__sum_in = sum_in_2;
//  assign input_in_2_tieoff = input_in_2;
//  assign MAC_inst_2__input_in = input_in_2;
//  assign weight_en_2_tieoff = weight_en_2;
//  assign MAC_inst_2__weight_en = weight_en_2;
//  assign sum_out_2 = MAC_inst_2__sum_out;
//  assign input_out_2 = MAC_inst_2__input_out;
//  assign weight_out_2 = MAC_inst_2__weight_out;
//  assign MAC_inst_3__clk = clk;
//  assign MAC_inst_3__reset = reset;
//  assign weight_in_3_tieoff = weight_in_3;
//  assign MAC_inst_3__weight_in = weight_in_3;
//  assign acc_en_3_tieoff = acc_en_3;
//  assign MAC_inst_3__acc_en = acc_en_3;
//  assign input_en_3_tieoff = input_en_3;
//  assign MAC_inst_3__input_en = input_en_3;
//  assign sum_in_3_tieoff = sum_in_3;
//  assign MAC_inst_3__sum_in = sum_in_3;
//  assign input_in_3_tieoff = input_in_3;
//  assign MAC_inst_3__input_in = input_in_3;
//  assign weight_en_3_tieoff = weight_en_3;
//  assign MAC_inst_3__weight_en = weight_en_3;
//  assign sum_out_3 = MAC_inst_3__sum_out;
//  assign input_out_3 = MAC_inst_3__input_out;
//  assign weight_out_3 = MAC_inst_3__weight_out;
//  assign MAC_inst_4__clk = clk;
//  assign MAC_inst_4__reset = reset;
//  assign weight_in_4_tieoff = weight_in_4;
//  assign MAC_inst_4__weight_in = weight_in_4;
//  assign acc_en_4_tieoff = acc_en_4;
//  assign MAC_inst_4__acc_en = acc_en_4;
//  assign input_en_4_tieoff = input_en_4;
//  assign MAC_inst_4__input_en = input_en_4;
//  assign sum_in_4_tieoff = sum_in_4;
//  assign MAC_inst_4__sum_in = sum_in_4;
//  assign input_in_4_tieoff = input_in_4;
//  assign MAC_inst_4__input_in = input_in_4;
//  assign weight_en_4_tieoff = weight_en_4;
//  assign MAC_inst_4__weight_en = weight_en_4;
//  assign sum_out_4 = MAC_inst_4__sum_out;
//  assign input_out_4 = MAC_inst_4__input_out;
//  assign weight_out_4 = MAC_inst_4__weight_out;
//  assign MAC_inst_5__clk = clk;
//  assign MAC_inst_5__reset = reset;
//  assign weight_in_5_tieoff = weight_in_5;
//  assign MAC_inst_5__weight_in = weight_in_5;
//  assign acc_en_5_tieoff = acc_en_5;
//  assign MAC_inst_5__acc_en = acc_en_5;
//  assign input_en_5_tieoff = input_en_5;
//  assign MAC_inst_5__input_en = input_en_5;
//  assign sum_in_5_tieoff = sum_in_5;
//  assign MAC_inst_5__sum_in = sum_in_5;
//  assign input_in_5_tieoff = input_in_5;
//  assign MAC_inst_5__input_in = input_in_5;
//  assign weight_en_5_tieoff = weight_en_5;
//  assign MAC_inst_5__weight_en = weight_en_5;
//  assign sum_out_5 = MAC_inst_5__sum_out;
//  assign input_out_5 = MAC_inst_5__input_out;
//  assign weight_out_5 = MAC_inst_5__weight_out;
//  assign MAC_inst_6__clk = clk;
//  assign MAC_inst_6__reset = reset;
//  assign weight_in_6_tieoff = weight_in_6;
//  assign MAC_inst_6__weight_in = weight_in_6;
//  assign acc_en_6_tieoff = acc_en_6;
//  assign MAC_inst_6__acc_en = acc_en_6;
//  assign input_en_6_tieoff = input_en_6;
//  assign MAC_inst_6__input_en = input_en_6;
//  assign sum_in_6_tieoff = sum_in_6;
//  assign MAC_inst_6__sum_in = sum_in_6;
//  assign input_in_6_tieoff = input_in_6;
//  assign MAC_inst_6__input_in = input_in_6;
//  assign weight_en_6_tieoff = weight_en_6;
//  assign MAC_inst_6__weight_en = weight_en_6;
//  assign sum_out_6 = MAC_inst_6__sum_out;
//  assign input_out_6 = MAC_inst_6__input_out;
//  assign weight_out_6 = MAC_inst_6__weight_out;
//  assign MAC_inst_7__clk = clk;
//  assign MAC_inst_7__reset = reset;
//  assign weight_in_7_tieoff = weight_in_7;
//  assign MAC_inst_7__weight_in = weight_in_7;
//  assign acc_en_7_tieoff = acc_en_7;
//  assign MAC_inst_7__acc_en = acc_en_7;
//  assign input_en_7_tieoff = input_en_7;
//  assign MAC_inst_7__input_en = input_en_7;
//  assign sum_in_7_tieoff = sum_in_7;
//  assign MAC_inst_7__sum_in = sum_in_7;
//  assign input_in_7_tieoff = input_in_7;
//  assign MAC_inst_7__input_in = input_in_7;
//  assign weight_en_7_tieoff = weight_en_7;
//  assign MAC_inst_7__weight_en = weight_en_7;
//  assign sum_out_7 = MAC_inst_7__sum_out;
//  assign input_out_7 = MAC_inst_7__input_out;
//  assign weight_out_7 = MAC_inst_7__weight_out;
//  assign MAC_inst_8__clk = clk;
//  assign MAC_inst_8__reset = reset;
//  assign weight_in_8_tieoff = weight_in_8;
//  assign MAC_inst_8__weight_in = weight_in_8;
//  assign acc_en_8_tieoff = acc_en_8;
//  assign MAC_inst_8__acc_en = acc_en_8;
//  assign input_en_8_tieoff = input_en_8;
//  assign MAC_inst_8__input_en = input_en_8;
//  assign sum_in_8_tieoff = sum_in_8;
//  assign MAC_inst_8__sum_in = sum_in_8;
//  assign input_in_8_tieoff = input_in_8;
//  assign MAC_inst_8__input_in = input_in_8;
//  assign weight_en_8_tieoff = weight_en_8;
//  assign MAC_inst_8__weight_en = weight_en_8;
//  assign sum_out_8 = MAC_inst_8__sum_out;
//  assign input_out_8 = MAC_inst_8__input_out;
//  assign weight_out_8 = MAC_inst_8__weight_out;
//  assign MAC_inst_9__clk = clk;
//  assign MAC_inst_9__reset = reset;
//  assign weight_in_9_tieoff = weight_in_9;
//  assign MAC_inst_9__weight_in = weight_in_9;
//  assign acc_en_9_tieoff = acc_en_9;
//  assign MAC_inst_9__acc_en = acc_en_9;
//  assign input_en_9_tieoff = input_en_9;
//  assign MAC_inst_9__input_en = input_en_9;
//  assign sum_in_9_tieoff = sum_in_9;
//  assign MAC_inst_9__sum_in = sum_in_9;
//  assign input_in_9_tieoff = input_in_9;
//  assign MAC_inst_9__input_in = input_in_9;
//  assign weight_en_9_tieoff = weight_en_9;
//  assign MAC_inst_9__weight_en = weight_en_9;
//  assign sum_out_9 = MAC_inst_9__sum_out;
//  assign input_out_9 = MAC_inst_9__input_out;
//  assign weight_out_9 = MAC_inst_9__weight_out;
//  assign MAC_inst_10__clk = clk;
//  assign MAC_inst_10__reset = reset;
//  assign weight_in_10_tieoff = weight_in_10;
//  assign MAC_inst_10__weight_in = weight_in_10;
//  assign acc_en_10_tieoff = acc_en_10;
//  assign MAC_inst_10__acc_en = acc_en_10;
//  assign input_en_10_tieoff = input_en_10;
//  assign MAC_inst_10__input_en = input_en_10;
//  assign sum_in_10_tieoff = sum_in_10;
//  assign MAC_inst_10__sum_in = sum_in_10;
//  assign input_in_10_tieoff = input_in_10;
//  assign MAC_inst_10__input_in = input_in_10;
//  assign weight_en_10_tieoff = weight_en_10;
//  assign MAC_inst_10__weight_en = weight_en_10;
//  assign sum_out_10 = MAC_inst_10__sum_out;
//  assign input_out_10 = MAC_inst_10__input_out;
//  assign weight_out_10 = MAC_inst_10__weight_out;
//  assign MAC_inst_11__clk = clk;
//  assign MAC_inst_11__reset = reset;
//  assign weight_in_11_tieoff = weight_in_11;
//  assign MAC_inst_11__weight_in = weight_in_11;
//  assign acc_en_11_tieoff = acc_en_11;
//  assign MAC_inst_11__acc_en = acc_en_11;
//  assign input_en_11_tieoff = input_en_11;
//  assign MAC_inst_11__input_en = input_en_11;
//  assign sum_in_11_tieoff = sum_in_11;
//  assign MAC_inst_11__sum_in = sum_in_11;
//  assign input_in_11_tieoff = input_in_11;
//  assign MAC_inst_11__input_in = input_in_11;
//  assign weight_en_11_tieoff = weight_en_11;
//  assign MAC_inst_11__weight_en = weight_en_11;
//  assign sum_out_11 = MAC_inst_11__sum_out;
//  assign input_out_11 = MAC_inst_11__input_out;
//  assign weight_out_11 = MAC_inst_11__weight_out;
//
//endmodule


// PyMTL Component MergeBusses Definition
//// Full name: MergeBusses__in_width_32__num_ins_2__out_width_64__num_outs_1__ins_per_out_0__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py
//
//module MergeBusses__208c5aeb9f5c8625
//(
//clk,
//input_0,
//input_1,
//output_0,
//reset
//);
//input  [0:0] clk ;
//input  [31:0] input_0 ;
//input  [31:0] input_1 ;
//output [63:0] output_0 ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_tieoff;
//  wire [31:0] input_0_tieoff;
//  wire [31:0] input_1_tieoff;
//  wire [0:0] reset_tieoff;
//
//  assign input_0_tieoff = input_0;
//  assign input_1_tieoff = input_1;
//  assign output_0[31:0] = input_0[31:0];
//  assign output_0[63:32] = input_1[31:0];
//  assign clk_tieoff = clk;
//  assign reset_tieoff = reset;
//
//endmodule


// PyMTL Component OutputPSInterconnect Definition
//// Full name: OutputPSInterconnect__af_width_32__mlb_width_-1__mlb_width_used_32__num_afs_2__num_mlbs_12__projection_{'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}__sim_True__input_buf_width_64__num_input_bufs_1
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py
//
//module OutputPSInterconnect__f55ce2d68c002cca
//(
//clk,
//inputs_from_mlb_0,
//inputs_from_mlb_1,
//inputs_from_mlb_10,
//inputs_from_mlb_11,
//inputs_from_mlb_2,
//inputs_from_mlb_3,
//inputs_from_mlb_4,
//inputs_from_mlb_5,
//inputs_from_mlb_6,
//inputs_from_mlb_7,
//inputs_from_mlb_8,
//inputs_from_mlb_9,
//outputs_to_afs_0,
//outputs_to_afs_1,
//outputs_to_mlb_0,
//outputs_to_mlb_1,
//outputs_to_mlb_10,
//outputs_to_mlb_11,
//outputs_to_mlb_2,
//outputs_to_mlb_3,
//outputs_to_mlb_4,
//outputs_to_mlb_5,
//outputs_to_mlb_6,
//outputs_to_mlb_7,
//outputs_to_mlb_8,
//outputs_to_mlb_9,
//ps_inputs_from_buffer_0,
//reset
//);
//input  [0:0] clk ;
//input  [31:0] inputs_from_mlb_0 ;
//input  [31:0] inputs_from_mlb_1 ;
//input  [31:0] inputs_from_mlb_10 ;
//input  [31:0] inputs_from_mlb_11 ;
//input  [31:0] inputs_from_mlb_2 ;
//input  [31:0] inputs_from_mlb_3 ;
//input  [31:0] inputs_from_mlb_4 ;
//input  [31:0] inputs_from_mlb_5 ;
//input  [31:0] inputs_from_mlb_6 ;
//input  [31:0] inputs_from_mlb_7 ;
//input  [31:0] inputs_from_mlb_8 ;
//input  [31:0] inputs_from_mlb_9 ;
//output [31:0] outputs_to_afs_0 ;
//output [31:0] outputs_to_afs_1 ;
//output [31:0] outputs_to_mlb_0 ;
//output [31:0] outputs_to_mlb_1 ;
//output [31:0] outputs_to_mlb_10 ;
//output [31:0] outputs_to_mlb_11 ;
//output [31:0] outputs_to_mlb_2 ;
//output [31:0] outputs_to_mlb_3 ;
//output [31:0] outputs_to_mlb_4 ;
//output [31:0] outputs_to_mlb_5 ;
//output [31:0] outputs_to_mlb_6 ;
//output [31:0] outputs_to_mlb_7 ;
//output [31:0] outputs_to_mlb_8 ;
//output [31:0] outputs_to_mlb_9 ;
//input  [63:0] ps_inputs_from_buffer_0 ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_tieoff;
//  wire [31:0] inputs_from_mlb_0_tieoff;
//  wire [31:0] inputs_from_mlb_10_tieoff;
//  wire [31:0] inputs_from_mlb_11_tieoff;
//  wire [31:0] inputs_from_mlb_1_tieoff;
//  wire [31:0] inputs_from_mlb_2_tieoff;
//  wire [31:0] inputs_from_mlb_3_tieoff;
//  wire [31:0] inputs_from_mlb_4_tieoff;
//  wire [31:0] inputs_from_mlb_5_tieoff;
//  wire [31:0] inputs_from_mlb_6_tieoff;
//  wire [31:0] inputs_from_mlb_7_tieoff;
//  wire [31:0] inputs_from_mlb_8_tieoff;
//  wire [31:0] inputs_from_mlb_9_tieoff;
//  wire [63:0] ps_inputs_from_buffer_0_tieoff;
//  wire [0:0] reset_tieoff;
//
//  assign ps_inputs_from_buffer_0_tieoff = ps_inputs_from_buffer_0;
//  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
//  assign outputs_to_mlb_1 = inputs_from_mlb_0;
//  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
//  assign outputs_to_mlb_2 = inputs_from_mlb_1;
//  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
//  assign outputs_to_mlb_3 = inputs_from_mlb_2;
//  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
//  assign outputs_to_mlb_4 = inputs_from_mlb_3;
//  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
//  assign outputs_to_mlb_5 = inputs_from_mlb_4;
//  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
//  assign outputs_to_mlb_0[31:0] = ps_inputs_from_buffer_0[31:0];
//  assign outputs_to_afs_0 = inputs_from_mlb_5[31:0];
//  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
//  assign outputs_to_mlb_7 = inputs_from_mlb_6;
//  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
//  assign outputs_to_mlb_8 = inputs_from_mlb_7;
//  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
//  assign outputs_to_mlb_9 = inputs_from_mlb_8;
//  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
//  assign outputs_to_mlb_10 = inputs_from_mlb_9;
//  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
//  assign outputs_to_mlb_11 = inputs_from_mlb_10;
//  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
//  assign outputs_to_mlb_6[31:0] = ps_inputs_from_buffer_0[63:32];
//  assign outputs_to_afs_1 = inputs_from_mlb_11[31:0];
//  assign clk_tieoff = clk;
//  assign reset_tieoff = reset;
//
//endmodule


// PyMTL Component WeightInterconnect Definition
//// Full name: WeightInterconnect__buffer_width_16__mlb_width_-1__mlb_width_used_8__num_buffers_1__num_mlbs_12__projection_{'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py
//
//module WeightInterconnect__3ba92bcfbbe997df
//(
//clk,
//inputs_from_buffer_0,
//inputs_from_mlb_0,
//inputs_from_mlb_1,
//inputs_from_mlb_10,
//inputs_from_mlb_11,
//inputs_from_mlb_2,
//inputs_from_mlb_3,
//inputs_from_mlb_4,
//inputs_from_mlb_5,
//inputs_from_mlb_6,
//inputs_from_mlb_7,
//inputs_from_mlb_8,
//inputs_from_mlb_9,
//outputs_to_buffer_0,
//outputs_to_mlb_0,
//outputs_to_mlb_1,
//outputs_to_mlb_10,
//outputs_to_mlb_11,
//outputs_to_mlb_2,
//outputs_to_mlb_3,
//outputs_to_mlb_4,
//outputs_to_mlb_5,
//outputs_to_mlb_6,
//outputs_to_mlb_7,
//outputs_to_mlb_8,
//outputs_to_mlb_9,
//reset
//);
//input  [0:0] clk ;
//input  [15:0] inputs_from_buffer_0 ;
//input  [7:0] inputs_from_mlb_0 ;
//input  [7:0] inputs_from_mlb_1 ;
//input  [7:0] inputs_from_mlb_10 ;
//input  [7:0] inputs_from_mlb_11 ;
//input  [7:0] inputs_from_mlb_2 ;
//input  [7:0] inputs_from_mlb_3 ;
//input  [7:0] inputs_from_mlb_4 ;
//input  [7:0] inputs_from_mlb_5 ;
//input  [7:0] inputs_from_mlb_6 ;
//input  [7:0] inputs_from_mlb_7 ;
//input  [7:0] inputs_from_mlb_8 ;
//input  [7:0] inputs_from_mlb_9 ;
//output [15:0] outputs_to_buffer_0 ;
//output [7:0] outputs_to_mlb_0 ;
//output [7:0] outputs_to_mlb_1 ;
//output [7:0] outputs_to_mlb_10 ;
//output [7:0] outputs_to_mlb_11 ;
//output [7:0] outputs_to_mlb_2 ;
//output [7:0] outputs_to_mlb_3 ;
//output [7:0] outputs_to_mlb_4 ;
//output [7:0] outputs_to_mlb_5 ;
//output [7:0] outputs_to_mlb_6 ;
//output [7:0] outputs_to_mlb_7 ;
//output [7:0] outputs_to_mlb_8 ;
//output [7:0] outputs_to_mlb_9 ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_tieoff;
//  wire [15:0] inputs_from_buffer_0_tieoff;
//  wire [7:0] inputs_from_mlb_0_tieoff;
//  wire [7:0] inputs_from_mlb_10_tieoff;
//  wire [7:0] inputs_from_mlb_11_tieoff;
//  wire [7:0] inputs_from_mlb_1_tieoff;
//  wire [7:0] inputs_from_mlb_2_tieoff;
//  wire [7:0] inputs_from_mlb_3_tieoff;
//  wire [7:0] inputs_from_mlb_4_tieoff;
//  wire [7:0] inputs_from_mlb_5_tieoff;
//  wire [7:0] inputs_from_mlb_6_tieoff;
//  wire [7:0] inputs_from_mlb_7_tieoff;
//  wire [7:0] inputs_from_mlb_8_tieoff;
//  wire [7:0] inputs_from_mlb_9_tieoff;
//  wire [0:0] reset_tieoff;
//
//  assign inputs_from_buffer_0_tieoff = inputs_from_buffer_0;
//  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
//  assign outputs_to_mlb_1 = inputs_from_mlb_0;
//  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
//  assign outputs_to_mlb_2 = inputs_from_mlb_1;
//  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
//  assign outputs_to_mlb_3 = inputs_from_mlb_2;
//  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
//  assign outputs_to_mlb_4 = inputs_from_mlb_3;
//  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
//  assign outputs_to_mlb_5 = inputs_from_mlb_4;
//  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
//  assign outputs_to_mlb_6 = inputs_from_mlb_5;
//  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
//  assign outputs_to_mlb_7 = inputs_from_mlb_6;
//  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
//  assign outputs_to_mlb_8 = inputs_from_mlb_7;
//  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
//  assign outputs_to_mlb_9 = inputs_from_mlb_8;
//  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
//  assign outputs_to_mlb_10 = inputs_from_mlb_9;
//  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
//  assign outputs_to_mlb_11 = inputs_from_mlb_10;
//  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
//  assign outputs_to_mlb_0[7:0] = inputs_from_buffer_0[7:0];
//  assign outputs_to_buffer_0[7:0] = inputs_from_mlb_11[7:0];
//  assign clk_tieoff = clk;
//  assign reset_tieoff = reset;
//
//endmodule


// PyMTL Component MLB Definition
//// Full name: MLB__proj_spec_{'name': 'test_proj', 'outer_projection': {'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}, 'inner_projection': {'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}, 'temporal_projection': {'URW': {'value': 1}, 'URN': {'value': 1}, 'UE': {'value': 1}, 'UB': {'value': 1}, 'UG': {'value': 1}}, 'activation_function': 'RELU', 'stream_info': {'W': 8, 'I': 8, 'O': 32}}__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module MLB__32297f36f6631a99
//(
//ACC_EN,
//I_EN,
//I_IN,
//I_OUT,
//O_IN,
//O_OUT,
//W_EN,
//W_IN,
//W_OUT,
//clk,
//reset
//);
//input  [0:0] ACC_EN ;
//input  [0:0] I_EN ;
//input  [7:0] I_IN ;
//output [7:0] I_OUT ;
//input  [63:0] O_IN ;
//output [63:0] O_OUT ;
//input  [0:0] W_EN ;
//input  [15:0] W_IN ;
//output [15:0] W_OUT ;
//input  [0:0] clk ;
//input  [0:0] reset ;
//
//  wire [0:0] ACC_EN_tieoff;
//  wire [0:0] I_EN_tieoff;
//  wire [7:0] I_IN_tieoff;
//  wire [63:0] O_IN_tieoff;
//  wire [0:0] W_EN_tieoff;
//  wire [15:0] W_IN_tieoff;
//  //-------------------------------------------------------------
//  // Component input_interconnect
//  //-------------------------------------------------------------
//
//  wire [0:0] input_interconnect__clk;
//  wire [7:0] input_interconnect__inputs_from_buffer_0;
//  wire [7:0] input_interconnect__inputs_from_mlb_0;
//  wire [7:0] input_interconnect__inputs_from_mlb_1;
//  wire [7:0] input_interconnect__inputs_from_mlb_10;
//  wire [7:0] input_interconnect__inputs_from_mlb_11;
//  wire [7:0] input_interconnect__inputs_from_mlb_2;
//  wire [7:0] input_interconnect__inputs_from_mlb_3;
//  wire [7:0] input_interconnect__inputs_from_mlb_4;
//  wire [7:0] input_interconnect__inputs_from_mlb_5;
//  wire [7:0] input_interconnect__inputs_from_mlb_6;
//  wire [7:0] input_interconnect__inputs_from_mlb_7;
//  wire [7:0] input_interconnect__inputs_from_mlb_8;
//  wire [7:0] input_interconnect__inputs_from_mlb_9;
//  wire [7:0] input_interconnect__outputs_to_buffer_0;
//  wire [7:0] input_interconnect__outputs_to_mlb_0;
//  wire [7:0] input_interconnect__outputs_to_mlb_1;
//  wire [7:0] input_interconnect__outputs_to_mlb_10;
//  wire [7:0] input_interconnect__outputs_to_mlb_11;
//  wire [7:0] input_interconnect__outputs_to_mlb_2;
//  wire [7:0] input_interconnect__outputs_to_mlb_3;
//  wire [7:0] input_interconnect__outputs_to_mlb_4;
//  wire [7:0] input_interconnect__outputs_to_mlb_5;
//  wire [7:0] input_interconnect__outputs_to_mlb_6;
//  wire [7:0] input_interconnect__outputs_to_mlb_7;
//  wire [7:0] input_interconnect__outputs_to_mlb_8;
//  wire [7:0] input_interconnect__outputs_to_mlb_9;
//  wire [0:0] input_interconnect__reset;
//
//  InputInterconnect__58c180ebeb1b5092 input_interconnect
//  (
//    .clk( input_interconnect__clk ),
//    .inputs_from_buffer_0( input_interconnect__inputs_from_buffer_0 ),
//    .inputs_from_mlb_0( input_interconnect__inputs_from_mlb_0 ),
//    .inputs_from_mlb_1( input_interconnect__inputs_from_mlb_1 ),
//    .inputs_from_mlb_10( input_interconnect__inputs_from_mlb_10 ),
//    .inputs_from_mlb_11( input_interconnect__inputs_from_mlb_11 ),
//    .inputs_from_mlb_2( input_interconnect__inputs_from_mlb_2 ),
//    .inputs_from_mlb_3( input_interconnect__inputs_from_mlb_3 ),
//    .inputs_from_mlb_4( input_interconnect__inputs_from_mlb_4 ),
//    .inputs_from_mlb_5( input_interconnect__inputs_from_mlb_5 ),
//    .inputs_from_mlb_6( input_interconnect__inputs_from_mlb_6 ),
//    .inputs_from_mlb_7( input_interconnect__inputs_from_mlb_7 ),
//    .inputs_from_mlb_8( input_interconnect__inputs_from_mlb_8 ),
//    .inputs_from_mlb_9( input_interconnect__inputs_from_mlb_9 ),
//    .outputs_to_buffer_0( input_interconnect__outputs_to_buffer_0 ),
//    .outputs_to_mlb_0( input_interconnect__outputs_to_mlb_0 ),
//    .outputs_to_mlb_1( input_interconnect__outputs_to_mlb_1 ),
//    .outputs_to_mlb_10( input_interconnect__outputs_to_mlb_10 ),
//    .outputs_to_mlb_11( input_interconnect__outputs_to_mlb_11 ),
//    .outputs_to_mlb_2( input_interconnect__outputs_to_mlb_2 ),
//    .outputs_to_mlb_3( input_interconnect__outputs_to_mlb_3 ),
//    .outputs_to_mlb_4( input_interconnect__outputs_to_mlb_4 ),
//    .outputs_to_mlb_5( input_interconnect__outputs_to_mlb_5 ),
//    .outputs_to_mlb_6( input_interconnect__outputs_to_mlb_6 ),
//    .outputs_to_mlb_7( input_interconnect__outputs_to_mlb_7 ),
//    .outputs_to_mlb_8( input_interconnect__outputs_to_mlb_8 ),
//    .outputs_to_mlb_9( input_interconnect__outputs_to_mlb_9 ),
//    .reset( input_interconnect__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component input_interconnect
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component mac_modules
//  //-------------------------------------------------------------
//
//  wire [0:0] mac_modules__acc_en_0;
//  wire [0:0] mac_modules__acc_en_1;
//  wire [0:0] mac_modules__acc_en_10;
//  wire [0:0] mac_modules__acc_en_11;
//  wire [0:0] mac_modules__acc_en_2;
//  wire [0:0] mac_modules__acc_en_3;
//  wire [0:0] mac_modules__acc_en_4;
//  wire [0:0] mac_modules__acc_en_5;
//  wire [0:0] mac_modules__acc_en_6;
//  wire [0:0] mac_modules__acc_en_7;
//  wire [0:0] mac_modules__acc_en_8;
//  wire [0:0] mac_modules__acc_en_9;
//  wire [0:0] mac_modules__clk;
//  wire [0:0] mac_modules__input_en_0;
//  wire [0:0] mac_modules__input_en_1;
//  wire [0:0] mac_modules__input_en_10;
//  wire [0:0] mac_modules__input_en_11;
//  wire [0:0] mac_modules__input_en_2;
//  wire [0:0] mac_modules__input_en_3;
//  wire [0:0] mac_modules__input_en_4;
//  wire [0:0] mac_modules__input_en_5;
//  wire [0:0] mac_modules__input_en_6;
//  wire [0:0] mac_modules__input_en_7;
//  wire [0:0] mac_modules__input_en_8;
//  wire [0:0] mac_modules__input_en_9;
//  wire [7:0] mac_modules__input_in_0;
//  wire [7:0] mac_modules__input_in_1;
//  wire [7:0] mac_modules__input_in_10;
//  wire [7:0] mac_modules__input_in_11;
//  wire [7:0] mac_modules__input_in_2;
//  wire [7:0] mac_modules__input_in_3;
//  wire [7:0] mac_modules__input_in_4;
//  wire [7:0] mac_modules__input_in_5;
//  wire [7:0] mac_modules__input_in_6;
//  wire [7:0] mac_modules__input_in_7;
//  wire [7:0] mac_modules__input_in_8;
//  wire [7:0] mac_modules__input_in_9;
//  wire [7:0] mac_modules__input_out_0;
//  wire [7:0] mac_modules__input_out_1;
//  wire [7:0] mac_modules__input_out_10;
//  wire [7:0] mac_modules__input_out_11;
//  wire [7:0] mac_modules__input_out_2;
//  wire [7:0] mac_modules__input_out_3;
//  wire [7:0] mac_modules__input_out_4;
//  wire [7:0] mac_modules__input_out_5;
//  wire [7:0] mac_modules__input_out_6;
//  wire [7:0] mac_modules__input_out_7;
//  wire [7:0] mac_modules__input_out_8;
//  wire [7:0] mac_modules__input_out_9;
//  wire [0:0] mac_modules__reset;
//  wire [31:0] mac_modules__sum_in_0;
//  wire [31:0] mac_modules__sum_in_1;
//  wire [31:0] mac_modules__sum_in_10;
//  wire [31:0] mac_modules__sum_in_11;
//  wire [31:0] mac_modules__sum_in_2;
//  wire [31:0] mac_modules__sum_in_3;
//  wire [31:0] mac_modules__sum_in_4;
//  wire [31:0] mac_modules__sum_in_5;
//  wire [31:0] mac_modules__sum_in_6;
//  wire [31:0] mac_modules__sum_in_7;
//  wire [31:0] mac_modules__sum_in_8;
//  wire [31:0] mac_modules__sum_in_9;
//  wire [31:0] mac_modules__sum_out_0;
//  wire [31:0] mac_modules__sum_out_1;
//  wire [31:0] mac_modules__sum_out_10;
//  wire [31:0] mac_modules__sum_out_11;
//  wire [31:0] mac_modules__sum_out_2;
//  wire [31:0] mac_modules__sum_out_3;
//  wire [31:0] mac_modules__sum_out_4;
//  wire [31:0] mac_modules__sum_out_5;
//  wire [31:0] mac_modules__sum_out_6;
//  wire [31:0] mac_modules__sum_out_7;
//  wire [31:0] mac_modules__sum_out_8;
//  wire [31:0] mac_modules__sum_out_9;
//  wire [0:0] mac_modules__weight_en_0;
//  wire [0:0] mac_modules__weight_en_1;
//  wire [0:0] mac_modules__weight_en_10;
//  wire [0:0] mac_modules__weight_en_11;
//  wire [0:0] mac_modules__weight_en_2;
//  wire [0:0] mac_modules__weight_en_3;
//  wire [0:0] mac_modules__weight_en_4;
//  wire [0:0] mac_modules__weight_en_5;
//  wire [0:0] mac_modules__weight_en_6;
//  wire [0:0] mac_modules__weight_en_7;
//  wire [0:0] mac_modules__weight_en_8;
//  wire [0:0] mac_modules__weight_en_9;
//  wire [7:0] mac_modules__weight_in_0;
//  wire [7:0] mac_modules__weight_in_1;
//  wire [7:0] mac_modules__weight_in_10;
//  wire [7:0] mac_modules__weight_in_11;
//  wire [7:0] mac_modules__weight_in_2;
//  wire [7:0] mac_modules__weight_in_3;
//  wire [7:0] mac_modules__weight_in_4;
//  wire [7:0] mac_modules__weight_in_5;
//  wire [7:0] mac_modules__weight_in_6;
//  wire [7:0] mac_modules__weight_in_7;
//  wire [7:0] mac_modules__weight_in_8;
//  wire [7:0] mac_modules__weight_in_9;
//  wire [7:0] mac_modules__weight_out_0;
//  wire [7:0] mac_modules__weight_out_1;
//  wire [7:0] mac_modules__weight_out_10;
//  wire [7:0] mac_modules__weight_out_11;
//  wire [7:0] mac_modules__weight_out_2;
//  wire [7:0] mac_modules__weight_out_3;
//  wire [7:0] mac_modules__weight_out_4;
//  wire [7:0] mac_modules__weight_out_5;
//  wire [7:0] mac_modules__weight_out_6;
//  wire [7:0] mac_modules__weight_out_7;
//  wire [7:0] mac_modules__weight_out_8;
//  wire [7:0] mac_modules__weight_out_9;
//
//  MACWrapper__99bc39287f4a9fb4 mac_modules
//  (
//    .acc_en_0( mac_modules__acc_en_0 ),
//    .acc_en_1( mac_modules__acc_en_1 ),
//    .acc_en_10( mac_modules__acc_en_10 ),
//    .acc_en_11( mac_modules__acc_en_11 ),
//    .acc_en_2( mac_modules__acc_en_2 ),
//    .acc_en_3( mac_modules__acc_en_3 ),
//    .acc_en_4( mac_modules__acc_en_4 ),
//    .acc_en_5( mac_modules__acc_en_5 ),
//    .acc_en_6( mac_modules__acc_en_6 ),
//    .acc_en_7( mac_modules__acc_en_7 ),
//    .acc_en_8( mac_modules__acc_en_8 ),
//    .acc_en_9( mac_modules__acc_en_9 ),
//    .clk( mac_modules__clk ),
//    .input_en_0( mac_modules__input_en_0 ),
//    .input_en_1( mac_modules__input_en_1 ),
//    .input_en_10( mac_modules__input_en_10 ),
//    .input_en_11( mac_modules__input_en_11 ),
//    .input_en_2( mac_modules__input_en_2 ),
//    .input_en_3( mac_modules__input_en_3 ),
//    .input_en_4( mac_modules__input_en_4 ),
//    .input_en_5( mac_modules__input_en_5 ),
//    .input_en_6( mac_modules__input_en_6 ),
//    .input_en_7( mac_modules__input_en_7 ),
//    .input_en_8( mac_modules__input_en_8 ),
//    .input_en_9( mac_modules__input_en_9 ),
//    .input_in_0( mac_modules__input_in_0 ),
//    .input_in_1( mac_modules__input_in_1 ),
//    .input_in_10( mac_modules__input_in_10 ),
//    .input_in_11( mac_modules__input_in_11 ),
//    .input_in_2( mac_modules__input_in_2 ),
//    .input_in_3( mac_modules__input_in_3 ),
//    .input_in_4( mac_modules__input_in_4 ),
//    .input_in_5( mac_modules__input_in_5 ),
//    .input_in_6( mac_modules__input_in_6 ),
//    .input_in_7( mac_modules__input_in_7 ),
//    .input_in_8( mac_modules__input_in_8 ),
//    .input_in_9( mac_modules__input_in_9 ),
//    .input_out_0( mac_modules__input_out_0 ),
//    .input_out_1( mac_modules__input_out_1 ),
//    .input_out_10( mac_modules__input_out_10 ),
//    .input_out_11( mac_modules__input_out_11 ),
//    .input_out_2( mac_modules__input_out_2 ),
//    .input_out_3( mac_modules__input_out_3 ),
//    .input_out_4( mac_modules__input_out_4 ),
//    .input_out_5( mac_modules__input_out_5 ),
//    .input_out_6( mac_modules__input_out_6 ),
//    .input_out_7( mac_modules__input_out_7 ),
//    .input_out_8( mac_modules__input_out_8 ),
//    .input_out_9( mac_modules__input_out_9 ),
//    .reset( mac_modules__reset ),
//    .sum_in_0( mac_modules__sum_in_0 ),
//    .sum_in_1( mac_modules__sum_in_1 ),
//    .sum_in_10( mac_modules__sum_in_10 ),
//    .sum_in_11( mac_modules__sum_in_11 ),
//    .sum_in_2( mac_modules__sum_in_2 ),
//    .sum_in_3( mac_modules__sum_in_3 ),
//    .sum_in_4( mac_modules__sum_in_4 ),
//    .sum_in_5( mac_modules__sum_in_5 ),
//    .sum_in_6( mac_modules__sum_in_6 ),
//    .sum_in_7( mac_modules__sum_in_7 ),
//    .sum_in_8( mac_modules__sum_in_8 ),
//    .sum_in_9( mac_modules__sum_in_9 ),
//    .sum_out_0( mac_modules__sum_out_0 ),
//    .sum_out_1( mac_modules__sum_out_1 ),
//    .sum_out_10( mac_modules__sum_out_10 ),
//    .sum_out_11( mac_modules__sum_out_11 ),
//    .sum_out_2( mac_modules__sum_out_2 ),
//    .sum_out_3( mac_modules__sum_out_3 ),
//    .sum_out_4( mac_modules__sum_out_4 ),
//    .sum_out_5( mac_modules__sum_out_5 ),
//    .sum_out_6( mac_modules__sum_out_6 ),
//    .sum_out_7( mac_modules__sum_out_7 ),
//    .sum_out_8( mac_modules__sum_out_8 ),
//    .sum_out_9( mac_modules__sum_out_9 ),
//    .weight_en_0( mac_modules__weight_en_0 ),
//    .weight_en_1( mac_modules__weight_en_1 ),
//    .weight_en_10( mac_modules__weight_en_10 ),
//    .weight_en_11( mac_modules__weight_en_11 ),
//    .weight_en_2( mac_modules__weight_en_2 ),
//    .weight_en_3( mac_modules__weight_en_3 ),
//    .weight_en_4( mac_modules__weight_en_4 ),
//    .weight_en_5( mac_modules__weight_en_5 ),
//    .weight_en_6( mac_modules__weight_en_6 ),
//    .weight_en_7( mac_modules__weight_en_7 ),
//    .weight_en_8( mac_modules__weight_en_8 ),
//    .weight_en_9( mac_modules__weight_en_9 ),
//    .weight_in_0( mac_modules__weight_in_0 ),
//    .weight_in_1( mac_modules__weight_in_1 ),
//    .weight_in_10( mac_modules__weight_in_10 ),
//    .weight_in_11( mac_modules__weight_in_11 ),
//    .weight_in_2( mac_modules__weight_in_2 ),
//    .weight_in_3( mac_modules__weight_in_3 ),
//    .weight_in_4( mac_modules__weight_in_4 ),
//    .weight_in_5( mac_modules__weight_in_5 ),
//    .weight_in_6( mac_modules__weight_in_6 ),
//    .weight_in_7( mac_modules__weight_in_7 ),
//    .weight_in_8( mac_modules__weight_in_8 ),
//    .weight_in_9( mac_modules__weight_in_9 ),
//    .weight_out_0( mac_modules__weight_out_0 ),
//    .weight_out_1( mac_modules__weight_out_1 ),
//    .weight_out_10( mac_modules__weight_out_10 ),
//    .weight_out_11( mac_modules__weight_out_11 ),
//    .weight_out_2( mac_modules__weight_out_2 ),
//    .weight_out_3( mac_modules__weight_out_3 ),
//    .weight_out_4( mac_modules__weight_out_4 ),
//    .weight_out_5( mac_modules__weight_out_5 ),
//    .weight_out_6( mac_modules__weight_out_6 ),
//    .weight_out_7( mac_modules__weight_out_7 ),
//    .weight_out_8( mac_modules__weight_out_8 ),
//    .weight_out_9( mac_modules__weight_out_9 )
//  );
//
//  //-------------------------------------------------------------
//  // End of component mac_modules
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component output_interconnect
//  //-------------------------------------------------------------
//
//  wire [0:0] output_interconnect__clk;
//  wire [31:0] output_interconnect__input_0;
//  wire [31:0] output_interconnect__input_1;
//  wire [63:0] output_interconnect__output_0;
//  wire [0:0] output_interconnect__reset;
//
//  MergeBusses__208c5aeb9f5c8625 output_interconnect
//  (
//    .clk( output_interconnect__clk ),
//    .input_0( output_interconnect__input_0 ),
//    .input_1( output_interconnect__input_1 ),
//    .output_0( output_interconnect__output_0 ),
//    .reset( output_interconnect__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component output_interconnect
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component output_ps_interconnect
//  //-------------------------------------------------------------
//
//  wire [0:0] output_ps_interconnect__clk;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_0;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_1;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_10;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_11;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_2;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_3;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_4;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_5;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_6;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_7;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_8;
//  wire [31:0] output_ps_interconnect__inputs_from_mlb_9;
//  wire [31:0] output_ps_interconnect__outputs_to_afs_0;
//  wire [31:0] output_ps_interconnect__outputs_to_afs_1;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_0;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_1;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_10;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_11;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_2;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_3;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_4;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_5;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_6;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_7;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_8;
//  wire [31:0] output_ps_interconnect__outputs_to_mlb_9;
//  wire [63:0] output_ps_interconnect__ps_inputs_from_buffer_0;
//  wire [0:0] output_ps_interconnect__reset;
//
//  OutputPSInterconnect__f55ce2d68c002cca output_ps_interconnect
//  (
//    .clk( output_ps_interconnect__clk ),
//    .inputs_from_mlb_0( output_ps_interconnect__inputs_from_mlb_0 ),
//    .inputs_from_mlb_1( output_ps_interconnect__inputs_from_mlb_1 ),
//    .inputs_from_mlb_10( output_ps_interconnect__inputs_from_mlb_10 ),
//    .inputs_from_mlb_11( output_ps_interconnect__inputs_from_mlb_11 ),
//    .inputs_from_mlb_2( output_ps_interconnect__inputs_from_mlb_2 ),
//    .inputs_from_mlb_3( output_ps_interconnect__inputs_from_mlb_3 ),
//    .inputs_from_mlb_4( output_ps_interconnect__inputs_from_mlb_4 ),
//    .inputs_from_mlb_5( output_ps_interconnect__inputs_from_mlb_5 ),
//    .inputs_from_mlb_6( output_ps_interconnect__inputs_from_mlb_6 ),
//    .inputs_from_mlb_7( output_ps_interconnect__inputs_from_mlb_7 ),
//    .inputs_from_mlb_8( output_ps_interconnect__inputs_from_mlb_8 ),
//    .inputs_from_mlb_9( output_ps_interconnect__inputs_from_mlb_9 ),
//    .outputs_to_afs_0( output_ps_interconnect__outputs_to_afs_0 ),
//    .outputs_to_afs_1( output_ps_interconnect__outputs_to_afs_1 ),
//    .outputs_to_mlb_0( output_ps_interconnect__outputs_to_mlb_0 ),
//    .outputs_to_mlb_1( output_ps_interconnect__outputs_to_mlb_1 ),
//    .outputs_to_mlb_10( output_ps_interconnect__outputs_to_mlb_10 ),
//    .outputs_to_mlb_11( output_ps_interconnect__outputs_to_mlb_11 ),
//    .outputs_to_mlb_2( output_ps_interconnect__outputs_to_mlb_2 ),
//    .outputs_to_mlb_3( output_ps_interconnect__outputs_to_mlb_3 ),
//    .outputs_to_mlb_4( output_ps_interconnect__outputs_to_mlb_4 ),
//    .outputs_to_mlb_5( output_ps_interconnect__outputs_to_mlb_5 ),
//    .outputs_to_mlb_6( output_ps_interconnect__outputs_to_mlb_6 ),
//    .outputs_to_mlb_7( output_ps_interconnect__outputs_to_mlb_7 ),
//    .outputs_to_mlb_8( output_ps_interconnect__outputs_to_mlb_8 ),
//    .outputs_to_mlb_9( output_ps_interconnect__outputs_to_mlb_9 ),
//    .ps_inputs_from_buffer_0( output_ps_interconnect__ps_inputs_from_buffer_0 ),
//    .reset( output_ps_interconnect__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component output_ps_interconnect
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component weight_interconnect
//  //-------------------------------------------------------------
//
//  wire [0:0] weight_interconnect__clk;
//  wire [15:0] weight_interconnect__inputs_from_buffer_0;
//  wire [7:0] weight_interconnect__inputs_from_mlb_0;
//  wire [7:0] weight_interconnect__inputs_from_mlb_1;
//  wire [7:0] weight_interconnect__inputs_from_mlb_10;
//  wire [7:0] weight_interconnect__inputs_from_mlb_11;
//  wire [7:0] weight_interconnect__inputs_from_mlb_2;
//  wire [7:0] weight_interconnect__inputs_from_mlb_3;
//  wire [7:0] weight_interconnect__inputs_from_mlb_4;
//  wire [7:0] weight_interconnect__inputs_from_mlb_5;
//  wire [7:0] weight_interconnect__inputs_from_mlb_6;
//  wire [7:0] weight_interconnect__inputs_from_mlb_7;
//  wire [7:0] weight_interconnect__inputs_from_mlb_8;
//  wire [7:0] weight_interconnect__inputs_from_mlb_9;
//  wire [15:0] weight_interconnect__outputs_to_buffer_0;
//  wire [7:0] weight_interconnect__outputs_to_mlb_0;
//  wire [7:0] weight_interconnect__outputs_to_mlb_1;
//  wire [7:0] weight_interconnect__outputs_to_mlb_10;
//  wire [7:0] weight_interconnect__outputs_to_mlb_11;
//  wire [7:0] weight_interconnect__outputs_to_mlb_2;
//  wire [7:0] weight_interconnect__outputs_to_mlb_3;
//  wire [7:0] weight_interconnect__outputs_to_mlb_4;
//  wire [7:0] weight_interconnect__outputs_to_mlb_5;
//  wire [7:0] weight_interconnect__outputs_to_mlb_6;
//  wire [7:0] weight_interconnect__outputs_to_mlb_7;
//  wire [7:0] weight_interconnect__outputs_to_mlb_8;
//  wire [7:0] weight_interconnect__outputs_to_mlb_9;
//  wire [0:0] weight_interconnect__reset;
//
//  WeightInterconnect__3ba92bcfbbe997df weight_interconnect
//  (
//    .clk( weight_interconnect__clk ),
//    .inputs_from_buffer_0( weight_interconnect__inputs_from_buffer_0 ),
//    .inputs_from_mlb_0( weight_interconnect__inputs_from_mlb_0 ),
//    .inputs_from_mlb_1( weight_interconnect__inputs_from_mlb_1 ),
//    .inputs_from_mlb_10( weight_interconnect__inputs_from_mlb_10 ),
//    .inputs_from_mlb_11( weight_interconnect__inputs_from_mlb_11 ),
//    .inputs_from_mlb_2( weight_interconnect__inputs_from_mlb_2 ),
//    .inputs_from_mlb_3( weight_interconnect__inputs_from_mlb_3 ),
//    .inputs_from_mlb_4( weight_interconnect__inputs_from_mlb_4 ),
//    .inputs_from_mlb_5( weight_interconnect__inputs_from_mlb_5 ),
//    .inputs_from_mlb_6( weight_interconnect__inputs_from_mlb_6 ),
//    .inputs_from_mlb_7( weight_interconnect__inputs_from_mlb_7 ),
//    .inputs_from_mlb_8( weight_interconnect__inputs_from_mlb_8 ),
//    .inputs_from_mlb_9( weight_interconnect__inputs_from_mlb_9 ),
//    .outputs_to_buffer_0( weight_interconnect__outputs_to_buffer_0 ),
//    .outputs_to_mlb_0( weight_interconnect__outputs_to_mlb_0 ),
//    .outputs_to_mlb_1( weight_interconnect__outputs_to_mlb_1 ),
//    .outputs_to_mlb_10( weight_interconnect__outputs_to_mlb_10 ),
//    .outputs_to_mlb_11( weight_interconnect__outputs_to_mlb_11 ),
//    .outputs_to_mlb_2( weight_interconnect__outputs_to_mlb_2 ),
//    .outputs_to_mlb_3( weight_interconnect__outputs_to_mlb_3 ),
//    .outputs_to_mlb_4( weight_interconnect__outputs_to_mlb_4 ),
//    .outputs_to_mlb_5( weight_interconnect__outputs_to_mlb_5 ),
//    .outputs_to_mlb_6( weight_interconnect__outputs_to_mlb_6 ),
//    .outputs_to_mlb_7( weight_interconnect__outputs_to_mlb_7 ),
//    .outputs_to_mlb_8( weight_interconnect__outputs_to_mlb_8 ),
//    .outputs_to_mlb_9( weight_interconnect__outputs_to_mlb_9 ),
//    .reset( weight_interconnect__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component weight_interconnect
//  //-------------------------------------------------------------
//
//  assign mac_modules__clk = clk;
//  assign mac_modules__reset = reset;
//  assign W_IN_tieoff = W_IN;
//  assign W_EN_tieoff = W_EN;
//  assign I_IN_tieoff = I_IN;
//  assign I_EN_tieoff = I_EN;
//  assign ACC_EN_tieoff = ACC_EN;
//  assign O_IN_tieoff = O_IN;
//  assign weight_interconnect__clk = clk;
//  assign weight_interconnect__reset = reset;
//  assign input_interconnect__clk = clk;
//  assign input_interconnect__reset = reset;
//  assign output_ps_interconnect__clk = clk;
//  assign output_ps_interconnect__reset = reset;
//  assign output_interconnect__clk = clk;
//  assign output_interconnect__reset = reset;
//  assign weight_interconnect__inputs_from_mlb_7 = mac_modules__weight_out_7;
//  assign weight_interconnect__inputs_from_mlb_6 = mac_modules__weight_out_6;
//  assign weight_interconnect__inputs_from_mlb_10 = mac_modules__weight_out_10;
//  assign weight_interconnect__inputs_from_mlb_8 = mac_modules__weight_out_8;
//  assign weight_interconnect__inputs_from_mlb_9 = mac_modules__weight_out_9;
//  assign weight_interconnect__inputs_from_mlb_5 = mac_modules__weight_out_5;
//  assign weight_interconnect__inputs_from_mlb_4 = mac_modules__weight_out_4;
//  assign weight_interconnect__inputs_from_mlb_3 = mac_modules__weight_out_3;
//  assign weight_interconnect__inputs_from_mlb_2 = mac_modules__weight_out_2;
//  assign weight_interconnect__inputs_from_mlb_1 = mac_modules__weight_out_1;
//  assign weight_interconnect__inputs_from_mlb_0 = mac_modules__weight_out_0;
//  assign weight_interconnect__inputs_from_mlb_11 = mac_modules__weight_out_11;
//  assign mac_modules__weight_in_11 = weight_interconnect__outputs_to_mlb_11;
//  assign mac_modules__weight_in_10 = weight_interconnect__outputs_to_mlb_10;
//  assign mac_modules__weight_in_9 = weight_interconnect__outputs_to_mlb_9;
//  assign mac_modules__weight_in_8 = weight_interconnect__outputs_to_mlb_8;
//  assign mac_modules__weight_in_7 = weight_interconnect__outputs_to_mlb_7;
//  assign mac_modules__weight_in_6 = weight_interconnect__outputs_to_mlb_6;
//  assign mac_modules__weight_in_5 = weight_interconnect__outputs_to_mlb_5;
//  assign mac_modules__weight_in_4 = weight_interconnect__outputs_to_mlb_4;
//  assign mac_modules__weight_in_3 = weight_interconnect__outputs_to_mlb_3;
//  assign mac_modules__weight_in_2 = weight_interconnect__outputs_to_mlb_2;
//  assign mac_modules__weight_in_1 = weight_interconnect__outputs_to_mlb_1;
//  assign mac_modules__weight_in_0 = weight_interconnect__outputs_to_mlb_0;
//  assign weight_interconnect__inputs_from_buffer_0 = W_IN;
//  assign W_OUT = weight_interconnect__outputs_to_buffer_0;
//  assign input_interconnect__inputs_from_mlb_11 = mac_modules__input_out_11;
//  assign input_interconnect__inputs_from_mlb_4 = mac_modules__input_out_4;
//  assign input_interconnect__inputs_from_mlb_3 = mac_modules__input_out_3;
//  assign input_interconnect__inputs_from_mlb_2 = mac_modules__input_out_2;
//  assign input_interconnect__inputs_from_mlb_1 = mac_modules__input_out_1;
//  assign input_interconnect__inputs_from_mlb_0 = mac_modules__input_out_0;
//  assign input_interconnect__inputs_from_mlb_5 = mac_modules__input_out_5;
//  assign input_interconnect__inputs_from_mlb_8 = mac_modules__input_out_8;
//  assign input_interconnect__inputs_from_mlb_6 = mac_modules__input_out_6;
//  assign input_interconnect__inputs_from_mlb_10 = mac_modules__input_out_10;
//  assign input_interconnect__inputs_from_mlb_9 = mac_modules__input_out_9;
//  assign input_interconnect__inputs_from_mlb_7 = mac_modules__input_out_7;
//  assign mac_modules__input_in_5 = input_interconnect__outputs_to_mlb_5;
//  assign mac_modules__input_in_1 = input_interconnect__outputs_to_mlb_1;
//  assign mac_modules__input_in_4 = input_interconnect__outputs_to_mlb_4;
//  assign mac_modules__input_in_11 = input_interconnect__outputs_to_mlb_11;
//  assign mac_modules__input_in_3 = input_interconnect__outputs_to_mlb_3;
//  assign mac_modules__input_in_0 = input_interconnect__outputs_to_mlb_0;
//  assign mac_modules__input_in_8 = input_interconnect__outputs_to_mlb_8;
//  assign mac_modules__input_in_9 = input_interconnect__outputs_to_mlb_9;
//  assign mac_modules__input_in_2 = input_interconnect__outputs_to_mlb_2;
//  assign mac_modules__input_in_7 = input_interconnect__outputs_to_mlb_7;
//  assign mac_modules__input_in_6 = input_interconnect__outputs_to_mlb_6;
//  assign mac_modules__input_in_10 = input_interconnect__outputs_to_mlb_10;
//  assign input_interconnect__inputs_from_buffer_0 = I_IN;
//  assign I_OUT = input_interconnect__outputs_to_buffer_0;
//  assign output_ps_interconnect__inputs_from_mlb_11 = mac_modules__sum_out_11;
//  assign output_ps_interconnect__inputs_from_mlb_5 = mac_modules__sum_out_5;
//  assign output_ps_interconnect__inputs_from_mlb_8 = mac_modules__sum_out_8;
//  assign output_ps_interconnect__inputs_from_mlb_3 = mac_modules__sum_out_3;
//  assign output_ps_interconnect__inputs_from_mlb_4 = mac_modules__sum_out_4;
//  assign output_ps_interconnect__inputs_from_mlb_1 = mac_modules__sum_out_1;
//  assign output_ps_interconnect__inputs_from_mlb_2 = mac_modules__sum_out_2;
//  assign output_ps_interconnect__inputs_from_mlb_6 = mac_modules__sum_out_6;
//  assign output_ps_interconnect__inputs_from_mlb_0 = mac_modules__sum_out_0;
//  assign output_ps_interconnect__inputs_from_mlb_10 = mac_modules__sum_out_10;
//  assign output_ps_interconnect__inputs_from_mlb_9 = mac_modules__sum_out_9;
//  assign output_ps_interconnect__inputs_from_mlb_7 = mac_modules__sum_out_7;
//  assign mac_modules__sum_in_1 = output_ps_interconnect__outputs_to_mlb_1;
//  assign mac_modules__sum_in_0 = output_ps_interconnect__outputs_to_mlb_0;
//  assign mac_modules__sum_in_9 = output_ps_interconnect__outputs_to_mlb_9;
//  assign mac_modules__sum_in_8 = output_ps_interconnect__outputs_to_mlb_8;
//  assign mac_modules__sum_in_7 = output_ps_interconnect__outputs_to_mlb_7;
//  assign mac_modules__sum_in_6 = output_ps_interconnect__outputs_to_mlb_6;
//  assign mac_modules__sum_in_11 = output_ps_interconnect__outputs_to_mlb_11;
//  assign mac_modules__sum_in_10 = output_ps_interconnect__outputs_to_mlb_10;
//  assign mac_modules__sum_in_5 = output_ps_interconnect__outputs_to_mlb_5;
//  assign mac_modules__sum_in_4 = output_ps_interconnect__outputs_to_mlb_4;
//  assign mac_modules__sum_in_3 = output_ps_interconnect__outputs_to_mlb_3;
//  assign mac_modules__sum_in_2 = output_ps_interconnect__outputs_to_mlb_2;
//  assign output_interconnect__input_0 = output_ps_interconnect__outputs_to_afs_0;
//  assign output_interconnect__input_1 = output_ps_interconnect__outputs_to_afs_1;
//  assign output_ps_interconnect__ps_inputs_from_buffer_0 = O_IN;
//  assign O_OUT = output_interconnect__output_0;
//  assign mac_modules__weight_en_11 = W_EN;
//  assign mac_modules__weight_en_10 = W_EN;
//  assign mac_modules__weight_en_9 = W_EN;
//  assign mac_modules__weight_en_8 = W_EN;
//  assign mac_modules__weight_en_7 = W_EN;
//  assign mac_modules__weight_en_6 = W_EN;
//  assign mac_modules__weight_en_5 = W_EN;
//  assign mac_modules__weight_en_4 = W_EN;
//  assign mac_modules__weight_en_3 = W_EN;
//  assign mac_modules__weight_en_2 = W_EN;
//  assign mac_modules__weight_en_0 = W_EN;
//  assign mac_modules__weight_en_1 = W_EN;
//  assign mac_modules__input_en_11 = I_EN;
//  assign mac_modules__input_en_10 = I_EN;
//  assign mac_modules__input_en_9 = I_EN;
//  assign mac_modules__input_en_8 = I_EN;
//  assign mac_modules__input_en_7 = I_EN;
//  assign mac_modules__input_en_6 = I_EN;
//  assign mac_modules__input_en_5 = I_EN;
//  assign mac_modules__input_en_4 = I_EN;
//  assign mac_modules__input_en_3 = I_EN;
//  assign mac_modules__input_en_2 = I_EN;
//  assign mac_modules__input_en_1 = I_EN;
//  assign mac_modules__input_en_0 = I_EN;
//  assign mac_modules__acc_en_1 = ACC_EN;
//  assign mac_modules__acc_en_9 = ACC_EN;
//  assign mac_modules__acc_en_10 = ACC_EN;
//  assign mac_modules__acc_en_11 = ACC_EN;
//  assign mac_modules__acc_en_8 = ACC_EN;
//  assign mac_modules__acc_en_7 = ACC_EN;
//  assign mac_modules__acc_en_6 = ACC_EN;
//  assign mac_modules__acc_en_5 = ACC_EN;
//  assign mac_modules__acc_en_4 = ACC_EN;
//  assign mac_modules__acc_en_3 = ACC_EN;
//  assign mac_modules__acc_en_2 = ACC_EN;
//  assign mac_modules__acc_en_0 = ACC_EN;
//
//endmodule


// PyMTL Component HWB_Sim Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

//module ml_block
//(
//a,
//a_en,
//a_out,
//acc_en,
//b_cas_in,
//b_cas_out,
//b_en,
//clk,
//config_en,
//config_in,
//hp_en,
//res_cas_in,
//res_cas_out,
//reset
//);
//input  [31:0] a ;
//input  [0:0] a_en ;
//output [31:0] a_out ;
//input  [0:0] acc_en ;
//input  [23:0] b_cas_in ;
//output [23:0] b_cas_out ;
//input  [0:0] b_en ;
//input  [0:0] clk ;
//input  [0:0] config_en ;
//input  [0:0] config_in ;
//input  [0:0] hp_en ;
//input  [127:0] res_cas_in ;
//output [127:0] res_cas_out ;
//input  [0:0] reset ;
//
//  wire [0:0] a_en_tieoff;
//  wire [31:0] a_tieoff;
//  wire [0:0] acc_en_tieoff;
//  wire [23:0] b_cas_in_tieoff;
//  wire [0:0] b_en_tieoff;
//  wire [0:0] config_en_tieoff;
//  wire [0:0] config_in_tieoff;
//  wire [0:0] hp_en_tieoff;
//  wire [127:0] res_cas_in_tieoff;
//  //-------------------------------------------------------------
//  // Component sim_model
//  //-------------------------------------------------------------
//
//  wire [0:0] sim_model__ACC_EN;
//  wire [0:0] sim_model__I_EN;
//  wire [7:0] sim_model__I_IN;
//  wire [7:0] sim_model__I_OUT;
//  wire [63:0] sim_model__O_IN;
//  wire [63:0] sim_model__O_OUT;
//  wire [0:0] sim_model__W_EN;
//  wire [15:0] sim_model__W_IN;
//  wire [15:0] sim_model__W_OUT;
//  wire [0:0] sim_model__clk;
//  wire [0:0] sim_model__reset;
//
//  MLB__32297f36f6631a99 sim_model
//  (
//    .ACC_EN( sim_model__ACC_EN ),
//    .I_EN( sim_model__I_EN ),
//    .I_IN( sim_model__I_IN ),
//    .I_OUT( sim_model__I_OUT ),
//    .O_IN( sim_model__O_IN ),
//    .O_OUT( sim_model__O_OUT ),
//    .W_EN( sim_model__W_EN ),
//    .W_IN( sim_model__W_IN ),
//    .W_OUT( sim_model__W_OUT ),
//    .clk( sim_model__clk ),
//    .reset( sim_model__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component sim_model
//  //-------------------------------------------------------------
//
//  assign a_en_tieoff = a_en;
//  assign b_en_tieoff = b_en;
//  assign hp_en_tieoff = hp_en;
//  assign acc_en_tieoff = acc_en;
//  assign config_en_tieoff = config_en;
//  assign config_in_tieoff = config_in;
//  assign a_tieoff = a;
//  assign b_cas_in_tieoff = b_cas_in;
//  assign res_cas_in_tieoff = res_cas_in;
//  assign sim_model__clk = clk;
//  assign sim_model__reset = reset;
//  assign sim_model__W_IN = a[15:0];
//  assign sim_model__W_EN = a_en;
//  assign a_out[15:0] = sim_model__W_OUT;
//  assign sim_model__I_IN = b_cas_in[7:0];
//  assign sim_model__I_EN = b_en;
//  assign b_cas_out[7:0] = sim_model__I_OUT;
//  assign sim_model__O_IN = res_cas_in[63:0];
//  assign sim_model__ACC_EN = acc_en;
//  assign res_cas_out[63:0] = sim_model__O_OUT;
//
//endmodule


// PyMTL Component HWB_Wrapper Definition
// Full name: HWB_Wrapper__spec_{'block_name': 'ml_block', 'simulation_model': 'MLB', 'MAC_info': {'num_units': 12, 'data_widths': {'W': 8, 'I': 8, 'O': 32}}, 'ports': [{'name': 'a_en', 'width': 1, 'direction': 'in', 'type': 'W_EN'}, {'name': 'b_en', 'width': 1, 'direction': 'in', 'type': 'I_EN'}, {'name': 'hp_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'acc_en', 'width': 1, 'direction': 'in', 'type': 'ACC_EN'}, {'name': 'config_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'config_in', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'a', 'width': 32, 'direction': 'in', 'type': 'W'}, {'name': 'b_cas_in', 'width': 24, 'direction': 'in', 'type': 'I'}, {'name': 'res_cas_in', 'width': 128, 'direction': 'in', 'type': 'O'}, {'name': 'b_cas_out', 'width': 24, 'direction': 'out', 'type': 'I'}, {'name': 'a_out', 'width': 32, 'direction': 'out', 'type': 'W'}, {'name': 'res_cas_out', 'width': 128, 'direction': 'out', 'type': 'O'}, {'name': 'clk', 'width': 1, 'direction': 'in', 'type': 'CLK'}, {'name': 'reset', 'width': 1, 'direction': 'in', 'type': 'RESET'}]}__count_32__name__v1__projection_{'name': 'test_proj', 'outer_projection': {'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}, 'inner_projection': {'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}, 'temporal_projection': {'URW': {'value': 1}, 'URN': {'value': 1}, 'UE': {'value': 1}, 'UB': {'value': 1}, 'UG': {'value': 1}}, 'activation_function': 'RELU', 'stream_info': {'W': 8, 'I': 8, 'O': 32}}
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module HWB_Wrapper__6c80311fcdc0a1e9
(
a_0,
a_1,
a_10,
a_11,
a_12,
a_13,
a_14,
a_15,
a_16,
a_17,
a_18,
a_19,
a_2,
a_20,
a_21,
a_22,
a_23,
a_24,
a_25,
a_26,
a_27,
a_28,
a_29,
a_3,
a_30,
a_31,
a_4,
a_5,
a_6,
a_7,
a_8,
a_9,
a_en,
a_out_0,
a_out_1,
a_out_10,
a_out_11,
a_out_12,
a_out_13,
a_out_14,
a_out_15,
a_out_16,
a_out_17,
a_out_18,
a_out_19,
a_out_2,
a_out_20,
a_out_21,
a_out_22,
a_out_23,
a_out_24,
a_out_25,
a_out_26,
a_out_27,
a_out_28,
a_out_29,
a_out_3,
a_out_30,
a_out_31,
a_out_4,
a_out_5,
a_out_6,
a_out_7,
a_out_8,
a_out_9,
acc_en,
b_cas_in_0,
b_cas_in_1,
b_cas_in_10,
b_cas_in_11,
b_cas_in_12,
b_cas_in_13,
b_cas_in_14,
b_cas_in_15,
b_cas_in_16,
b_cas_in_17,
b_cas_in_18,
b_cas_in_19,
b_cas_in_2,
b_cas_in_20,
b_cas_in_21,
b_cas_in_22,
b_cas_in_23,
b_cas_in_24,
b_cas_in_25,
b_cas_in_26,
b_cas_in_27,
b_cas_in_28,
b_cas_in_29,
b_cas_in_3,
b_cas_in_30,
b_cas_in_31,
b_cas_in_4,
b_cas_in_5,
b_cas_in_6,
b_cas_in_7,
b_cas_in_8,
b_cas_in_9,
b_cas_out_0,
b_cas_out_1,
b_cas_out_10,
b_cas_out_11,
b_cas_out_12,
b_cas_out_13,
b_cas_out_14,
b_cas_out_15,
b_cas_out_16,
b_cas_out_17,
b_cas_out_18,
b_cas_out_19,
b_cas_out_2,
b_cas_out_20,
b_cas_out_21,
b_cas_out_22,
b_cas_out_23,
b_cas_out_24,
b_cas_out_25,
b_cas_out_26,
b_cas_out_27,
b_cas_out_28,
b_cas_out_29,
b_cas_out_3,
b_cas_out_30,
b_cas_out_31,
b_cas_out_4,
b_cas_out_5,
b_cas_out_6,
b_cas_out_7,
b_cas_out_8,
b_cas_out_9,
b_en,
clk,
config_en,
config_in,
hp_en,
res_cas_in_0,
res_cas_in_1,
res_cas_in_10,
res_cas_in_11,
res_cas_in_12,
res_cas_in_13,
res_cas_in_14,
res_cas_in_15,
res_cas_in_16,
res_cas_in_17,
res_cas_in_18,
res_cas_in_19,
res_cas_in_2,
res_cas_in_20,
res_cas_in_21,
res_cas_in_22,
res_cas_in_23,
res_cas_in_24,
res_cas_in_25,
res_cas_in_26,
res_cas_in_27,
res_cas_in_28,
res_cas_in_29,
res_cas_in_3,
res_cas_in_30,
res_cas_in_31,
res_cas_in_4,
res_cas_in_5,
res_cas_in_6,
res_cas_in_7,
res_cas_in_8,
res_cas_in_9,
res_cas_out_0,
res_cas_out_1,
res_cas_out_10,
res_cas_out_11,
res_cas_out_12,
res_cas_out_13,
res_cas_out_14,
res_cas_out_15,
res_cas_out_16,
res_cas_out_17,
res_cas_out_18,
res_cas_out_19,
res_cas_out_2,
res_cas_out_20,
res_cas_out_21,
res_cas_out_22,
res_cas_out_23,
res_cas_out_24,
res_cas_out_25,
res_cas_out_26,
res_cas_out_27,
res_cas_out_28,
res_cas_out_29,
res_cas_out_3,
res_cas_out_30,
res_cas_out_31,
res_cas_out_4,
res_cas_out_5,
res_cas_out_6,
res_cas_out_7,
res_cas_out_8,
res_cas_out_9,
reset
);
input  [31:0] a_0 ;
input  [31:0] a_1 ;
input  [31:0] a_10 ;
input  [31:0] a_11 ;
input  [31:0] a_12 ;
input  [31:0] a_13 ;
input  [31:0] a_14 ;
input  [31:0] a_15 ;
input  [31:0] a_16 ;
input  [31:0] a_17 ;
input  [31:0] a_18 ;
input  [31:0] a_19 ;
input  [31:0] a_2 ;
input  [31:0] a_20 ;
input  [31:0] a_21 ;
input  [31:0] a_22 ;
input  [31:0] a_23 ;
input  [31:0] a_24 ;
input  [31:0] a_25 ;
input  [31:0] a_26 ;
input  [31:0] a_27 ;
input  [31:0] a_28 ;
input  [31:0] a_29 ;
input  [31:0] a_3 ;
input  [31:0] a_30 ;
input  [31:0] a_31 ;
input  [31:0] a_4 ;
input  [31:0] a_5 ;
input  [31:0] a_6 ;
input  [31:0] a_7 ;
input  [31:0] a_8 ;
input  [31:0] a_9 ;
input  [0:0] a_en ;
output [31:0] a_out_0 ;
output [31:0] a_out_1 ;
output [31:0] a_out_10 ;
output [31:0] a_out_11 ;
output [31:0] a_out_12 ;
output [31:0] a_out_13 ;
output [31:0] a_out_14 ;
output [31:0] a_out_15 ;
output [31:0] a_out_16 ;
output [31:0] a_out_17 ;
output [31:0] a_out_18 ;
output [31:0] a_out_19 ;
output [31:0] a_out_2 ;
output [31:0] a_out_20 ;
output [31:0] a_out_21 ;
output [31:0] a_out_22 ;
output [31:0] a_out_23 ;
output [31:0] a_out_24 ;
output [31:0] a_out_25 ;
output [31:0] a_out_26 ;
output [31:0] a_out_27 ;
output [31:0] a_out_28 ;
output [31:0] a_out_29 ;
output [31:0] a_out_3 ;
output [31:0] a_out_30 ;
output [31:0] a_out_31 ;
output [31:0] a_out_4 ;
output [31:0] a_out_5 ;
output [31:0] a_out_6 ;
output [31:0] a_out_7 ;
output [31:0] a_out_8 ;
output [31:0] a_out_9 ;
input  [0:0] acc_en ;
input  [23:0] b_cas_in_0 ;
input  [23:0] b_cas_in_1 ;
input  [23:0] b_cas_in_10 ;
input  [23:0] b_cas_in_11 ;
input  [23:0] b_cas_in_12 ;
input  [23:0] b_cas_in_13 ;
input  [23:0] b_cas_in_14 ;
input  [23:0] b_cas_in_15 ;
input  [23:0] b_cas_in_16 ;
input  [23:0] b_cas_in_17 ;
input  [23:0] b_cas_in_18 ;
input  [23:0] b_cas_in_19 ;
input  [23:0] b_cas_in_2 ;
input  [23:0] b_cas_in_20 ;
input  [23:0] b_cas_in_21 ;
input  [23:0] b_cas_in_22 ;
input  [23:0] b_cas_in_23 ;
input  [23:0] b_cas_in_24 ;
input  [23:0] b_cas_in_25 ;
input  [23:0] b_cas_in_26 ;
input  [23:0] b_cas_in_27 ;
input  [23:0] b_cas_in_28 ;
input  [23:0] b_cas_in_29 ;
input  [23:0] b_cas_in_3 ;
input  [23:0] b_cas_in_30 ;
input  [23:0] b_cas_in_31 ;
input  [23:0] b_cas_in_4 ;
input  [23:0] b_cas_in_5 ;
input  [23:0] b_cas_in_6 ;
input  [23:0] b_cas_in_7 ;
input  [23:0] b_cas_in_8 ;
input  [23:0] b_cas_in_9 ;
output [23:0] b_cas_out_0 ;
output [23:0] b_cas_out_1 ;
output [23:0] b_cas_out_10 ;
output [23:0] b_cas_out_11 ;
output [23:0] b_cas_out_12 ;
output [23:0] b_cas_out_13 ;
output [23:0] b_cas_out_14 ;
output [23:0] b_cas_out_15 ;
output [23:0] b_cas_out_16 ;
output [23:0] b_cas_out_17 ;
output [23:0] b_cas_out_18 ;
output [23:0] b_cas_out_19 ;
output [23:0] b_cas_out_2 ;
output [23:0] b_cas_out_20 ;
output [23:0] b_cas_out_21 ;
output [23:0] b_cas_out_22 ;
output [23:0] b_cas_out_23 ;
output [23:0] b_cas_out_24 ;
output [23:0] b_cas_out_25 ;
output [23:0] b_cas_out_26 ;
output [23:0] b_cas_out_27 ;
output [23:0] b_cas_out_28 ;
output [23:0] b_cas_out_29 ;
output [23:0] b_cas_out_3 ;
output [23:0] b_cas_out_30 ;
output [23:0] b_cas_out_31 ;
output [23:0] b_cas_out_4 ;
output [23:0] b_cas_out_5 ;
output [23:0] b_cas_out_6 ;
output [23:0] b_cas_out_7 ;
output [23:0] b_cas_out_8 ;
output [23:0] b_cas_out_9 ;
input  [0:0] b_en ;
input  [0:0] clk ;
input  [0:0] config_en ;
input  [0:0] config_in ;
input  [0:0] hp_en ;
input  [127:0] res_cas_in_0 ;
input  [127:0] res_cas_in_1 ;
input  [127:0] res_cas_in_10 ;
input  [127:0] res_cas_in_11 ;
input  [127:0] res_cas_in_12 ;
input  [127:0] res_cas_in_13 ;
input  [127:0] res_cas_in_14 ;
input  [127:0] res_cas_in_15 ;
input  [127:0] res_cas_in_16 ;
input  [127:0] res_cas_in_17 ;
input  [127:0] res_cas_in_18 ;
input  [127:0] res_cas_in_19 ;
input  [127:0] res_cas_in_2 ;
input  [127:0] res_cas_in_20 ;
input  [127:0] res_cas_in_21 ;
input  [127:0] res_cas_in_22 ;
input  [127:0] res_cas_in_23 ;
input  [127:0] res_cas_in_24 ;
input  [127:0] res_cas_in_25 ;
input  [127:0] res_cas_in_26 ;
input  [127:0] res_cas_in_27 ;
input  [127:0] res_cas_in_28 ;
input  [127:0] res_cas_in_29 ;
input  [127:0] res_cas_in_3 ;
input  [127:0] res_cas_in_30 ;
input  [127:0] res_cas_in_31 ;
input  [127:0] res_cas_in_4 ;
input  [127:0] res_cas_in_5 ;
input  [127:0] res_cas_in_6 ;
input  [127:0] res_cas_in_7 ;
input  [127:0] res_cas_in_8 ;
input  [127:0] res_cas_in_9 ;
output [127:0] res_cas_out_0 ;
output [127:0] res_cas_out_1 ;
output [127:0] res_cas_out_10 ;
output [127:0] res_cas_out_11 ;
output [127:0] res_cas_out_12 ;
output [127:0] res_cas_out_13 ;
output [127:0] res_cas_out_14 ;
output [127:0] res_cas_out_15 ;
output [127:0] res_cas_out_16 ;
output [127:0] res_cas_out_17 ;
output [127:0] res_cas_out_18 ;
output [127:0] res_cas_out_19 ;
output [127:0] res_cas_out_2 ;
output [127:0] res_cas_out_20 ;
output [127:0] res_cas_out_21 ;
output [127:0] res_cas_out_22 ;
output [127:0] res_cas_out_23 ;
output [127:0] res_cas_out_24 ;
output [127:0] res_cas_out_25 ;
output [127:0] res_cas_out_26 ;
output [127:0] res_cas_out_27 ;
output [127:0] res_cas_out_28 ;
output [127:0] res_cas_out_29 ;
output [127:0] res_cas_out_3 ;
output [127:0] res_cas_out_30 ;
output [127:0] res_cas_out_31 ;
output [127:0] res_cas_out_4 ;
output [127:0] res_cas_out_5 ;
output [127:0] res_cas_out_6 ;
output [127:0] res_cas_out_7 ;
output [127:0] res_cas_out_8 ;
output [127:0] res_cas_out_9 ;
input  [0:0] reset ;

  wire [31:0] a_0_tieoff;
  wire [31:0] a_10_tieoff;
  wire [31:0] a_11_tieoff;
  wire [31:0] a_12_tieoff;
  wire [31:0] a_13_tieoff;
  wire [31:0] a_14_tieoff;
  wire [31:0] a_15_tieoff;
  wire [31:0] a_16_tieoff;
  wire [31:0] a_17_tieoff;
  wire [31:0] a_18_tieoff;
  wire [31:0] a_19_tieoff;
  wire [31:0] a_1_tieoff;
  wire [31:0] a_20_tieoff;
  wire [31:0] a_21_tieoff;
  wire [31:0] a_22_tieoff;
  wire [31:0] a_23_tieoff;
  wire [31:0] a_24_tieoff;
  wire [31:0] a_25_tieoff;
  wire [31:0] a_26_tieoff;
  wire [31:0] a_27_tieoff;
  wire [31:0] a_28_tieoff;
  wire [31:0] a_29_tieoff;
  wire [31:0] a_2_tieoff;
  wire [31:0] a_30_tieoff;
  wire [31:0] a_31_tieoff;
  wire [31:0] a_3_tieoff;
  wire [31:0] a_4_tieoff;
  wire [31:0] a_5_tieoff;
  wire [31:0] a_6_tieoff;
  wire [31:0] a_7_tieoff;
  wire [31:0] a_8_tieoff;
  wire [31:0] a_9_tieoff;
  wire [0:0] a_en_tieoff;
  wire [0:0] acc_en_tieoff;
  wire [23:0] b_cas_in_0_tieoff;
  wire [23:0] b_cas_in_10_tieoff;
  wire [23:0] b_cas_in_11_tieoff;
  wire [23:0] b_cas_in_12_tieoff;
  wire [23:0] b_cas_in_13_tieoff;
  wire [23:0] b_cas_in_14_tieoff;
  wire [23:0] b_cas_in_15_tieoff;
  wire [23:0] b_cas_in_16_tieoff;
  wire [23:0] b_cas_in_17_tieoff;
  wire [23:0] b_cas_in_18_tieoff;
  wire [23:0] b_cas_in_19_tieoff;
  wire [23:0] b_cas_in_1_tieoff;
  wire [23:0] b_cas_in_20_tieoff;
  wire [23:0] b_cas_in_21_tieoff;
  wire [23:0] b_cas_in_22_tieoff;
  wire [23:0] b_cas_in_23_tieoff;
  wire [23:0] b_cas_in_24_tieoff;
  wire [23:0] b_cas_in_25_tieoff;
  wire [23:0] b_cas_in_26_tieoff;
  wire [23:0] b_cas_in_27_tieoff;
  wire [23:0] b_cas_in_28_tieoff;
  wire [23:0] b_cas_in_29_tieoff;
  wire [23:0] b_cas_in_2_tieoff;
  wire [23:0] b_cas_in_30_tieoff;
  wire [23:0] b_cas_in_31_tieoff;
  wire [23:0] b_cas_in_3_tieoff;
  wire [23:0] b_cas_in_4_tieoff;
  wire [23:0] b_cas_in_5_tieoff;
  wire [23:0] b_cas_in_6_tieoff;
  wire [23:0] b_cas_in_7_tieoff;
  wire [23:0] b_cas_in_8_tieoff;
  wire [23:0] b_cas_in_9_tieoff;
  wire [0:0] b_en_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] config_en_tieoff;
  wire [0:0] config_in_tieoff;
  wire [0:0] hp_en_tieoff;
  wire [127:0] res_cas_in_0_tieoff;
  wire [127:0] res_cas_in_10_tieoff;
  wire [127:0] res_cas_in_11_tieoff;
  wire [127:0] res_cas_in_12_tieoff;
  wire [127:0] res_cas_in_13_tieoff;
  wire [127:0] res_cas_in_14_tieoff;
  wire [127:0] res_cas_in_15_tieoff;
  wire [127:0] res_cas_in_16_tieoff;
  wire [127:0] res_cas_in_17_tieoff;
  wire [127:0] res_cas_in_18_tieoff;
  wire [127:0] res_cas_in_19_tieoff;
  wire [127:0] res_cas_in_1_tieoff;
  wire [127:0] res_cas_in_20_tieoff;
  wire [127:0] res_cas_in_21_tieoff;
  wire [127:0] res_cas_in_22_tieoff;
  wire [127:0] res_cas_in_23_tieoff;
  wire [127:0] res_cas_in_24_tieoff;
  wire [127:0] res_cas_in_25_tieoff;
  wire [127:0] res_cas_in_26_tieoff;
  wire [127:0] res_cas_in_27_tieoff;
  wire [127:0] res_cas_in_28_tieoff;
  wire [127:0] res_cas_in_29_tieoff;
  wire [127:0] res_cas_in_2_tieoff;
  wire [127:0] res_cas_in_30_tieoff;
  wire [127:0] res_cas_in_31_tieoff;
  wire [127:0] res_cas_in_3_tieoff;
  wire [127:0] res_cas_in_4_tieoff;
  wire [127:0] res_cas_in_5_tieoff;
  wire [127:0] res_cas_in_6_tieoff;
  wire [127:0] res_cas_in_7_tieoff;
  wire [127:0] res_cas_in_8_tieoff;
  wire [127:0] res_cas_in_9_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component ml_block_inst_0
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_0__a;
  wire [0:0] ml_block_inst_0__a_en;
  wire [31:0] ml_block_inst_0__a_out;
  wire [0:0] ml_block_inst_0__acc_en;
  wire [23:0] ml_block_inst_0__b_cas_in;
  wire [23:0] ml_block_inst_0__b_cas_out;
  wire [0:0] ml_block_inst_0__b_en;
  wire [0:0] ml_block_inst_0__clk;
  wire [0:0] ml_block_inst_0__config_en;
  wire [0:0] ml_block_inst_0__config_in;
  wire [0:0] ml_block_inst_0__hp_en;
  wire [127:0] ml_block_inst_0__res_cas_in;
  wire [127:0] ml_block_inst_0__res_cas_out;
  wire [0:0] ml_block_inst_0__reset;

  ml_block ml_block_inst_0
  (
    .a( ml_block_inst_0__a ),
    .a_en( ml_block_inst_0__a_en ),
    .a_out( ml_block_inst_0__a_out ),
    .acc_en( ml_block_inst_0__acc_en ),
    .b_cas_in( ml_block_inst_0__b_cas_in ),
    .b_cas_out( ml_block_inst_0__b_cas_out ),
    .b_en( ml_block_inst_0__b_en ),
    .clk( ml_block_inst_0__clk ),
    .config_en( ml_block_inst_0__config_en ),
    .config_in( ml_block_inst_0__config_in ),
    .hp_en( ml_block_inst_0__hp_en ),
    .res_cas_in( ml_block_inst_0__res_cas_in ),
    .res_cas_out( ml_block_inst_0__res_cas_out ),
    .reset( ml_block_inst_0__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_1
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_1__a;
  wire [0:0] ml_block_inst_1__a_en;
  wire [31:0] ml_block_inst_1__a_out;
  wire [0:0] ml_block_inst_1__acc_en;
  wire [23:0] ml_block_inst_1__b_cas_in;
  wire [23:0] ml_block_inst_1__b_cas_out;
  wire [0:0] ml_block_inst_1__b_en;
  wire [0:0] ml_block_inst_1__clk;
  wire [0:0] ml_block_inst_1__config_en;
  wire [0:0] ml_block_inst_1__config_in;
  wire [0:0] ml_block_inst_1__hp_en;
  wire [127:0] ml_block_inst_1__res_cas_in;
  wire [127:0] ml_block_inst_1__res_cas_out;
  wire [0:0] ml_block_inst_1__reset;

  ml_block ml_block_inst_1
  (
    .a( ml_block_inst_1__a ),
    .a_en( ml_block_inst_1__a_en ),
    .a_out( ml_block_inst_1__a_out ),
    .acc_en( ml_block_inst_1__acc_en ),
    .b_cas_in( ml_block_inst_1__b_cas_in ),
    .b_cas_out( ml_block_inst_1__b_cas_out ),
    .b_en( ml_block_inst_1__b_en ),
    .clk( ml_block_inst_1__clk ),
    .config_en( ml_block_inst_1__config_en ),
    .config_in( ml_block_inst_1__config_in ),
    .hp_en( ml_block_inst_1__hp_en ),
    .res_cas_in( ml_block_inst_1__res_cas_in ),
    .res_cas_out( ml_block_inst_1__res_cas_out ),
    .reset( ml_block_inst_1__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_1
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_10
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_10__a;
  wire [0:0] ml_block_inst_10__a_en;
  wire [31:0] ml_block_inst_10__a_out;
  wire [0:0] ml_block_inst_10__acc_en;
  wire [23:0] ml_block_inst_10__b_cas_in;
  wire [23:0] ml_block_inst_10__b_cas_out;
  wire [0:0] ml_block_inst_10__b_en;
  wire [0:0] ml_block_inst_10__clk;
  wire [0:0] ml_block_inst_10__config_en;
  wire [0:0] ml_block_inst_10__config_in;
  wire [0:0] ml_block_inst_10__hp_en;
  wire [127:0] ml_block_inst_10__res_cas_in;
  wire [127:0] ml_block_inst_10__res_cas_out;
  wire [0:0] ml_block_inst_10__reset;

  ml_block ml_block_inst_10
  (
    .a( ml_block_inst_10__a ),
    .a_en( ml_block_inst_10__a_en ),
    .a_out( ml_block_inst_10__a_out ),
    .acc_en( ml_block_inst_10__acc_en ),
    .b_cas_in( ml_block_inst_10__b_cas_in ),
    .b_cas_out( ml_block_inst_10__b_cas_out ),
    .b_en( ml_block_inst_10__b_en ),
    .clk( ml_block_inst_10__clk ),
    .config_en( ml_block_inst_10__config_en ),
    .config_in( ml_block_inst_10__config_in ),
    .hp_en( ml_block_inst_10__hp_en ),
    .res_cas_in( ml_block_inst_10__res_cas_in ),
    .res_cas_out( ml_block_inst_10__res_cas_out ),
    .reset( ml_block_inst_10__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_10
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_11
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_11__a;
  wire [0:0] ml_block_inst_11__a_en;
  wire [31:0] ml_block_inst_11__a_out;
  wire [0:0] ml_block_inst_11__acc_en;
  wire [23:0] ml_block_inst_11__b_cas_in;
  wire [23:0] ml_block_inst_11__b_cas_out;
  wire [0:0] ml_block_inst_11__b_en;
  wire [0:0] ml_block_inst_11__clk;
  wire [0:0] ml_block_inst_11__config_en;
  wire [0:0] ml_block_inst_11__config_in;
  wire [0:0] ml_block_inst_11__hp_en;
  wire [127:0] ml_block_inst_11__res_cas_in;
  wire [127:0] ml_block_inst_11__res_cas_out;
  wire [0:0] ml_block_inst_11__reset;

  ml_block ml_block_inst_11
  (
    .a( ml_block_inst_11__a ),
    .a_en( ml_block_inst_11__a_en ),
    .a_out( ml_block_inst_11__a_out ),
    .acc_en( ml_block_inst_11__acc_en ),
    .b_cas_in( ml_block_inst_11__b_cas_in ),
    .b_cas_out( ml_block_inst_11__b_cas_out ),
    .b_en( ml_block_inst_11__b_en ),
    .clk( ml_block_inst_11__clk ),
    .config_en( ml_block_inst_11__config_en ),
    .config_in( ml_block_inst_11__config_in ),
    .hp_en( ml_block_inst_11__hp_en ),
    .res_cas_in( ml_block_inst_11__res_cas_in ),
    .res_cas_out( ml_block_inst_11__res_cas_out ),
    .reset( ml_block_inst_11__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_11
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_12
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_12__a;
  wire [0:0] ml_block_inst_12__a_en;
  wire [31:0] ml_block_inst_12__a_out;
  wire [0:0] ml_block_inst_12__acc_en;
  wire [23:0] ml_block_inst_12__b_cas_in;
  wire [23:0] ml_block_inst_12__b_cas_out;
  wire [0:0] ml_block_inst_12__b_en;
  wire [0:0] ml_block_inst_12__clk;
  wire [0:0] ml_block_inst_12__config_en;
  wire [0:0] ml_block_inst_12__config_in;
  wire [0:0] ml_block_inst_12__hp_en;
  wire [127:0] ml_block_inst_12__res_cas_in;
  wire [127:0] ml_block_inst_12__res_cas_out;
  wire [0:0] ml_block_inst_12__reset;

  ml_block ml_block_inst_12
  (
    .a( ml_block_inst_12__a ),
    .a_en( ml_block_inst_12__a_en ),
    .a_out( ml_block_inst_12__a_out ),
    .acc_en( ml_block_inst_12__acc_en ),
    .b_cas_in( ml_block_inst_12__b_cas_in ),
    .b_cas_out( ml_block_inst_12__b_cas_out ),
    .b_en( ml_block_inst_12__b_en ),
    .clk( ml_block_inst_12__clk ),
    .config_en( ml_block_inst_12__config_en ),
    .config_in( ml_block_inst_12__config_in ),
    .hp_en( ml_block_inst_12__hp_en ),
    .res_cas_in( ml_block_inst_12__res_cas_in ),
    .res_cas_out( ml_block_inst_12__res_cas_out ),
    .reset( ml_block_inst_12__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_12
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_13
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_13__a;
  wire [0:0] ml_block_inst_13__a_en;
  wire [31:0] ml_block_inst_13__a_out;
  wire [0:0] ml_block_inst_13__acc_en;
  wire [23:0] ml_block_inst_13__b_cas_in;
  wire [23:0] ml_block_inst_13__b_cas_out;
  wire [0:0] ml_block_inst_13__b_en;
  wire [0:0] ml_block_inst_13__clk;
  wire [0:0] ml_block_inst_13__config_en;
  wire [0:0] ml_block_inst_13__config_in;
  wire [0:0] ml_block_inst_13__hp_en;
  wire [127:0] ml_block_inst_13__res_cas_in;
  wire [127:0] ml_block_inst_13__res_cas_out;
  wire [0:0] ml_block_inst_13__reset;

  ml_block ml_block_inst_13
  (
    .a( ml_block_inst_13__a ),
    .a_en( ml_block_inst_13__a_en ),
    .a_out( ml_block_inst_13__a_out ),
    .acc_en( ml_block_inst_13__acc_en ),
    .b_cas_in( ml_block_inst_13__b_cas_in ),
    .b_cas_out( ml_block_inst_13__b_cas_out ),
    .b_en( ml_block_inst_13__b_en ),
    .clk( ml_block_inst_13__clk ),
    .config_en( ml_block_inst_13__config_en ),
    .config_in( ml_block_inst_13__config_in ),
    .hp_en( ml_block_inst_13__hp_en ),
    .res_cas_in( ml_block_inst_13__res_cas_in ),
    .res_cas_out( ml_block_inst_13__res_cas_out ),
    .reset( ml_block_inst_13__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_13
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_14
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_14__a;
  wire [0:0] ml_block_inst_14__a_en;
  wire [31:0] ml_block_inst_14__a_out;
  wire [0:0] ml_block_inst_14__acc_en;
  wire [23:0] ml_block_inst_14__b_cas_in;
  wire [23:0] ml_block_inst_14__b_cas_out;
  wire [0:0] ml_block_inst_14__b_en;
  wire [0:0] ml_block_inst_14__clk;
  wire [0:0] ml_block_inst_14__config_en;
  wire [0:0] ml_block_inst_14__config_in;
  wire [0:0] ml_block_inst_14__hp_en;
  wire [127:0] ml_block_inst_14__res_cas_in;
  wire [127:0] ml_block_inst_14__res_cas_out;
  wire [0:0] ml_block_inst_14__reset;

  ml_block ml_block_inst_14
  (
    .a( ml_block_inst_14__a ),
    .a_en( ml_block_inst_14__a_en ),
    .a_out( ml_block_inst_14__a_out ),
    .acc_en( ml_block_inst_14__acc_en ),
    .b_cas_in( ml_block_inst_14__b_cas_in ),
    .b_cas_out( ml_block_inst_14__b_cas_out ),
    .b_en( ml_block_inst_14__b_en ),
    .clk( ml_block_inst_14__clk ),
    .config_en( ml_block_inst_14__config_en ),
    .config_in( ml_block_inst_14__config_in ),
    .hp_en( ml_block_inst_14__hp_en ),
    .res_cas_in( ml_block_inst_14__res_cas_in ),
    .res_cas_out( ml_block_inst_14__res_cas_out ),
    .reset( ml_block_inst_14__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_14
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_15
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_15__a;
  wire [0:0] ml_block_inst_15__a_en;
  wire [31:0] ml_block_inst_15__a_out;
  wire [0:0] ml_block_inst_15__acc_en;
  wire [23:0] ml_block_inst_15__b_cas_in;
  wire [23:0] ml_block_inst_15__b_cas_out;
  wire [0:0] ml_block_inst_15__b_en;
  wire [0:0] ml_block_inst_15__clk;
  wire [0:0] ml_block_inst_15__config_en;
  wire [0:0] ml_block_inst_15__config_in;
  wire [0:0] ml_block_inst_15__hp_en;
  wire [127:0] ml_block_inst_15__res_cas_in;
  wire [127:0] ml_block_inst_15__res_cas_out;
  wire [0:0] ml_block_inst_15__reset;

  ml_block ml_block_inst_15
  (
    .a( ml_block_inst_15__a ),
    .a_en( ml_block_inst_15__a_en ),
    .a_out( ml_block_inst_15__a_out ),
    .acc_en( ml_block_inst_15__acc_en ),
    .b_cas_in( ml_block_inst_15__b_cas_in ),
    .b_cas_out( ml_block_inst_15__b_cas_out ),
    .b_en( ml_block_inst_15__b_en ),
    .clk( ml_block_inst_15__clk ),
    .config_en( ml_block_inst_15__config_en ),
    .config_in( ml_block_inst_15__config_in ),
    .hp_en( ml_block_inst_15__hp_en ),
    .res_cas_in( ml_block_inst_15__res_cas_in ),
    .res_cas_out( ml_block_inst_15__res_cas_out ),
    .reset( ml_block_inst_15__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_15
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_16
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_16__a;
  wire [0:0] ml_block_inst_16__a_en;
  wire [31:0] ml_block_inst_16__a_out;
  wire [0:0] ml_block_inst_16__acc_en;
  wire [23:0] ml_block_inst_16__b_cas_in;
  wire [23:0] ml_block_inst_16__b_cas_out;
  wire [0:0] ml_block_inst_16__b_en;
  wire [0:0] ml_block_inst_16__clk;
  wire [0:0] ml_block_inst_16__config_en;
  wire [0:0] ml_block_inst_16__config_in;
  wire [0:0] ml_block_inst_16__hp_en;
  wire [127:0] ml_block_inst_16__res_cas_in;
  wire [127:0] ml_block_inst_16__res_cas_out;
  wire [0:0] ml_block_inst_16__reset;

  ml_block ml_block_inst_16
  (
    .a( ml_block_inst_16__a ),
    .a_en( ml_block_inst_16__a_en ),
    .a_out( ml_block_inst_16__a_out ),
    .acc_en( ml_block_inst_16__acc_en ),
    .b_cas_in( ml_block_inst_16__b_cas_in ),
    .b_cas_out( ml_block_inst_16__b_cas_out ),
    .b_en( ml_block_inst_16__b_en ),
    .clk( ml_block_inst_16__clk ),
    .config_en( ml_block_inst_16__config_en ),
    .config_in( ml_block_inst_16__config_in ),
    .hp_en( ml_block_inst_16__hp_en ),
    .res_cas_in( ml_block_inst_16__res_cas_in ),
    .res_cas_out( ml_block_inst_16__res_cas_out ),
    .reset( ml_block_inst_16__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_16
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_17
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_17__a;
  wire [0:0] ml_block_inst_17__a_en;
  wire [31:0] ml_block_inst_17__a_out;
  wire [0:0] ml_block_inst_17__acc_en;
  wire [23:0] ml_block_inst_17__b_cas_in;
  wire [23:0] ml_block_inst_17__b_cas_out;
  wire [0:0] ml_block_inst_17__b_en;
  wire [0:0] ml_block_inst_17__clk;
  wire [0:0] ml_block_inst_17__config_en;
  wire [0:0] ml_block_inst_17__config_in;
  wire [0:0] ml_block_inst_17__hp_en;
  wire [127:0] ml_block_inst_17__res_cas_in;
  wire [127:0] ml_block_inst_17__res_cas_out;
  wire [0:0] ml_block_inst_17__reset;

  ml_block ml_block_inst_17
  (
    .a( ml_block_inst_17__a ),
    .a_en( ml_block_inst_17__a_en ),
    .a_out( ml_block_inst_17__a_out ),
    .acc_en( ml_block_inst_17__acc_en ),
    .b_cas_in( ml_block_inst_17__b_cas_in ),
    .b_cas_out( ml_block_inst_17__b_cas_out ),
    .b_en( ml_block_inst_17__b_en ),
    .clk( ml_block_inst_17__clk ),
    .config_en( ml_block_inst_17__config_en ),
    .config_in( ml_block_inst_17__config_in ),
    .hp_en( ml_block_inst_17__hp_en ),
    .res_cas_in( ml_block_inst_17__res_cas_in ),
    .res_cas_out( ml_block_inst_17__res_cas_out ),
    .reset( ml_block_inst_17__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_17
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_18
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_18__a;
  wire [0:0] ml_block_inst_18__a_en;
  wire [31:0] ml_block_inst_18__a_out;
  wire [0:0] ml_block_inst_18__acc_en;
  wire [23:0] ml_block_inst_18__b_cas_in;
  wire [23:0] ml_block_inst_18__b_cas_out;
  wire [0:0] ml_block_inst_18__b_en;
  wire [0:0] ml_block_inst_18__clk;
  wire [0:0] ml_block_inst_18__config_en;
  wire [0:0] ml_block_inst_18__config_in;
  wire [0:0] ml_block_inst_18__hp_en;
  wire [127:0] ml_block_inst_18__res_cas_in;
  wire [127:0] ml_block_inst_18__res_cas_out;
  wire [0:0] ml_block_inst_18__reset;

  ml_block ml_block_inst_18
  (
    .a( ml_block_inst_18__a ),
    .a_en( ml_block_inst_18__a_en ),
    .a_out( ml_block_inst_18__a_out ),
    .acc_en( ml_block_inst_18__acc_en ),
    .b_cas_in( ml_block_inst_18__b_cas_in ),
    .b_cas_out( ml_block_inst_18__b_cas_out ),
    .b_en( ml_block_inst_18__b_en ),
    .clk( ml_block_inst_18__clk ),
    .config_en( ml_block_inst_18__config_en ),
    .config_in( ml_block_inst_18__config_in ),
    .hp_en( ml_block_inst_18__hp_en ),
    .res_cas_in( ml_block_inst_18__res_cas_in ),
    .res_cas_out( ml_block_inst_18__res_cas_out ),
    .reset( ml_block_inst_18__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_18
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_19
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_19__a;
  wire [0:0] ml_block_inst_19__a_en;
  wire [31:0] ml_block_inst_19__a_out;
  wire [0:0] ml_block_inst_19__acc_en;
  wire [23:0] ml_block_inst_19__b_cas_in;
  wire [23:0] ml_block_inst_19__b_cas_out;
  wire [0:0] ml_block_inst_19__b_en;
  wire [0:0] ml_block_inst_19__clk;
  wire [0:0] ml_block_inst_19__config_en;
  wire [0:0] ml_block_inst_19__config_in;
  wire [0:0] ml_block_inst_19__hp_en;
  wire [127:0] ml_block_inst_19__res_cas_in;
  wire [127:0] ml_block_inst_19__res_cas_out;
  wire [0:0] ml_block_inst_19__reset;

  ml_block ml_block_inst_19
  (
    .a( ml_block_inst_19__a ),
    .a_en( ml_block_inst_19__a_en ),
    .a_out( ml_block_inst_19__a_out ),
    .acc_en( ml_block_inst_19__acc_en ),
    .b_cas_in( ml_block_inst_19__b_cas_in ),
    .b_cas_out( ml_block_inst_19__b_cas_out ),
    .b_en( ml_block_inst_19__b_en ),
    .clk( ml_block_inst_19__clk ),
    .config_en( ml_block_inst_19__config_en ),
    .config_in( ml_block_inst_19__config_in ),
    .hp_en( ml_block_inst_19__hp_en ),
    .res_cas_in( ml_block_inst_19__res_cas_in ),
    .res_cas_out( ml_block_inst_19__res_cas_out ),
    .reset( ml_block_inst_19__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_19
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_2
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_2__a;
  wire [0:0] ml_block_inst_2__a_en;
  wire [31:0] ml_block_inst_2__a_out;
  wire [0:0] ml_block_inst_2__acc_en;
  wire [23:0] ml_block_inst_2__b_cas_in;
  wire [23:0] ml_block_inst_2__b_cas_out;
  wire [0:0] ml_block_inst_2__b_en;
  wire [0:0] ml_block_inst_2__clk;
  wire [0:0] ml_block_inst_2__config_en;
  wire [0:0] ml_block_inst_2__config_in;
  wire [0:0] ml_block_inst_2__hp_en;
  wire [127:0] ml_block_inst_2__res_cas_in;
  wire [127:0] ml_block_inst_2__res_cas_out;
  wire [0:0] ml_block_inst_2__reset;

  ml_block ml_block_inst_2
  (
    .a( ml_block_inst_2__a ),
    .a_en( ml_block_inst_2__a_en ),
    .a_out( ml_block_inst_2__a_out ),
    .acc_en( ml_block_inst_2__acc_en ),
    .b_cas_in( ml_block_inst_2__b_cas_in ),
    .b_cas_out( ml_block_inst_2__b_cas_out ),
    .b_en( ml_block_inst_2__b_en ),
    .clk( ml_block_inst_2__clk ),
    .config_en( ml_block_inst_2__config_en ),
    .config_in( ml_block_inst_2__config_in ),
    .hp_en( ml_block_inst_2__hp_en ),
    .res_cas_in( ml_block_inst_2__res_cas_in ),
    .res_cas_out( ml_block_inst_2__res_cas_out ),
    .reset( ml_block_inst_2__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_2
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_20
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_20__a;
  wire [0:0] ml_block_inst_20__a_en;
  wire [31:0] ml_block_inst_20__a_out;
  wire [0:0] ml_block_inst_20__acc_en;
  wire [23:0] ml_block_inst_20__b_cas_in;
  wire [23:0] ml_block_inst_20__b_cas_out;
  wire [0:0] ml_block_inst_20__b_en;
  wire [0:0] ml_block_inst_20__clk;
  wire [0:0] ml_block_inst_20__config_en;
  wire [0:0] ml_block_inst_20__config_in;
  wire [0:0] ml_block_inst_20__hp_en;
  wire [127:0] ml_block_inst_20__res_cas_in;
  wire [127:0] ml_block_inst_20__res_cas_out;
  wire [0:0] ml_block_inst_20__reset;

  ml_block ml_block_inst_20
  (
    .a( ml_block_inst_20__a ),
    .a_en( ml_block_inst_20__a_en ),
    .a_out( ml_block_inst_20__a_out ),
    .acc_en( ml_block_inst_20__acc_en ),
    .b_cas_in( ml_block_inst_20__b_cas_in ),
    .b_cas_out( ml_block_inst_20__b_cas_out ),
    .b_en( ml_block_inst_20__b_en ),
    .clk( ml_block_inst_20__clk ),
    .config_en( ml_block_inst_20__config_en ),
    .config_in( ml_block_inst_20__config_in ),
    .hp_en( ml_block_inst_20__hp_en ),
    .res_cas_in( ml_block_inst_20__res_cas_in ),
    .res_cas_out( ml_block_inst_20__res_cas_out ),
    .reset( ml_block_inst_20__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_20
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_21
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_21__a;
  wire [0:0] ml_block_inst_21__a_en;
  wire [31:0] ml_block_inst_21__a_out;
  wire [0:0] ml_block_inst_21__acc_en;
  wire [23:0] ml_block_inst_21__b_cas_in;
  wire [23:0] ml_block_inst_21__b_cas_out;
  wire [0:0] ml_block_inst_21__b_en;
  wire [0:0] ml_block_inst_21__clk;
  wire [0:0] ml_block_inst_21__config_en;
  wire [0:0] ml_block_inst_21__config_in;
  wire [0:0] ml_block_inst_21__hp_en;
  wire [127:0] ml_block_inst_21__res_cas_in;
  wire [127:0] ml_block_inst_21__res_cas_out;
  wire [0:0] ml_block_inst_21__reset;

  ml_block ml_block_inst_21
  (
    .a( ml_block_inst_21__a ),
    .a_en( ml_block_inst_21__a_en ),
    .a_out( ml_block_inst_21__a_out ),
    .acc_en( ml_block_inst_21__acc_en ),
    .b_cas_in( ml_block_inst_21__b_cas_in ),
    .b_cas_out( ml_block_inst_21__b_cas_out ),
    .b_en( ml_block_inst_21__b_en ),
    .clk( ml_block_inst_21__clk ),
    .config_en( ml_block_inst_21__config_en ),
    .config_in( ml_block_inst_21__config_in ),
    .hp_en( ml_block_inst_21__hp_en ),
    .res_cas_in( ml_block_inst_21__res_cas_in ),
    .res_cas_out( ml_block_inst_21__res_cas_out ),
    .reset( ml_block_inst_21__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_21
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_22
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_22__a;
  wire [0:0] ml_block_inst_22__a_en;
  wire [31:0] ml_block_inst_22__a_out;
  wire [0:0] ml_block_inst_22__acc_en;
  wire [23:0] ml_block_inst_22__b_cas_in;
  wire [23:0] ml_block_inst_22__b_cas_out;
  wire [0:0] ml_block_inst_22__b_en;
  wire [0:0] ml_block_inst_22__clk;
  wire [0:0] ml_block_inst_22__config_en;
  wire [0:0] ml_block_inst_22__config_in;
  wire [0:0] ml_block_inst_22__hp_en;
  wire [127:0] ml_block_inst_22__res_cas_in;
  wire [127:0] ml_block_inst_22__res_cas_out;
  wire [0:0] ml_block_inst_22__reset;

  ml_block ml_block_inst_22
  (
    .a( ml_block_inst_22__a ),
    .a_en( ml_block_inst_22__a_en ),
    .a_out( ml_block_inst_22__a_out ),
    .acc_en( ml_block_inst_22__acc_en ),
    .b_cas_in( ml_block_inst_22__b_cas_in ),
    .b_cas_out( ml_block_inst_22__b_cas_out ),
    .b_en( ml_block_inst_22__b_en ),
    .clk( ml_block_inst_22__clk ),
    .config_en( ml_block_inst_22__config_en ),
    .config_in( ml_block_inst_22__config_in ),
    .hp_en( ml_block_inst_22__hp_en ),
    .res_cas_in( ml_block_inst_22__res_cas_in ),
    .res_cas_out( ml_block_inst_22__res_cas_out ),
    .reset( ml_block_inst_22__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_22
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_23
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_23__a;
  wire [0:0] ml_block_inst_23__a_en;
  wire [31:0] ml_block_inst_23__a_out;
  wire [0:0] ml_block_inst_23__acc_en;
  wire [23:0] ml_block_inst_23__b_cas_in;
  wire [23:0] ml_block_inst_23__b_cas_out;
  wire [0:0] ml_block_inst_23__b_en;
  wire [0:0] ml_block_inst_23__clk;
  wire [0:0] ml_block_inst_23__config_en;
  wire [0:0] ml_block_inst_23__config_in;
  wire [0:0] ml_block_inst_23__hp_en;
  wire [127:0] ml_block_inst_23__res_cas_in;
  wire [127:0] ml_block_inst_23__res_cas_out;
  wire [0:0] ml_block_inst_23__reset;

  ml_block ml_block_inst_23
  (
    .a( ml_block_inst_23__a ),
    .a_en( ml_block_inst_23__a_en ),
    .a_out( ml_block_inst_23__a_out ),
    .acc_en( ml_block_inst_23__acc_en ),
    .b_cas_in( ml_block_inst_23__b_cas_in ),
    .b_cas_out( ml_block_inst_23__b_cas_out ),
    .b_en( ml_block_inst_23__b_en ),
    .clk( ml_block_inst_23__clk ),
    .config_en( ml_block_inst_23__config_en ),
    .config_in( ml_block_inst_23__config_in ),
    .hp_en( ml_block_inst_23__hp_en ),
    .res_cas_in( ml_block_inst_23__res_cas_in ),
    .res_cas_out( ml_block_inst_23__res_cas_out ),
    .reset( ml_block_inst_23__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_23
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_24
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_24__a;
  wire [0:0] ml_block_inst_24__a_en;
  wire [31:0] ml_block_inst_24__a_out;
  wire [0:0] ml_block_inst_24__acc_en;
  wire [23:0] ml_block_inst_24__b_cas_in;
  wire [23:0] ml_block_inst_24__b_cas_out;
  wire [0:0] ml_block_inst_24__b_en;
  wire [0:0] ml_block_inst_24__clk;
  wire [0:0] ml_block_inst_24__config_en;
  wire [0:0] ml_block_inst_24__config_in;
  wire [0:0] ml_block_inst_24__hp_en;
  wire [127:0] ml_block_inst_24__res_cas_in;
  wire [127:0] ml_block_inst_24__res_cas_out;
  wire [0:0] ml_block_inst_24__reset;

  ml_block ml_block_inst_24
  (
    .a( ml_block_inst_24__a ),
    .a_en( ml_block_inst_24__a_en ),
    .a_out( ml_block_inst_24__a_out ),
    .acc_en( ml_block_inst_24__acc_en ),
    .b_cas_in( ml_block_inst_24__b_cas_in ),
    .b_cas_out( ml_block_inst_24__b_cas_out ),
    .b_en( ml_block_inst_24__b_en ),
    .clk( ml_block_inst_24__clk ),
    .config_en( ml_block_inst_24__config_en ),
    .config_in( ml_block_inst_24__config_in ),
    .hp_en( ml_block_inst_24__hp_en ),
    .res_cas_in( ml_block_inst_24__res_cas_in ),
    .res_cas_out( ml_block_inst_24__res_cas_out ),
    .reset( ml_block_inst_24__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_24
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_25
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_25__a;
  wire [0:0] ml_block_inst_25__a_en;
  wire [31:0] ml_block_inst_25__a_out;
  wire [0:0] ml_block_inst_25__acc_en;
  wire [23:0] ml_block_inst_25__b_cas_in;
  wire [23:0] ml_block_inst_25__b_cas_out;
  wire [0:0] ml_block_inst_25__b_en;
  wire [0:0] ml_block_inst_25__clk;
  wire [0:0] ml_block_inst_25__config_en;
  wire [0:0] ml_block_inst_25__config_in;
  wire [0:0] ml_block_inst_25__hp_en;
  wire [127:0] ml_block_inst_25__res_cas_in;
  wire [127:0] ml_block_inst_25__res_cas_out;
  wire [0:0] ml_block_inst_25__reset;

  ml_block ml_block_inst_25
  (
    .a( ml_block_inst_25__a ),
    .a_en( ml_block_inst_25__a_en ),
    .a_out( ml_block_inst_25__a_out ),
    .acc_en( ml_block_inst_25__acc_en ),
    .b_cas_in( ml_block_inst_25__b_cas_in ),
    .b_cas_out( ml_block_inst_25__b_cas_out ),
    .b_en( ml_block_inst_25__b_en ),
    .clk( ml_block_inst_25__clk ),
    .config_en( ml_block_inst_25__config_en ),
    .config_in( ml_block_inst_25__config_in ),
    .hp_en( ml_block_inst_25__hp_en ),
    .res_cas_in( ml_block_inst_25__res_cas_in ),
    .res_cas_out( ml_block_inst_25__res_cas_out ),
    .reset( ml_block_inst_25__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_25
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_26
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_26__a;
  wire [0:0] ml_block_inst_26__a_en;
  wire [31:0] ml_block_inst_26__a_out;
  wire [0:0] ml_block_inst_26__acc_en;
  wire [23:0] ml_block_inst_26__b_cas_in;
  wire [23:0] ml_block_inst_26__b_cas_out;
  wire [0:0] ml_block_inst_26__b_en;
  wire [0:0] ml_block_inst_26__clk;
  wire [0:0] ml_block_inst_26__config_en;
  wire [0:0] ml_block_inst_26__config_in;
  wire [0:0] ml_block_inst_26__hp_en;
  wire [127:0] ml_block_inst_26__res_cas_in;
  wire [127:0] ml_block_inst_26__res_cas_out;
  wire [0:0] ml_block_inst_26__reset;

  ml_block ml_block_inst_26
  (
    .a( ml_block_inst_26__a ),
    .a_en( ml_block_inst_26__a_en ),
    .a_out( ml_block_inst_26__a_out ),
    .acc_en( ml_block_inst_26__acc_en ),
    .b_cas_in( ml_block_inst_26__b_cas_in ),
    .b_cas_out( ml_block_inst_26__b_cas_out ),
    .b_en( ml_block_inst_26__b_en ),
    .clk( ml_block_inst_26__clk ),
    .config_en( ml_block_inst_26__config_en ),
    .config_in( ml_block_inst_26__config_in ),
    .hp_en( ml_block_inst_26__hp_en ),
    .res_cas_in( ml_block_inst_26__res_cas_in ),
    .res_cas_out( ml_block_inst_26__res_cas_out ),
    .reset( ml_block_inst_26__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_26
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_27
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_27__a;
  wire [0:0] ml_block_inst_27__a_en;
  wire [31:0] ml_block_inst_27__a_out;
  wire [0:0] ml_block_inst_27__acc_en;
  wire [23:0] ml_block_inst_27__b_cas_in;
  wire [23:0] ml_block_inst_27__b_cas_out;
  wire [0:0] ml_block_inst_27__b_en;
  wire [0:0] ml_block_inst_27__clk;
  wire [0:0] ml_block_inst_27__config_en;
  wire [0:0] ml_block_inst_27__config_in;
  wire [0:0] ml_block_inst_27__hp_en;
  wire [127:0] ml_block_inst_27__res_cas_in;
  wire [127:0] ml_block_inst_27__res_cas_out;
  wire [0:0] ml_block_inst_27__reset;

  ml_block ml_block_inst_27
  (
    .a( ml_block_inst_27__a ),
    .a_en( ml_block_inst_27__a_en ),
    .a_out( ml_block_inst_27__a_out ),
    .acc_en( ml_block_inst_27__acc_en ),
    .b_cas_in( ml_block_inst_27__b_cas_in ),
    .b_cas_out( ml_block_inst_27__b_cas_out ),
    .b_en( ml_block_inst_27__b_en ),
    .clk( ml_block_inst_27__clk ),
    .config_en( ml_block_inst_27__config_en ),
    .config_in( ml_block_inst_27__config_in ),
    .hp_en( ml_block_inst_27__hp_en ),
    .res_cas_in( ml_block_inst_27__res_cas_in ),
    .res_cas_out( ml_block_inst_27__res_cas_out ),
    .reset( ml_block_inst_27__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_27
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_28
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_28__a;
  wire [0:0] ml_block_inst_28__a_en;
  wire [31:0] ml_block_inst_28__a_out;
  wire [0:0] ml_block_inst_28__acc_en;
  wire [23:0] ml_block_inst_28__b_cas_in;
  wire [23:0] ml_block_inst_28__b_cas_out;
  wire [0:0] ml_block_inst_28__b_en;
  wire [0:0] ml_block_inst_28__clk;
  wire [0:0] ml_block_inst_28__config_en;
  wire [0:0] ml_block_inst_28__config_in;
  wire [0:0] ml_block_inst_28__hp_en;
  wire [127:0] ml_block_inst_28__res_cas_in;
  wire [127:0] ml_block_inst_28__res_cas_out;
  wire [0:0] ml_block_inst_28__reset;

  ml_block ml_block_inst_28
  (
    .a( ml_block_inst_28__a ),
    .a_en( ml_block_inst_28__a_en ),
    .a_out( ml_block_inst_28__a_out ),
    .acc_en( ml_block_inst_28__acc_en ),
    .b_cas_in( ml_block_inst_28__b_cas_in ),
    .b_cas_out( ml_block_inst_28__b_cas_out ),
    .b_en( ml_block_inst_28__b_en ),
    .clk( ml_block_inst_28__clk ),
    .config_en( ml_block_inst_28__config_en ),
    .config_in( ml_block_inst_28__config_in ),
    .hp_en( ml_block_inst_28__hp_en ),
    .res_cas_in( ml_block_inst_28__res_cas_in ),
    .res_cas_out( ml_block_inst_28__res_cas_out ),
    .reset( ml_block_inst_28__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_28
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_29
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_29__a;
  wire [0:0] ml_block_inst_29__a_en;
  wire [31:0] ml_block_inst_29__a_out;
  wire [0:0] ml_block_inst_29__acc_en;
  wire [23:0] ml_block_inst_29__b_cas_in;
  wire [23:0] ml_block_inst_29__b_cas_out;
  wire [0:0] ml_block_inst_29__b_en;
  wire [0:0] ml_block_inst_29__clk;
  wire [0:0] ml_block_inst_29__config_en;
  wire [0:0] ml_block_inst_29__config_in;
  wire [0:0] ml_block_inst_29__hp_en;
  wire [127:0] ml_block_inst_29__res_cas_in;
  wire [127:0] ml_block_inst_29__res_cas_out;
  wire [0:0] ml_block_inst_29__reset;

  ml_block ml_block_inst_29
  (
    .a( ml_block_inst_29__a ),
    .a_en( ml_block_inst_29__a_en ),
    .a_out( ml_block_inst_29__a_out ),
    .acc_en( ml_block_inst_29__acc_en ),
    .b_cas_in( ml_block_inst_29__b_cas_in ),
    .b_cas_out( ml_block_inst_29__b_cas_out ),
    .b_en( ml_block_inst_29__b_en ),
    .clk( ml_block_inst_29__clk ),
    .config_en( ml_block_inst_29__config_en ),
    .config_in( ml_block_inst_29__config_in ),
    .hp_en( ml_block_inst_29__hp_en ),
    .res_cas_in( ml_block_inst_29__res_cas_in ),
    .res_cas_out( ml_block_inst_29__res_cas_out ),
    .reset( ml_block_inst_29__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_29
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_3
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_3__a;
  wire [0:0] ml_block_inst_3__a_en;
  wire [31:0] ml_block_inst_3__a_out;
  wire [0:0] ml_block_inst_3__acc_en;
  wire [23:0] ml_block_inst_3__b_cas_in;
  wire [23:0] ml_block_inst_3__b_cas_out;
  wire [0:0] ml_block_inst_3__b_en;
  wire [0:0] ml_block_inst_3__clk;
  wire [0:0] ml_block_inst_3__config_en;
  wire [0:0] ml_block_inst_3__config_in;
  wire [0:0] ml_block_inst_3__hp_en;
  wire [127:0] ml_block_inst_3__res_cas_in;
  wire [127:0] ml_block_inst_3__res_cas_out;
  wire [0:0] ml_block_inst_3__reset;

  ml_block ml_block_inst_3
  (
    .a( ml_block_inst_3__a ),
    .a_en( ml_block_inst_3__a_en ),
    .a_out( ml_block_inst_3__a_out ),
    .acc_en( ml_block_inst_3__acc_en ),
    .b_cas_in( ml_block_inst_3__b_cas_in ),
    .b_cas_out( ml_block_inst_3__b_cas_out ),
    .b_en( ml_block_inst_3__b_en ),
    .clk( ml_block_inst_3__clk ),
    .config_en( ml_block_inst_3__config_en ),
    .config_in( ml_block_inst_3__config_in ),
    .hp_en( ml_block_inst_3__hp_en ),
    .res_cas_in( ml_block_inst_3__res_cas_in ),
    .res_cas_out( ml_block_inst_3__res_cas_out ),
    .reset( ml_block_inst_3__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_3
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_30
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_30__a;
  wire [0:0] ml_block_inst_30__a_en;
  wire [31:0] ml_block_inst_30__a_out;
  wire [0:0] ml_block_inst_30__acc_en;
  wire [23:0] ml_block_inst_30__b_cas_in;
  wire [23:0] ml_block_inst_30__b_cas_out;
  wire [0:0] ml_block_inst_30__b_en;
  wire [0:0] ml_block_inst_30__clk;
  wire [0:0] ml_block_inst_30__config_en;
  wire [0:0] ml_block_inst_30__config_in;
  wire [0:0] ml_block_inst_30__hp_en;
  wire [127:0] ml_block_inst_30__res_cas_in;
  wire [127:0] ml_block_inst_30__res_cas_out;
  wire [0:0] ml_block_inst_30__reset;

  ml_block ml_block_inst_30
  (
    .a( ml_block_inst_30__a ),
    .a_en( ml_block_inst_30__a_en ),
    .a_out( ml_block_inst_30__a_out ),
    .acc_en( ml_block_inst_30__acc_en ),
    .b_cas_in( ml_block_inst_30__b_cas_in ),
    .b_cas_out( ml_block_inst_30__b_cas_out ),
    .b_en( ml_block_inst_30__b_en ),
    .clk( ml_block_inst_30__clk ),
    .config_en( ml_block_inst_30__config_en ),
    .config_in( ml_block_inst_30__config_in ),
    .hp_en( ml_block_inst_30__hp_en ),
    .res_cas_in( ml_block_inst_30__res_cas_in ),
    .res_cas_out( ml_block_inst_30__res_cas_out ),
    .reset( ml_block_inst_30__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_30
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_31
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_31__a;
  wire [0:0] ml_block_inst_31__a_en;
  wire [31:0] ml_block_inst_31__a_out;
  wire [0:0] ml_block_inst_31__acc_en;
  wire [23:0] ml_block_inst_31__b_cas_in;
  wire [23:0] ml_block_inst_31__b_cas_out;
  wire [0:0] ml_block_inst_31__b_en;
  wire [0:0] ml_block_inst_31__clk;
  wire [0:0] ml_block_inst_31__config_en;
  wire [0:0] ml_block_inst_31__config_in;
  wire [0:0] ml_block_inst_31__hp_en;
  wire [127:0] ml_block_inst_31__res_cas_in;
  wire [127:0] ml_block_inst_31__res_cas_out;
  wire [0:0] ml_block_inst_31__reset;

  ml_block ml_block_inst_31
  (
    .a( ml_block_inst_31__a ),
    .a_en( ml_block_inst_31__a_en ),
    .a_out( ml_block_inst_31__a_out ),
    .acc_en( ml_block_inst_31__acc_en ),
    .b_cas_in( ml_block_inst_31__b_cas_in ),
    .b_cas_out( ml_block_inst_31__b_cas_out ),
    .b_en( ml_block_inst_31__b_en ),
    .clk( ml_block_inst_31__clk ),
    .config_en( ml_block_inst_31__config_en ),
    .config_in( ml_block_inst_31__config_in ),
    .hp_en( ml_block_inst_31__hp_en ),
    .res_cas_in( ml_block_inst_31__res_cas_in ),
    .res_cas_out( ml_block_inst_31__res_cas_out ),
    .reset( ml_block_inst_31__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_31
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_4
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_4__a;
  wire [0:0] ml_block_inst_4__a_en;
  wire [31:0] ml_block_inst_4__a_out;
  wire [0:0] ml_block_inst_4__acc_en;
  wire [23:0] ml_block_inst_4__b_cas_in;
  wire [23:0] ml_block_inst_4__b_cas_out;
  wire [0:0] ml_block_inst_4__b_en;
  wire [0:0] ml_block_inst_4__clk;
  wire [0:0] ml_block_inst_4__config_en;
  wire [0:0] ml_block_inst_4__config_in;
  wire [0:0] ml_block_inst_4__hp_en;
  wire [127:0] ml_block_inst_4__res_cas_in;
  wire [127:0] ml_block_inst_4__res_cas_out;
  wire [0:0] ml_block_inst_4__reset;

  ml_block ml_block_inst_4
  (
    .a( ml_block_inst_4__a ),
    .a_en( ml_block_inst_4__a_en ),
    .a_out( ml_block_inst_4__a_out ),
    .acc_en( ml_block_inst_4__acc_en ),
    .b_cas_in( ml_block_inst_4__b_cas_in ),
    .b_cas_out( ml_block_inst_4__b_cas_out ),
    .b_en( ml_block_inst_4__b_en ),
    .clk( ml_block_inst_4__clk ),
    .config_en( ml_block_inst_4__config_en ),
    .config_in( ml_block_inst_4__config_in ),
    .hp_en( ml_block_inst_4__hp_en ),
    .res_cas_in( ml_block_inst_4__res_cas_in ),
    .res_cas_out( ml_block_inst_4__res_cas_out ),
    .reset( ml_block_inst_4__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_4
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_5
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_5__a;
  wire [0:0] ml_block_inst_5__a_en;
  wire [31:0] ml_block_inst_5__a_out;
  wire [0:0] ml_block_inst_5__acc_en;
  wire [23:0] ml_block_inst_5__b_cas_in;
  wire [23:0] ml_block_inst_5__b_cas_out;
  wire [0:0] ml_block_inst_5__b_en;
  wire [0:0] ml_block_inst_5__clk;
  wire [0:0] ml_block_inst_5__config_en;
  wire [0:0] ml_block_inst_5__config_in;
  wire [0:0] ml_block_inst_5__hp_en;
  wire [127:0] ml_block_inst_5__res_cas_in;
  wire [127:0] ml_block_inst_5__res_cas_out;
  wire [0:0] ml_block_inst_5__reset;

  ml_block ml_block_inst_5
  (
    .a( ml_block_inst_5__a ),
    .a_en( ml_block_inst_5__a_en ),
    .a_out( ml_block_inst_5__a_out ),
    .acc_en( ml_block_inst_5__acc_en ),
    .b_cas_in( ml_block_inst_5__b_cas_in ),
    .b_cas_out( ml_block_inst_5__b_cas_out ),
    .b_en( ml_block_inst_5__b_en ),
    .clk( ml_block_inst_5__clk ),
    .config_en( ml_block_inst_5__config_en ),
    .config_in( ml_block_inst_5__config_in ),
    .hp_en( ml_block_inst_5__hp_en ),
    .res_cas_in( ml_block_inst_5__res_cas_in ),
    .res_cas_out( ml_block_inst_5__res_cas_out ),
    .reset( ml_block_inst_5__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_5
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_6
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_6__a;
  wire [0:0] ml_block_inst_6__a_en;
  wire [31:0] ml_block_inst_6__a_out;
  wire [0:0] ml_block_inst_6__acc_en;
  wire [23:0] ml_block_inst_6__b_cas_in;
  wire [23:0] ml_block_inst_6__b_cas_out;
  wire [0:0] ml_block_inst_6__b_en;
  wire [0:0] ml_block_inst_6__clk;
  wire [0:0] ml_block_inst_6__config_en;
  wire [0:0] ml_block_inst_6__config_in;
  wire [0:0] ml_block_inst_6__hp_en;
  wire [127:0] ml_block_inst_6__res_cas_in;
  wire [127:0] ml_block_inst_6__res_cas_out;
  wire [0:0] ml_block_inst_6__reset;

  ml_block ml_block_inst_6
  (
    .a( ml_block_inst_6__a ),
    .a_en( ml_block_inst_6__a_en ),
    .a_out( ml_block_inst_6__a_out ),
    .acc_en( ml_block_inst_6__acc_en ),
    .b_cas_in( ml_block_inst_6__b_cas_in ),
    .b_cas_out( ml_block_inst_6__b_cas_out ),
    .b_en( ml_block_inst_6__b_en ),
    .clk( ml_block_inst_6__clk ),
    .config_en( ml_block_inst_6__config_en ),
    .config_in( ml_block_inst_6__config_in ),
    .hp_en( ml_block_inst_6__hp_en ),
    .res_cas_in( ml_block_inst_6__res_cas_in ),
    .res_cas_out( ml_block_inst_6__res_cas_out ),
    .reset( ml_block_inst_6__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_6
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_7
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_7__a;
  wire [0:0] ml_block_inst_7__a_en;
  wire [31:0] ml_block_inst_7__a_out;
  wire [0:0] ml_block_inst_7__acc_en;
  wire [23:0] ml_block_inst_7__b_cas_in;
  wire [23:0] ml_block_inst_7__b_cas_out;
  wire [0:0] ml_block_inst_7__b_en;
  wire [0:0] ml_block_inst_7__clk;
  wire [0:0] ml_block_inst_7__config_en;
  wire [0:0] ml_block_inst_7__config_in;
  wire [0:0] ml_block_inst_7__hp_en;
  wire [127:0] ml_block_inst_7__res_cas_in;
  wire [127:0] ml_block_inst_7__res_cas_out;
  wire [0:0] ml_block_inst_7__reset;

  ml_block ml_block_inst_7
  (
    .a( ml_block_inst_7__a ),
    .a_en( ml_block_inst_7__a_en ),
    .a_out( ml_block_inst_7__a_out ),
    .acc_en( ml_block_inst_7__acc_en ),
    .b_cas_in( ml_block_inst_7__b_cas_in ),
    .b_cas_out( ml_block_inst_7__b_cas_out ),
    .b_en( ml_block_inst_7__b_en ),
    .clk( ml_block_inst_7__clk ),
    .config_en( ml_block_inst_7__config_en ),
    .config_in( ml_block_inst_7__config_in ),
    .hp_en( ml_block_inst_7__hp_en ),
    .res_cas_in( ml_block_inst_7__res_cas_in ),
    .res_cas_out( ml_block_inst_7__res_cas_out ),
    .reset( ml_block_inst_7__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_7
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_8
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_8__a;
  wire [0:0] ml_block_inst_8__a_en;
  wire [31:0] ml_block_inst_8__a_out;
  wire [0:0] ml_block_inst_8__acc_en;
  wire [23:0] ml_block_inst_8__b_cas_in;
  wire [23:0] ml_block_inst_8__b_cas_out;
  wire [0:0] ml_block_inst_8__b_en;
  wire [0:0] ml_block_inst_8__clk;
  wire [0:0] ml_block_inst_8__config_en;
  wire [0:0] ml_block_inst_8__config_in;
  wire [0:0] ml_block_inst_8__hp_en;
  wire [127:0] ml_block_inst_8__res_cas_in;
  wire [127:0] ml_block_inst_8__res_cas_out;
  wire [0:0] ml_block_inst_8__reset;

  ml_block ml_block_inst_8
  (
    .a( ml_block_inst_8__a ),
    .a_en( ml_block_inst_8__a_en ),
    .a_out( ml_block_inst_8__a_out ),
    .acc_en( ml_block_inst_8__acc_en ),
    .b_cas_in( ml_block_inst_8__b_cas_in ),
    .b_cas_out( ml_block_inst_8__b_cas_out ),
    .b_en( ml_block_inst_8__b_en ),
    .clk( ml_block_inst_8__clk ),
    .config_en( ml_block_inst_8__config_en ),
    .config_in( ml_block_inst_8__config_in ),
    .hp_en( ml_block_inst_8__hp_en ),
    .res_cas_in( ml_block_inst_8__res_cas_in ),
    .res_cas_out( ml_block_inst_8__res_cas_out ),
    .reset( ml_block_inst_8__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_8
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_inst_9
  //-------------------------------------------------------------

  wire [31:0] ml_block_inst_9__a;
  wire [0:0] ml_block_inst_9__a_en;
  wire [31:0] ml_block_inst_9__a_out;
  wire [0:0] ml_block_inst_9__acc_en;
  wire [23:0] ml_block_inst_9__b_cas_in;
  wire [23:0] ml_block_inst_9__b_cas_out;
  wire [0:0] ml_block_inst_9__b_en;
  wire [0:0] ml_block_inst_9__clk;
  wire [0:0] ml_block_inst_9__config_en;
  wire [0:0] ml_block_inst_9__config_in;
  wire [0:0] ml_block_inst_9__hp_en;
  wire [127:0] ml_block_inst_9__res_cas_in;
  wire [127:0] ml_block_inst_9__res_cas_out;
  wire [0:0] ml_block_inst_9__reset;

  ml_block ml_block_inst_9
  (
    .a( ml_block_inst_9__a ),
    .a_en( ml_block_inst_9__a_en ),
    .a_out( ml_block_inst_9__a_out ),
    .acc_en( ml_block_inst_9__acc_en ),
    .b_cas_in( ml_block_inst_9__b_cas_in ),
    .b_cas_out( ml_block_inst_9__b_cas_out ),
    .b_en( ml_block_inst_9__b_en ),
    .clk( ml_block_inst_9__clk ),
    .config_en( ml_block_inst_9__config_en ),
    .config_in( ml_block_inst_9__config_in ),
    .hp_en( ml_block_inst_9__hp_en ),
    .res_cas_in( ml_block_inst_9__res_cas_in ),
    .res_cas_out( ml_block_inst_9__res_cas_out ),
    .reset( ml_block_inst_9__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_inst_9
  //-------------------------------------------------------------

  assign ml_block_inst_0__clk = clk;
  assign ml_block_inst_0__reset = reset;
  assign a_en_tieoff = a_en;
  assign ml_block_inst_0__a_en = a_en;
  assign b_en_tieoff = b_en;
  assign ml_block_inst_0__b_en = b_en;
  assign hp_en_tieoff = hp_en;
  assign ml_block_inst_0__hp_en = hp_en;
  assign acc_en_tieoff = acc_en;
  assign ml_block_inst_0__acc_en = acc_en;
  assign config_en_tieoff = config_en;
  assign ml_block_inst_0__config_en = config_en;
  assign config_in_tieoff = config_in;
  assign ml_block_inst_0__config_in = config_in;
  assign a_0_tieoff = a_0;
  assign ml_block_inst_0__a = a_0;
  assign b_cas_in_0_tieoff = b_cas_in_0;
  assign ml_block_inst_0__b_cas_in = b_cas_in_0;
  assign res_cas_in_0_tieoff = res_cas_in_0;
  assign ml_block_inst_0__res_cas_in = res_cas_in_0;
  assign b_cas_out_0 = ml_block_inst_0__b_cas_out;
  assign a_out_0 = ml_block_inst_0__a_out;
  assign res_cas_out_0 = ml_block_inst_0__res_cas_out;
  assign ml_block_inst_1__clk = clk;
  assign ml_block_inst_1__reset = reset;
  assign ml_block_inst_1__a_en = a_en;
  assign ml_block_inst_1__b_en = b_en;
  assign ml_block_inst_1__hp_en = hp_en;
  assign ml_block_inst_1__acc_en = acc_en;
  assign ml_block_inst_1__config_en = config_en;
  assign ml_block_inst_1__config_in = config_in;
  assign a_1_tieoff = a_1;
  assign ml_block_inst_1__a = a_1;
  assign b_cas_in_1_tieoff = b_cas_in_1;
  assign ml_block_inst_1__b_cas_in = b_cas_in_1;
  assign res_cas_in_1_tieoff = res_cas_in_1;
  assign ml_block_inst_1__res_cas_in = res_cas_in_1;
  assign b_cas_out_1 = ml_block_inst_1__b_cas_out;
  assign a_out_1 = ml_block_inst_1__a_out;
  assign res_cas_out_1 = ml_block_inst_1__res_cas_out;
  assign ml_block_inst_2__clk = clk;
  assign ml_block_inst_2__reset = reset;
  assign ml_block_inst_2__a_en = a_en;
  assign ml_block_inst_2__b_en = b_en;
  assign ml_block_inst_2__hp_en = hp_en;
  assign ml_block_inst_2__acc_en = acc_en;
  assign ml_block_inst_2__config_en = config_en;
  assign ml_block_inst_2__config_in = config_in;
  assign a_2_tieoff = a_2;
  assign ml_block_inst_2__a = a_2;
  assign b_cas_in_2_tieoff = b_cas_in_2;
  assign ml_block_inst_2__b_cas_in = b_cas_in_2;
  assign res_cas_in_2_tieoff = res_cas_in_2;
  assign ml_block_inst_2__res_cas_in = res_cas_in_2;
  assign b_cas_out_2 = ml_block_inst_2__b_cas_out;
  assign a_out_2 = ml_block_inst_2__a_out;
  assign res_cas_out_2 = ml_block_inst_2__res_cas_out;
  assign ml_block_inst_3__clk = clk;
  assign ml_block_inst_3__reset = reset;
  assign ml_block_inst_3__a_en = a_en;
  assign ml_block_inst_3__b_en = b_en;
  assign ml_block_inst_3__hp_en = hp_en;
  assign ml_block_inst_3__acc_en = acc_en;
  assign ml_block_inst_3__config_en = config_en;
  assign ml_block_inst_3__config_in = config_in;
  assign a_3_tieoff = a_3;
  assign ml_block_inst_3__a = a_3;
  assign b_cas_in_3_tieoff = b_cas_in_3;
  assign ml_block_inst_3__b_cas_in = b_cas_in_3;
  assign res_cas_in_3_tieoff = res_cas_in_3;
  assign ml_block_inst_3__res_cas_in = res_cas_in_3;
  assign b_cas_out_3 = ml_block_inst_3__b_cas_out;
  assign a_out_3 = ml_block_inst_3__a_out;
  assign res_cas_out_3 = ml_block_inst_3__res_cas_out;
  assign ml_block_inst_4__clk = clk;
  assign ml_block_inst_4__reset = reset;
  assign ml_block_inst_4__a_en = a_en;
  assign ml_block_inst_4__b_en = b_en;
  assign ml_block_inst_4__hp_en = hp_en;
  assign ml_block_inst_4__acc_en = acc_en;
  assign ml_block_inst_4__config_en = config_en;
  assign ml_block_inst_4__config_in = config_in;
  assign a_4_tieoff = a_4;
  assign ml_block_inst_4__a = a_4;
  assign b_cas_in_4_tieoff = b_cas_in_4;
  assign ml_block_inst_4__b_cas_in = b_cas_in_4;
  assign res_cas_in_4_tieoff = res_cas_in_4;
  assign ml_block_inst_4__res_cas_in = res_cas_in_4;
  assign b_cas_out_4 = ml_block_inst_4__b_cas_out;
  assign a_out_4 = ml_block_inst_4__a_out;
  assign res_cas_out_4 = ml_block_inst_4__res_cas_out;
  assign ml_block_inst_5__clk = clk;
  assign ml_block_inst_5__reset = reset;
  assign ml_block_inst_5__a_en = a_en;
  assign ml_block_inst_5__b_en = b_en;
  assign ml_block_inst_5__hp_en = hp_en;
  assign ml_block_inst_5__acc_en = acc_en;
  assign ml_block_inst_5__config_en = config_en;
  assign ml_block_inst_5__config_in = config_in;
  assign a_5_tieoff = a_5;
  assign ml_block_inst_5__a = a_5;
  assign b_cas_in_5_tieoff = b_cas_in_5;
  assign ml_block_inst_5__b_cas_in = b_cas_in_5;
  assign res_cas_in_5_tieoff = res_cas_in_5;
  assign ml_block_inst_5__res_cas_in = res_cas_in_5;
  assign b_cas_out_5 = ml_block_inst_5__b_cas_out;
  assign a_out_5 = ml_block_inst_5__a_out;
  assign res_cas_out_5 = ml_block_inst_5__res_cas_out;
  assign ml_block_inst_6__clk = clk;
  assign ml_block_inst_6__reset = reset;
  assign ml_block_inst_6__a_en = a_en;
  assign ml_block_inst_6__b_en = b_en;
  assign ml_block_inst_6__hp_en = hp_en;
  assign ml_block_inst_6__acc_en = acc_en;
  assign ml_block_inst_6__config_en = config_en;
  assign ml_block_inst_6__config_in = config_in;
  assign a_6_tieoff = a_6;
  assign ml_block_inst_6__a = a_6;
  assign b_cas_in_6_tieoff = b_cas_in_6;
  assign ml_block_inst_6__b_cas_in = b_cas_in_6;
  assign res_cas_in_6_tieoff = res_cas_in_6;
  assign ml_block_inst_6__res_cas_in = res_cas_in_6;
  assign b_cas_out_6 = ml_block_inst_6__b_cas_out;
  assign a_out_6 = ml_block_inst_6__a_out;
  assign res_cas_out_6 = ml_block_inst_6__res_cas_out;
  assign ml_block_inst_7__clk = clk;
  assign ml_block_inst_7__reset = reset;
  assign ml_block_inst_7__a_en = a_en;
  assign ml_block_inst_7__b_en = b_en;
  assign ml_block_inst_7__hp_en = hp_en;
  assign ml_block_inst_7__acc_en = acc_en;
  assign ml_block_inst_7__config_en = config_en;
  assign ml_block_inst_7__config_in = config_in;
  assign a_7_tieoff = a_7;
  assign ml_block_inst_7__a = a_7;
  assign b_cas_in_7_tieoff = b_cas_in_7;
  assign ml_block_inst_7__b_cas_in = b_cas_in_7;
  assign res_cas_in_7_tieoff = res_cas_in_7;
  assign ml_block_inst_7__res_cas_in = res_cas_in_7;
  assign b_cas_out_7 = ml_block_inst_7__b_cas_out;
  assign a_out_7 = ml_block_inst_7__a_out;
  assign res_cas_out_7 = ml_block_inst_7__res_cas_out;
  assign ml_block_inst_8__clk = clk;
  assign ml_block_inst_8__reset = reset;
  assign ml_block_inst_8__a_en = a_en;
  assign ml_block_inst_8__b_en = b_en;
  assign ml_block_inst_8__hp_en = hp_en;
  assign ml_block_inst_8__acc_en = acc_en;
  assign ml_block_inst_8__config_en = config_en;
  assign ml_block_inst_8__config_in = config_in;
  assign a_8_tieoff = a_8;
  assign ml_block_inst_8__a = a_8;
  assign b_cas_in_8_tieoff = b_cas_in_8;
  assign ml_block_inst_8__b_cas_in = b_cas_in_8;
  assign res_cas_in_8_tieoff = res_cas_in_8;
  assign ml_block_inst_8__res_cas_in = res_cas_in_8;
  assign b_cas_out_8 = ml_block_inst_8__b_cas_out;
  assign a_out_8 = ml_block_inst_8__a_out;
  assign res_cas_out_8 = ml_block_inst_8__res_cas_out;
  assign ml_block_inst_9__clk = clk;
  assign ml_block_inst_9__reset = reset;
  assign ml_block_inst_9__a_en = a_en;
  assign ml_block_inst_9__b_en = b_en;
  assign ml_block_inst_9__hp_en = hp_en;
  assign ml_block_inst_9__acc_en = acc_en;
  assign ml_block_inst_9__config_en = config_en;
  assign ml_block_inst_9__config_in = config_in;
  assign a_9_tieoff = a_9;
  assign ml_block_inst_9__a = a_9;
  assign b_cas_in_9_tieoff = b_cas_in_9;
  assign ml_block_inst_9__b_cas_in = b_cas_in_9;
  assign res_cas_in_9_tieoff = res_cas_in_9;
  assign ml_block_inst_9__res_cas_in = res_cas_in_9;
  assign b_cas_out_9 = ml_block_inst_9__b_cas_out;
  assign a_out_9 = ml_block_inst_9__a_out;
  assign res_cas_out_9 = ml_block_inst_9__res_cas_out;
  assign ml_block_inst_10__clk = clk;
  assign ml_block_inst_10__reset = reset;
  assign ml_block_inst_10__a_en = a_en;
  assign ml_block_inst_10__b_en = b_en;
  assign ml_block_inst_10__hp_en = hp_en;
  assign ml_block_inst_10__acc_en = acc_en;
  assign ml_block_inst_10__config_en = config_en;
  assign ml_block_inst_10__config_in = config_in;
  assign a_10_tieoff = a_10;
  assign ml_block_inst_10__a = a_10;
  assign b_cas_in_10_tieoff = b_cas_in_10;
  assign ml_block_inst_10__b_cas_in = b_cas_in_10;
  assign res_cas_in_10_tieoff = res_cas_in_10;
  assign ml_block_inst_10__res_cas_in = res_cas_in_10;
  assign b_cas_out_10 = ml_block_inst_10__b_cas_out;
  assign a_out_10 = ml_block_inst_10__a_out;
  assign res_cas_out_10 = ml_block_inst_10__res_cas_out;
  assign ml_block_inst_11__clk = clk;
  assign ml_block_inst_11__reset = reset;
  assign ml_block_inst_11__a_en = a_en;
  assign ml_block_inst_11__b_en = b_en;
  assign ml_block_inst_11__hp_en = hp_en;
  assign ml_block_inst_11__acc_en = acc_en;
  assign ml_block_inst_11__config_en = config_en;
  assign ml_block_inst_11__config_in = config_in;
  assign a_11_tieoff = a_11;
  assign ml_block_inst_11__a = a_11;
  assign b_cas_in_11_tieoff = b_cas_in_11;
  assign ml_block_inst_11__b_cas_in = b_cas_in_11;
  assign res_cas_in_11_tieoff = res_cas_in_11;
  assign ml_block_inst_11__res_cas_in = res_cas_in_11;
  assign b_cas_out_11 = ml_block_inst_11__b_cas_out;
  assign a_out_11 = ml_block_inst_11__a_out;
  assign res_cas_out_11 = ml_block_inst_11__res_cas_out;
  assign ml_block_inst_12__clk = clk;
  assign ml_block_inst_12__reset = reset;
  assign ml_block_inst_12__a_en = a_en;
  assign ml_block_inst_12__b_en = b_en;
  assign ml_block_inst_12__hp_en = hp_en;
  assign ml_block_inst_12__acc_en = acc_en;
  assign ml_block_inst_12__config_en = config_en;
  assign ml_block_inst_12__config_in = config_in;
  assign a_12_tieoff = a_12;
  assign ml_block_inst_12__a = a_12;
  assign b_cas_in_12_tieoff = b_cas_in_12;
  assign ml_block_inst_12__b_cas_in = b_cas_in_12;
  assign res_cas_in_12_tieoff = res_cas_in_12;
  assign ml_block_inst_12__res_cas_in = res_cas_in_12;
  assign b_cas_out_12 = ml_block_inst_12__b_cas_out;
  assign a_out_12 = ml_block_inst_12__a_out;
  assign res_cas_out_12 = ml_block_inst_12__res_cas_out;
  assign ml_block_inst_13__clk = clk;
  assign ml_block_inst_13__reset = reset;
  assign ml_block_inst_13__a_en = a_en;
  assign ml_block_inst_13__b_en = b_en;
  assign ml_block_inst_13__hp_en = hp_en;
  assign ml_block_inst_13__acc_en = acc_en;
  assign ml_block_inst_13__config_en = config_en;
  assign ml_block_inst_13__config_in = config_in;
  assign a_13_tieoff = a_13;
  assign ml_block_inst_13__a = a_13;
  assign b_cas_in_13_tieoff = b_cas_in_13;
  assign ml_block_inst_13__b_cas_in = b_cas_in_13;
  assign res_cas_in_13_tieoff = res_cas_in_13;
  assign ml_block_inst_13__res_cas_in = res_cas_in_13;
  assign b_cas_out_13 = ml_block_inst_13__b_cas_out;
  assign a_out_13 = ml_block_inst_13__a_out;
  assign res_cas_out_13 = ml_block_inst_13__res_cas_out;
  assign ml_block_inst_14__clk = clk;
  assign ml_block_inst_14__reset = reset;
  assign ml_block_inst_14__a_en = a_en;
  assign ml_block_inst_14__b_en = b_en;
  assign ml_block_inst_14__hp_en = hp_en;
  assign ml_block_inst_14__acc_en = acc_en;
  assign ml_block_inst_14__config_en = config_en;
  assign ml_block_inst_14__config_in = config_in;
  assign a_14_tieoff = a_14;
  assign ml_block_inst_14__a = a_14;
  assign b_cas_in_14_tieoff = b_cas_in_14;
  assign ml_block_inst_14__b_cas_in = b_cas_in_14;
  assign res_cas_in_14_tieoff = res_cas_in_14;
  assign ml_block_inst_14__res_cas_in = res_cas_in_14;
  assign b_cas_out_14 = ml_block_inst_14__b_cas_out;
  assign a_out_14 = ml_block_inst_14__a_out;
  assign res_cas_out_14 = ml_block_inst_14__res_cas_out;
  assign ml_block_inst_15__clk = clk;
  assign ml_block_inst_15__reset = reset;
  assign ml_block_inst_15__a_en = a_en;
  assign ml_block_inst_15__b_en = b_en;
  assign ml_block_inst_15__hp_en = hp_en;
  assign ml_block_inst_15__acc_en = acc_en;
  assign ml_block_inst_15__config_en = config_en;
  assign ml_block_inst_15__config_in = config_in;
  assign a_15_tieoff = a_15;
  assign ml_block_inst_15__a = a_15;
  assign b_cas_in_15_tieoff = b_cas_in_15;
  assign ml_block_inst_15__b_cas_in = b_cas_in_15;
  assign res_cas_in_15_tieoff = res_cas_in_15;
  assign ml_block_inst_15__res_cas_in = res_cas_in_15;
  assign b_cas_out_15 = ml_block_inst_15__b_cas_out;
  assign a_out_15 = ml_block_inst_15__a_out;
  assign res_cas_out_15 = ml_block_inst_15__res_cas_out;
  assign ml_block_inst_16__clk = clk;
  assign ml_block_inst_16__reset = reset;
  assign ml_block_inst_16__a_en = a_en;
  assign ml_block_inst_16__b_en = b_en;
  assign ml_block_inst_16__hp_en = hp_en;
  assign ml_block_inst_16__acc_en = acc_en;
  assign ml_block_inst_16__config_en = config_en;
  assign ml_block_inst_16__config_in = config_in;
  assign a_16_tieoff = a_16;
  assign ml_block_inst_16__a = a_16;
  assign b_cas_in_16_tieoff = b_cas_in_16;
  assign ml_block_inst_16__b_cas_in = b_cas_in_16;
  assign res_cas_in_16_tieoff = res_cas_in_16;
  assign ml_block_inst_16__res_cas_in = res_cas_in_16;
  assign b_cas_out_16 = ml_block_inst_16__b_cas_out;
  assign a_out_16 = ml_block_inst_16__a_out;
  assign res_cas_out_16 = ml_block_inst_16__res_cas_out;
  assign ml_block_inst_17__clk = clk;
  assign ml_block_inst_17__reset = reset;
  assign ml_block_inst_17__a_en = a_en;
  assign ml_block_inst_17__b_en = b_en;
  assign ml_block_inst_17__hp_en = hp_en;
  assign ml_block_inst_17__acc_en = acc_en;
  assign ml_block_inst_17__config_en = config_en;
  assign ml_block_inst_17__config_in = config_in;
  assign a_17_tieoff = a_17;
  assign ml_block_inst_17__a = a_17;
  assign b_cas_in_17_tieoff = b_cas_in_17;
  assign ml_block_inst_17__b_cas_in = b_cas_in_17;
  assign res_cas_in_17_tieoff = res_cas_in_17;
  assign ml_block_inst_17__res_cas_in = res_cas_in_17;
  assign b_cas_out_17 = ml_block_inst_17__b_cas_out;
  assign a_out_17 = ml_block_inst_17__a_out;
  assign res_cas_out_17 = ml_block_inst_17__res_cas_out;
  assign ml_block_inst_18__clk = clk;
  assign ml_block_inst_18__reset = reset;
  assign ml_block_inst_18__a_en = a_en;
  assign ml_block_inst_18__b_en = b_en;
  assign ml_block_inst_18__hp_en = hp_en;
  assign ml_block_inst_18__acc_en = acc_en;
  assign ml_block_inst_18__config_en = config_en;
  assign ml_block_inst_18__config_in = config_in;
  assign a_18_tieoff = a_18;
  assign ml_block_inst_18__a = a_18;
  assign b_cas_in_18_tieoff = b_cas_in_18;
  assign ml_block_inst_18__b_cas_in = b_cas_in_18;
  assign res_cas_in_18_tieoff = res_cas_in_18;
  assign ml_block_inst_18__res_cas_in = res_cas_in_18;
  assign b_cas_out_18 = ml_block_inst_18__b_cas_out;
  assign a_out_18 = ml_block_inst_18__a_out;
  assign res_cas_out_18 = ml_block_inst_18__res_cas_out;
  assign ml_block_inst_19__clk = clk;
  assign ml_block_inst_19__reset = reset;
  assign ml_block_inst_19__a_en = a_en;
  assign ml_block_inst_19__b_en = b_en;
  assign ml_block_inst_19__hp_en = hp_en;
  assign ml_block_inst_19__acc_en = acc_en;
  assign ml_block_inst_19__config_en = config_en;
  assign ml_block_inst_19__config_in = config_in;
  assign a_19_tieoff = a_19;
  assign ml_block_inst_19__a = a_19;
  assign b_cas_in_19_tieoff = b_cas_in_19;
  assign ml_block_inst_19__b_cas_in = b_cas_in_19;
  assign res_cas_in_19_tieoff = res_cas_in_19;
  assign ml_block_inst_19__res_cas_in = res_cas_in_19;
  assign b_cas_out_19 = ml_block_inst_19__b_cas_out;
  assign a_out_19 = ml_block_inst_19__a_out;
  assign res_cas_out_19 = ml_block_inst_19__res_cas_out;
  assign ml_block_inst_20__clk = clk;
  assign ml_block_inst_20__reset = reset;
  assign ml_block_inst_20__a_en = a_en;
  assign ml_block_inst_20__b_en = b_en;
  assign ml_block_inst_20__hp_en = hp_en;
  assign ml_block_inst_20__acc_en = acc_en;
  assign ml_block_inst_20__config_en = config_en;
  assign ml_block_inst_20__config_in = config_in;
  assign a_20_tieoff = a_20;
  assign ml_block_inst_20__a = a_20;
  assign b_cas_in_20_tieoff = b_cas_in_20;
  assign ml_block_inst_20__b_cas_in = b_cas_in_20;
  assign res_cas_in_20_tieoff = res_cas_in_20;
  assign ml_block_inst_20__res_cas_in = res_cas_in_20;
  assign b_cas_out_20 = ml_block_inst_20__b_cas_out;
  assign a_out_20 = ml_block_inst_20__a_out;
  assign res_cas_out_20 = ml_block_inst_20__res_cas_out;
  assign ml_block_inst_21__clk = clk;
  assign ml_block_inst_21__reset = reset;
  assign ml_block_inst_21__a_en = a_en;
  assign ml_block_inst_21__b_en = b_en;
  assign ml_block_inst_21__hp_en = hp_en;
  assign ml_block_inst_21__acc_en = acc_en;
  assign ml_block_inst_21__config_en = config_en;
  assign ml_block_inst_21__config_in = config_in;
  assign a_21_tieoff = a_21;
  assign ml_block_inst_21__a = a_21;
  assign b_cas_in_21_tieoff = b_cas_in_21;
  assign ml_block_inst_21__b_cas_in = b_cas_in_21;
  assign res_cas_in_21_tieoff = res_cas_in_21;
  assign ml_block_inst_21__res_cas_in = res_cas_in_21;
  assign b_cas_out_21 = ml_block_inst_21__b_cas_out;
  assign a_out_21 = ml_block_inst_21__a_out;
  assign res_cas_out_21 = ml_block_inst_21__res_cas_out;
  assign ml_block_inst_22__clk = clk;
  assign ml_block_inst_22__reset = reset;
  assign ml_block_inst_22__a_en = a_en;
  assign ml_block_inst_22__b_en = b_en;
  assign ml_block_inst_22__hp_en = hp_en;
  assign ml_block_inst_22__acc_en = acc_en;
  assign ml_block_inst_22__config_en = config_en;
  assign ml_block_inst_22__config_in = config_in;
  assign a_22_tieoff = a_22;
  assign ml_block_inst_22__a = a_22;
  assign b_cas_in_22_tieoff = b_cas_in_22;
  assign ml_block_inst_22__b_cas_in = b_cas_in_22;
  assign res_cas_in_22_tieoff = res_cas_in_22;
  assign ml_block_inst_22__res_cas_in = res_cas_in_22;
  assign b_cas_out_22 = ml_block_inst_22__b_cas_out;
  assign a_out_22 = ml_block_inst_22__a_out;
  assign res_cas_out_22 = ml_block_inst_22__res_cas_out;
  assign ml_block_inst_23__clk = clk;
  assign ml_block_inst_23__reset = reset;
  assign ml_block_inst_23__a_en = a_en;
  assign ml_block_inst_23__b_en = b_en;
  assign ml_block_inst_23__hp_en = hp_en;
  assign ml_block_inst_23__acc_en = acc_en;
  assign ml_block_inst_23__config_en = config_en;
  assign ml_block_inst_23__config_in = config_in;
  assign a_23_tieoff = a_23;
  assign ml_block_inst_23__a = a_23;
  assign b_cas_in_23_tieoff = b_cas_in_23;
  assign ml_block_inst_23__b_cas_in = b_cas_in_23;
  assign res_cas_in_23_tieoff = res_cas_in_23;
  assign ml_block_inst_23__res_cas_in = res_cas_in_23;
  assign b_cas_out_23 = ml_block_inst_23__b_cas_out;
  assign a_out_23 = ml_block_inst_23__a_out;
  assign res_cas_out_23 = ml_block_inst_23__res_cas_out;
  assign ml_block_inst_24__clk = clk;
  assign ml_block_inst_24__reset = reset;
  assign ml_block_inst_24__a_en = a_en;
  assign ml_block_inst_24__b_en = b_en;
  assign ml_block_inst_24__hp_en = hp_en;
  assign ml_block_inst_24__acc_en = acc_en;
  assign ml_block_inst_24__config_en = config_en;
  assign ml_block_inst_24__config_in = config_in;
  assign a_24_tieoff = a_24;
  assign ml_block_inst_24__a = a_24;
  assign b_cas_in_24_tieoff = b_cas_in_24;
  assign ml_block_inst_24__b_cas_in = b_cas_in_24;
  assign res_cas_in_24_tieoff = res_cas_in_24;
  assign ml_block_inst_24__res_cas_in = res_cas_in_24;
  assign b_cas_out_24 = ml_block_inst_24__b_cas_out;
  assign a_out_24 = ml_block_inst_24__a_out;
  assign res_cas_out_24 = ml_block_inst_24__res_cas_out;
  assign ml_block_inst_25__clk = clk;
  assign ml_block_inst_25__reset = reset;
  assign ml_block_inst_25__a_en = a_en;
  assign ml_block_inst_25__b_en = b_en;
  assign ml_block_inst_25__hp_en = hp_en;
  assign ml_block_inst_25__acc_en = acc_en;
  assign ml_block_inst_25__config_en = config_en;
  assign ml_block_inst_25__config_in = config_in;
  assign a_25_tieoff = a_25;
  assign ml_block_inst_25__a = a_25;
  assign b_cas_in_25_tieoff = b_cas_in_25;
  assign ml_block_inst_25__b_cas_in = b_cas_in_25;
  assign res_cas_in_25_tieoff = res_cas_in_25;
  assign ml_block_inst_25__res_cas_in = res_cas_in_25;
  assign b_cas_out_25 = ml_block_inst_25__b_cas_out;
  assign a_out_25 = ml_block_inst_25__a_out;
  assign res_cas_out_25 = ml_block_inst_25__res_cas_out;
  assign ml_block_inst_26__clk = clk;
  assign ml_block_inst_26__reset = reset;
  assign ml_block_inst_26__a_en = a_en;
  assign ml_block_inst_26__b_en = b_en;
  assign ml_block_inst_26__hp_en = hp_en;
  assign ml_block_inst_26__acc_en = acc_en;
  assign ml_block_inst_26__config_en = config_en;
  assign ml_block_inst_26__config_in = config_in;
  assign a_26_tieoff = a_26;
  assign ml_block_inst_26__a = a_26;
  assign b_cas_in_26_tieoff = b_cas_in_26;
  assign ml_block_inst_26__b_cas_in = b_cas_in_26;
  assign res_cas_in_26_tieoff = res_cas_in_26;
  assign ml_block_inst_26__res_cas_in = res_cas_in_26;
  assign b_cas_out_26 = ml_block_inst_26__b_cas_out;
  assign a_out_26 = ml_block_inst_26__a_out;
  assign res_cas_out_26 = ml_block_inst_26__res_cas_out;
  assign ml_block_inst_27__clk = clk;
  assign ml_block_inst_27__reset = reset;
  assign ml_block_inst_27__a_en = a_en;
  assign ml_block_inst_27__b_en = b_en;
  assign ml_block_inst_27__hp_en = hp_en;
  assign ml_block_inst_27__acc_en = acc_en;
  assign ml_block_inst_27__config_en = config_en;
  assign ml_block_inst_27__config_in = config_in;
  assign a_27_tieoff = a_27;
  assign ml_block_inst_27__a = a_27;
  assign b_cas_in_27_tieoff = b_cas_in_27;
  assign ml_block_inst_27__b_cas_in = b_cas_in_27;
  assign res_cas_in_27_tieoff = res_cas_in_27;
  assign ml_block_inst_27__res_cas_in = res_cas_in_27;
  assign b_cas_out_27 = ml_block_inst_27__b_cas_out;
  assign a_out_27 = ml_block_inst_27__a_out;
  assign res_cas_out_27 = ml_block_inst_27__res_cas_out;
  assign ml_block_inst_28__clk = clk;
  assign ml_block_inst_28__reset = reset;
  assign ml_block_inst_28__a_en = a_en;
  assign ml_block_inst_28__b_en = b_en;
  assign ml_block_inst_28__hp_en = hp_en;
  assign ml_block_inst_28__acc_en = acc_en;
  assign ml_block_inst_28__config_en = config_en;
  assign ml_block_inst_28__config_in = config_in;
  assign a_28_tieoff = a_28;
  assign ml_block_inst_28__a = a_28;
  assign b_cas_in_28_tieoff = b_cas_in_28;
  assign ml_block_inst_28__b_cas_in = b_cas_in_28;
  assign res_cas_in_28_tieoff = res_cas_in_28;
  assign ml_block_inst_28__res_cas_in = res_cas_in_28;
  assign b_cas_out_28 = ml_block_inst_28__b_cas_out;
  assign a_out_28 = ml_block_inst_28__a_out;
  assign res_cas_out_28 = ml_block_inst_28__res_cas_out;
  assign ml_block_inst_29__clk = clk;
  assign ml_block_inst_29__reset = reset;
  assign ml_block_inst_29__a_en = a_en;
  assign ml_block_inst_29__b_en = b_en;
  assign ml_block_inst_29__hp_en = hp_en;
  assign ml_block_inst_29__acc_en = acc_en;
  assign ml_block_inst_29__config_en = config_en;
  assign ml_block_inst_29__config_in = config_in;
  assign a_29_tieoff = a_29;
  assign ml_block_inst_29__a = a_29;
  assign b_cas_in_29_tieoff = b_cas_in_29;
  assign ml_block_inst_29__b_cas_in = b_cas_in_29;
  assign res_cas_in_29_tieoff = res_cas_in_29;
  assign ml_block_inst_29__res_cas_in = res_cas_in_29;
  assign b_cas_out_29 = ml_block_inst_29__b_cas_out;
  assign a_out_29 = ml_block_inst_29__a_out;
  assign res_cas_out_29 = ml_block_inst_29__res_cas_out;
  assign ml_block_inst_30__clk = clk;
  assign ml_block_inst_30__reset = reset;
  assign ml_block_inst_30__a_en = a_en;
  assign ml_block_inst_30__b_en = b_en;
  assign ml_block_inst_30__hp_en = hp_en;
  assign ml_block_inst_30__acc_en = acc_en;
  assign ml_block_inst_30__config_en = config_en;
  assign ml_block_inst_30__config_in = config_in;
  assign a_30_tieoff = a_30;
  assign ml_block_inst_30__a = a_30;
  assign b_cas_in_30_tieoff = b_cas_in_30;
  assign ml_block_inst_30__b_cas_in = b_cas_in_30;
  assign res_cas_in_30_tieoff = res_cas_in_30;
  assign ml_block_inst_30__res_cas_in = res_cas_in_30;
  assign b_cas_out_30 = ml_block_inst_30__b_cas_out;
  assign a_out_30 = ml_block_inst_30__a_out;
  assign res_cas_out_30 = ml_block_inst_30__res_cas_out;
  assign ml_block_inst_31__clk = clk;
  assign ml_block_inst_31__reset = reset;
  assign ml_block_inst_31__a_en = a_en;
  assign ml_block_inst_31__b_en = b_en;
  assign ml_block_inst_31__hp_en = hp_en;
  assign ml_block_inst_31__acc_en = acc_en;
  assign ml_block_inst_31__config_en = config_en;
  assign ml_block_inst_31__config_in = config_in;
  assign a_31_tieoff = a_31;
  assign ml_block_inst_31__a = a_31;
  assign b_cas_in_31_tieoff = b_cas_in_31;
  assign ml_block_inst_31__b_cas_in = b_cas_in_31;
  assign res_cas_in_31_tieoff = res_cas_in_31;
  assign ml_block_inst_31__res_cas_in = res_cas_in_31;
  assign b_cas_out_31 = ml_block_inst_31__b_cas_out;
  assign a_out_31 = ml_block_inst_31__a_out;
  assign res_cas_out_31 = ml_block_inst_31__res_cas_out;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component HWB_Wrapper Definition
// Full name: HWB_Wrapper__spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__count_4__name__v2__projection_empty
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module HWB_Wrapper__f278a0d584bba8bb
(
clk,
clk_portain,
clk_portaout,
clr0,
clr1,
ena0,
ena1,
ena2,
ena3,
portaaddr,
portaaddrstall,
portabyteenamasks,
portadatain_0,
portadatain_1,
portadatain_2,
portadatain_3,
portadataout_0,
portadataout_1,
portadataout_2,
portadataout_3,
portare,
portawe_0,
portawe_1,
portawe_2,
portawe_3,
reset
);
input  [0:0] clk ;
input  [0:0] clk_portain ;
input  [0:0] clk_portaout ;
input  [0:0] clr0 ;
input  [0:0] clr1 ;
input  [0:0] ena0 ;
input  [0:0] ena1 ;
input  [0:0] ena2 ;
input  [0:0] ena3 ;
input  [7:0] portaaddr ;
input  [0:0] portaaddrstall ;
input  [0:0] portabyteenamasks ;
input  [31:0] portadatain_0 ;
input  [31:0] portadatain_1 ;
input  [31:0] portadatain_2 ;
input  [31:0] portadatain_3 ;
output [31:0] portadataout_0 ;
output [31:0] portadataout_1 ;
output [31:0] portadataout_2 ;
output [31:0] portadataout_3 ;
input  [0:0] portare ;
input  [0:0] portawe_0 ;
input  [0:0] portawe_1 ;
input  [0:0] portawe_2 ;
input  [0:0] portawe_3 ;
input  [0:0] reset ;

  wire [0:0] clk_portain_tieoff;
  wire [0:0] clk_portaout_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] clr0_tieoff;
  wire [0:0] clr1_tieoff;
  wire [0:0] ena0_tieoff;
  wire [0:0] ena1_tieoff;
  wire [0:0] ena2_tieoff;
  wire [0:0] ena3_tieoff;
  wire [7:0] portaaddr_tieoff;
  wire [0:0] portaaddrstall_tieoff;
  wire [0:0] portabyteenamasks_tieoff;
  wire [31:0] portadatain_0_tieoff;
  wire [31:0] portadatain_1_tieoff;
  wire [31:0] portadatain_2_tieoff;
  wire [31:0] portadatain_3_tieoff;
  wire [0:0] portare_tieoff;
  wire [0:0] portawe_0_tieoff;
  wire [0:0] portawe_1_tieoff;
  wire [0:0] portawe_2_tieoff;
  wire [0:0] portawe_3_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component ml_block_input_inst_0
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_0__clk;
  wire [0:0] ml_block_input_inst_0__clk_portain;
  wire [0:0] ml_block_input_inst_0__clk_portaout;
  wire [0:0] ml_block_input_inst_0__clr0;
  wire [0:0] ml_block_input_inst_0__clr1;
  wire [0:0] ml_block_input_inst_0__ena0;
  wire [0:0] ml_block_input_inst_0__ena1;
  wire [0:0] ml_block_input_inst_0__ena2;
  wire [0:0] ml_block_input_inst_0__ena3;
  wire [7:0] ml_block_input_inst_0__portaaddr;
  wire [0:0] ml_block_input_inst_0__portaaddrstall;
  wire [0:0] ml_block_input_inst_0__portabyteenamasks;
  wire [31:0] ml_block_input_inst_0__portadatain;
  wire [31:0] ml_block_input_inst_0__portadataout;
  wire [0:0] ml_block_input_inst_0__portare;
  wire [0:0] ml_block_input_inst_0__portawe;
  wire [0:0] ml_block_input_inst_0__reset;

  ml_block_input ml_block_input_inst_0
  (
////    .clk( ml_block_input_inst_0__clk ),
    .clk_portain( ml_block_input_inst_0__clk_portain ),
    .clk_portaout( ml_block_input_inst_0__clk_portaout ),
    .clr0( ml_block_input_inst_0__clr0 ),
    .clr1( ml_block_input_inst_0__clr1 ),
    .ena0( ml_block_input_inst_0__ena0 ),
    .ena1( ml_block_input_inst_0__ena1 ),
    .ena2( ml_block_input_inst_0__ena2 ),
    .ena3( ml_block_input_inst_0__ena3 ),
    .portaaddr( ml_block_input_inst_0__portaaddr ),
    .portaaddrstall( ml_block_input_inst_0__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_0__portabyteenamasks ),
    .portadatain( ml_block_input_inst_0__portadatain ),
    .portadataout( ml_block_input_inst_0__portadataout ),
    .portare( ml_block_input_inst_0__portare ),
    .portawe( ml_block_input_inst_0__portawe )
//    .reset( ml_block_input_inst_0__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_input_inst_1
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_1__clk;
  wire [0:0] ml_block_input_inst_1__clk_portain;
  wire [0:0] ml_block_input_inst_1__clk_portaout;
  wire [0:0] ml_block_input_inst_1__clr0;
  wire [0:0] ml_block_input_inst_1__clr1;
  wire [0:0] ml_block_input_inst_1__ena0;
  wire [0:0] ml_block_input_inst_1__ena1;
  wire [0:0] ml_block_input_inst_1__ena2;
  wire [0:0] ml_block_input_inst_1__ena3;
  wire [7:0] ml_block_input_inst_1__portaaddr;
  wire [0:0] ml_block_input_inst_1__portaaddrstall;
  wire [0:0] ml_block_input_inst_1__portabyteenamasks;
  wire [31:0] ml_block_input_inst_1__portadatain;
  wire [31:0] ml_block_input_inst_1__portadataout;
  wire [0:0] ml_block_input_inst_1__portare;
  wire [0:0] ml_block_input_inst_1__portawe;
  wire [0:0] ml_block_input_inst_1__reset;

  ml_block_input ml_block_input_inst_1
  (
////    .clk( ml_block_input_inst_1__clk ),
    .clk_portain( ml_block_input_inst_1__clk_portain ),
    .clk_portaout( ml_block_input_inst_1__clk_portaout ),
    .clr0( ml_block_input_inst_1__clr0 ),
    .clr1( ml_block_input_inst_1__clr1 ),
    .ena0( ml_block_input_inst_1__ena0 ),
    .ena1( ml_block_input_inst_1__ena1 ),
    .ena2( ml_block_input_inst_1__ena2 ),
    .ena3( ml_block_input_inst_1__ena3 ),
    .portaaddr( ml_block_input_inst_1__portaaddr ),
    .portaaddrstall( ml_block_input_inst_1__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_1__portabyteenamasks ),
    .portadatain( ml_block_input_inst_1__portadatain ),
    .portadataout( ml_block_input_inst_1__portadataout ),
    .portare( ml_block_input_inst_1__portare ),
    .portawe( ml_block_input_inst_1__portawe )
//    .reset( ml_block_input_inst_1__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_1
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_input_inst_2
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_2__clk;
  wire [0:0] ml_block_input_inst_2__clk_portain;
  wire [0:0] ml_block_input_inst_2__clk_portaout;
  wire [0:0] ml_block_input_inst_2__clr0;
  wire [0:0] ml_block_input_inst_2__clr1;
  wire [0:0] ml_block_input_inst_2__ena0;
  wire [0:0] ml_block_input_inst_2__ena1;
  wire [0:0] ml_block_input_inst_2__ena2;
  wire [0:0] ml_block_input_inst_2__ena3;
  wire [7:0] ml_block_input_inst_2__portaaddr;
  wire [0:0] ml_block_input_inst_2__portaaddrstall;
  wire [0:0] ml_block_input_inst_2__portabyteenamasks;
  wire [31:0] ml_block_input_inst_2__portadatain;
  wire [31:0] ml_block_input_inst_2__portadataout;
  wire [0:0] ml_block_input_inst_2__portare;
  wire [0:0] ml_block_input_inst_2__portawe;
  wire [0:0] ml_block_input_inst_2__reset;

  ml_block_input ml_block_input_inst_2
  (
////    .clk( ml_block_input_inst_2__clk ),
    .clk_portain( ml_block_input_inst_2__clk_portain ),
    .clk_portaout( ml_block_input_inst_2__clk_portaout ),
    .clr0( ml_block_input_inst_2__clr0 ),
    .clr1( ml_block_input_inst_2__clr1 ),
    .ena0( ml_block_input_inst_2__ena0 ),
    .ena1( ml_block_input_inst_2__ena1 ),
    .ena2( ml_block_input_inst_2__ena2 ),
    .ena3( ml_block_input_inst_2__ena3 ),
    .portaaddr( ml_block_input_inst_2__portaaddr ),
    .portaaddrstall( ml_block_input_inst_2__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_2__portabyteenamasks ),
    .portadatain( ml_block_input_inst_2__portadatain ),
    .portadataout( ml_block_input_inst_2__portadataout ),
    .portare( ml_block_input_inst_2__portare ),
    .portawe( ml_block_input_inst_2__portawe )
//    .reset( ml_block_input_inst_2__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_2
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_input_inst_3
  //-------------------------------------------------------------

  wire [0:0] ml_block_input_inst_3__clk;
  wire [0:0] ml_block_input_inst_3__clk_portain;
  wire [0:0] ml_block_input_inst_3__clk_portaout;
  wire [0:0] ml_block_input_inst_3__clr0;
  wire [0:0] ml_block_input_inst_3__clr1;
  wire [0:0] ml_block_input_inst_3__ena0;
  wire [0:0] ml_block_input_inst_3__ena1;
  wire [0:0] ml_block_input_inst_3__ena2;
  wire [0:0] ml_block_input_inst_3__ena3;
  wire [7:0] ml_block_input_inst_3__portaaddr;
  wire [0:0] ml_block_input_inst_3__portaaddrstall;
  wire [0:0] ml_block_input_inst_3__portabyteenamasks;
  wire [31:0] ml_block_input_inst_3__portadatain;
  wire [31:0] ml_block_input_inst_3__portadataout;
  wire [0:0] ml_block_input_inst_3__portare;
  wire [0:0] ml_block_input_inst_3__portawe;
  wire [0:0] ml_block_input_inst_3__reset;

  ml_block_input ml_block_input_inst_3
  (
////    .clk( ml_block_input_inst_3__clk ),
    .clk_portain( ml_block_input_inst_3__clk_portain ),
    .clk_portaout( ml_block_input_inst_3__clk_portaout ),
    .clr0( ml_block_input_inst_3__clr0 ),
    .clr1( ml_block_input_inst_3__clr1 ),
    .ena0( ml_block_input_inst_3__ena0 ),
    .ena1( ml_block_input_inst_3__ena1 ),
    .ena2( ml_block_input_inst_3__ena2 ),
    .ena3( ml_block_input_inst_3__ena3 ),
    .portaaddr( ml_block_input_inst_3__portaaddr ),
    .portaaddrstall( ml_block_input_inst_3__portaaddrstall ),
    .portabyteenamasks( ml_block_input_inst_3__portabyteenamasks ),
    .portadatain( ml_block_input_inst_3__portadatain ),
    .portadataout( ml_block_input_inst_3__portadataout ),
    .portare( ml_block_input_inst_3__portare ),
    .portawe( ml_block_input_inst_3__portawe )
//    .reset( ml_block_input_inst_3__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_input_inst_3
  //-------------------------------------------------------------

  assign ml_block_input_inst_0__clk = clk;
  assign ml_block_input_inst_0__reset = reset;
  assign clk_portain_tieoff = clk_portain;
  assign ml_block_input_inst_0__clk_portain = clk_portain;
  assign clk_portaout_tieoff = clk_portaout;
  assign ml_block_input_inst_0__clk_portaout = clk_portaout;
  assign portare_tieoff = portare;
  assign ml_block_input_inst_0__portare = portare;
  assign clr1_tieoff = clr1;
  assign ml_block_input_inst_0__clr1 = clr1;
  assign clr0_tieoff = clr0;
  assign ml_block_input_inst_0__clr0 = clr0;
  assign ena0_tieoff = ena0;
  assign ml_block_input_inst_0__ena0 = ena0;
  assign ena1_tieoff = ena1;
  assign ml_block_input_inst_0__ena1 = ena1;
  assign ena2_tieoff = ena2;
  assign ml_block_input_inst_0__ena2 = ena2;
  assign ena3_tieoff = ena3;
  assign ml_block_input_inst_0__ena3 = ena3;
  assign portaaddrstall_tieoff = portaaddrstall;
  assign ml_block_input_inst_0__portaaddrstall = portaaddrstall;
  assign portabyteenamasks_tieoff = portabyteenamasks;
  assign ml_block_input_inst_0__portabyteenamasks = portabyteenamasks;
  assign portawe_0_tieoff = portawe_0;
  assign ml_block_input_inst_0__portawe = portawe_0;
  assign portaaddr_tieoff = portaaddr;
  assign ml_block_input_inst_0__portaaddr = portaaddr;
  assign portadatain_0_tieoff = portadatain_0;
  assign ml_block_input_inst_0__portadatain = portadatain_0;
  assign portadataout_0 = ml_block_input_inst_0__portadataout;
  assign ml_block_input_inst_1__clk = clk;
  assign ml_block_input_inst_1__reset = reset;
  assign ml_block_input_inst_1__clk_portain = clk_portain;
  assign ml_block_input_inst_1__clk_portaout = clk_portaout;
  assign ml_block_input_inst_1__portare = portare;
  assign ml_block_input_inst_1__clr1 = clr1;
  assign ml_block_input_inst_1__clr0 = clr0;
  assign ml_block_input_inst_1__ena0 = ena0;
  assign ml_block_input_inst_1__ena1 = ena1;
  assign ml_block_input_inst_1__ena2 = ena2;
  assign ml_block_input_inst_1__ena3 = ena3;
  assign ml_block_input_inst_1__portaaddrstall = portaaddrstall;
  assign ml_block_input_inst_1__portabyteenamasks = portabyteenamasks;
  assign portawe_1_tieoff = portawe_1;
  assign ml_block_input_inst_1__portawe = portawe_1;
  assign ml_block_input_inst_1__portaaddr = portaaddr;
  assign portadatain_1_tieoff = portadatain_1;
  assign ml_block_input_inst_1__portadatain = portadatain_1;
  assign portadataout_1 = ml_block_input_inst_1__portadataout;
  assign ml_block_input_inst_2__clk = clk;
  assign ml_block_input_inst_2__reset = reset;
  assign ml_block_input_inst_2__clk_portain = clk_portain;
  assign ml_block_input_inst_2__clk_portaout = clk_portaout;
  assign ml_block_input_inst_2__portare = portare;
  assign ml_block_input_inst_2__clr1 = clr1;
  assign ml_block_input_inst_2__clr0 = clr0;
  assign ml_block_input_inst_2__ena0 = ena0;
  assign ml_block_input_inst_2__ena1 = ena1;
  assign ml_block_input_inst_2__ena2 = ena2;
  assign ml_block_input_inst_2__ena3 = ena3;
  assign ml_block_input_inst_2__portaaddrstall = portaaddrstall;
  assign ml_block_input_inst_2__portabyteenamasks = portabyteenamasks;
  assign portawe_2_tieoff = portawe_2;
  assign ml_block_input_inst_2__portawe = portawe_2;
  assign ml_block_input_inst_2__portaaddr = portaaddr;
  assign portadatain_2_tieoff = portadatain_2;
  assign ml_block_input_inst_2__portadatain = portadatain_2;
  assign portadataout_2 = ml_block_input_inst_2__portadataout;
  assign ml_block_input_inst_3__clk = clk;
  assign ml_block_input_inst_3__reset = reset;
  assign ml_block_input_inst_3__clk_portain = clk_portain;
  assign ml_block_input_inst_3__clk_portaout = clk_portaout;
  assign ml_block_input_inst_3__portare = portare;
  assign ml_block_input_inst_3__clr1 = clr1;
  assign ml_block_input_inst_3__clr0 = clr0;
  assign ml_block_input_inst_3__ena0 = ena0;
  assign ml_block_input_inst_3__ena1 = ena1;
  assign ml_block_input_inst_3__ena2 = ena2;
  assign ml_block_input_inst_3__ena3 = ena3;
  assign ml_block_input_inst_3__portaaddrstall = portaaddrstall;
  assign ml_block_input_inst_3__portabyteenamasks = portabyteenamasks;
  assign portawe_3_tieoff = portawe_3;
  assign ml_block_input_inst_3__portawe = portawe_3;
  assign ml_block_input_inst_3__portaaddr = portaaddr;
  assign portadatain_3_tieoff = portadatain_3;
  assign ml_block_input_inst_3__portadatain = portadatain_3;
  assign portadataout_3 = ml_block_input_inst_3__portadataout;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component MergeBusses Definition
// Full name: MergeBusses__in_width_8__num_ins_16__out_width_32__num_outs_4__ins_per_out_0__sim_False
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module MergeBusses__0112bfa1bf08d8e6
(
clk,
input_0,
input_1,
input_10,
input_11,
input_12,
input_13,
input_14,
input_15,
input_2,
input_3,
input_4,
input_5,
input_6,
input_7,
input_8,
input_9,
output_0,
output_1,
output_2,
output_3,
reset
);
input  [0:0] clk ;
input  [7:0] input_0 ;
input  [7:0] input_1 ;
input  [7:0] input_10 ;
input  [7:0] input_11 ;
input  [7:0] input_12 ;
input  [7:0] input_13 ;
input  [7:0] input_14 ;
input  [7:0] input_15 ;
input  [7:0] input_2 ;
input  [7:0] input_3 ;
input  [7:0] input_4 ;
input  [7:0] input_5 ;
input  [7:0] input_6 ;
input  [7:0] input_7 ;
input  [7:0] input_8 ;
input  [7:0] input_9 ;
output [31:0] output_0 ;
output [31:0] output_1 ;
output [31:0] output_2 ;
output [31:0] output_3 ;
input  [0:0] reset ;

  wire [0:0] clk_tieoff;
  wire [7:0] input_0_tieoff;
  wire [7:0] input_10_tieoff;
  wire [7:0] input_11_tieoff;
  wire [7:0] input_12_tieoff;
  wire [7:0] input_13_tieoff;
  wire [7:0] input_14_tieoff;
  wire [7:0] input_15_tieoff;
  wire [7:0] input_1_tieoff;
  wire [7:0] input_2_tieoff;
  wire [7:0] input_3_tieoff;
  wire [7:0] input_4_tieoff;
  wire [7:0] input_5_tieoff;
  wire [7:0] input_6_tieoff;
  wire [7:0] input_7_tieoff;
  wire [7:0] input_8_tieoff;
  wire [7:0] input_9_tieoff;
  wire [0:0] reset_tieoff;

  assign input_0_tieoff = input_0;
  assign input_1_tieoff = input_1;
  assign input_2_tieoff = input_2;
  assign input_3_tieoff = input_3;
  assign input_4_tieoff = input_4;
  assign input_5_tieoff = input_5;
  assign input_6_tieoff = input_6;
  assign input_7_tieoff = input_7;
  assign input_8_tieoff = input_8;
  assign input_9_tieoff = input_9;
  assign input_10_tieoff = input_10;
  assign input_11_tieoff = input_11;
  assign input_12_tieoff = input_12;
  assign input_13_tieoff = input_13;
  assign input_14_tieoff = input_14;
  assign input_15_tieoff = input_15;
  assign output_0[7:0] = input_0[7:0];
  assign output_0[15:8] = input_1[7:0];
  assign output_0[23:16] = input_2[7:0];
  assign output_0[31:24] = input_3[7:0];
  assign output_1[7:0] = input_4[7:0];
  assign output_1[15:8] = input_5[7:0];
  assign output_1[23:16] = input_6[7:0];
  assign output_1[31:24] = input_7[7:0];
  assign output_2[7:0] = input_8[7:0];
  assign output_2[15:8] = input_9[7:0];
  assign output_2[23:16] = input_10[7:0];
  assign output_2[31:24] = input_11[7:0];
  assign output_3[7:0] = input_12[7:0];
  assign output_3[15:8] = input_13[7:0];
  assign output_3[23:16] = input_14[7:0];
  assign output_3[31:24] = input_15[7:0];
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component OutputPSInterconnect Definition
// Full name: OutputPSInterconnect__af_width_32__mlb_width_128__mlb_width_used_64__num_afs_16__num_mlbs_32__projection_{'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}__sim_False__input_buf_width_0__num_input_bufs_0
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module OutputPSInterconnect__e4f6194a384af800
(
clk,
inputs_from_mlb_0,
inputs_from_mlb_1,
inputs_from_mlb_10,
inputs_from_mlb_11,
inputs_from_mlb_12,
inputs_from_mlb_13,
inputs_from_mlb_14,
inputs_from_mlb_15,
inputs_from_mlb_16,
inputs_from_mlb_17,
inputs_from_mlb_18,
inputs_from_mlb_19,
inputs_from_mlb_2,
inputs_from_mlb_20,
inputs_from_mlb_21,
inputs_from_mlb_22,
inputs_from_mlb_23,
inputs_from_mlb_24,
inputs_from_mlb_25,
inputs_from_mlb_26,
inputs_from_mlb_27,
inputs_from_mlb_28,
inputs_from_mlb_29,
inputs_from_mlb_3,
inputs_from_mlb_30,
inputs_from_mlb_31,
inputs_from_mlb_4,
inputs_from_mlb_5,
inputs_from_mlb_6,
inputs_from_mlb_7,
inputs_from_mlb_8,
inputs_from_mlb_9,
outputs_to_afs_0,
outputs_to_afs_1,
outputs_to_afs_10,
outputs_to_afs_11,
outputs_to_afs_12,
outputs_to_afs_13,
outputs_to_afs_14,
outputs_to_afs_15,
outputs_to_afs_2,
outputs_to_afs_3,
outputs_to_afs_4,
outputs_to_afs_5,
outputs_to_afs_6,
outputs_to_afs_7,
outputs_to_afs_8,
outputs_to_afs_9,
outputs_to_mlb_0,
outputs_to_mlb_1,
outputs_to_mlb_10,
outputs_to_mlb_11,
outputs_to_mlb_12,
outputs_to_mlb_13,
outputs_to_mlb_14,
outputs_to_mlb_15,
outputs_to_mlb_16,
outputs_to_mlb_17,
outputs_to_mlb_18,
outputs_to_mlb_19,
outputs_to_mlb_2,
outputs_to_mlb_20,
outputs_to_mlb_21,
outputs_to_mlb_22,
outputs_to_mlb_23,
outputs_to_mlb_24,
outputs_to_mlb_25,
outputs_to_mlb_26,
outputs_to_mlb_27,
outputs_to_mlb_28,
outputs_to_mlb_29,
outputs_to_mlb_3,
outputs_to_mlb_30,
outputs_to_mlb_31,
outputs_to_mlb_4,
outputs_to_mlb_5,
outputs_to_mlb_6,
outputs_to_mlb_7,
outputs_to_mlb_8,
outputs_to_mlb_9,
reset
);
input  [0:0] clk ;
input  [127:0] inputs_from_mlb_0 ;
input  [127:0] inputs_from_mlb_1 ;
input  [127:0] inputs_from_mlb_10 ;
input  [127:0] inputs_from_mlb_11 ;
input  [127:0] inputs_from_mlb_12 ;
input  [127:0] inputs_from_mlb_13 ;
input  [127:0] inputs_from_mlb_14 ;
input  [127:0] inputs_from_mlb_15 ;
input  [127:0] inputs_from_mlb_16 ;
input  [127:0] inputs_from_mlb_17 ;
input  [127:0] inputs_from_mlb_18 ;
input  [127:0] inputs_from_mlb_19 ;
input  [127:0] inputs_from_mlb_2 ;
input  [127:0] inputs_from_mlb_20 ;
input  [127:0] inputs_from_mlb_21 ;
input  [127:0] inputs_from_mlb_22 ;
input  [127:0] inputs_from_mlb_23 ;
input  [127:0] inputs_from_mlb_24 ;
input  [127:0] inputs_from_mlb_25 ;
input  [127:0] inputs_from_mlb_26 ;
input  [127:0] inputs_from_mlb_27 ;
input  [127:0] inputs_from_mlb_28 ;
input  [127:0] inputs_from_mlb_29 ;
input  [127:0] inputs_from_mlb_3 ;
input  [127:0] inputs_from_mlb_30 ;
input  [127:0] inputs_from_mlb_31 ;
input  [127:0] inputs_from_mlb_4 ;
input  [127:0] inputs_from_mlb_5 ;
input  [127:0] inputs_from_mlb_6 ;
input  [127:0] inputs_from_mlb_7 ;
input  [127:0] inputs_from_mlb_8 ;
input  [127:0] inputs_from_mlb_9 ;
output [31:0] outputs_to_afs_0 ;
output [31:0] outputs_to_afs_1 ;
output [31:0] outputs_to_afs_10 ;
output [31:0] outputs_to_afs_11 ;
output [31:0] outputs_to_afs_12 ;
output [31:0] outputs_to_afs_13 ;
output [31:0] outputs_to_afs_14 ;
output [31:0] outputs_to_afs_15 ;
output [31:0] outputs_to_afs_2 ;
output [31:0] outputs_to_afs_3 ;
output [31:0] outputs_to_afs_4 ;
output [31:0] outputs_to_afs_5 ;
output [31:0] outputs_to_afs_6 ;
output [31:0] outputs_to_afs_7 ;
output [31:0] outputs_to_afs_8 ;
output [31:0] outputs_to_afs_9 ;
output [127:0] outputs_to_mlb_0 ;
output [127:0] outputs_to_mlb_1 ;
output [127:0] outputs_to_mlb_10 ;
output [127:0] outputs_to_mlb_11 ;
output [127:0] outputs_to_mlb_12 ;
output [127:0] outputs_to_mlb_13 ;
output [127:0] outputs_to_mlb_14 ;
output [127:0] outputs_to_mlb_15 ;
output [127:0] outputs_to_mlb_16 ;
output [127:0] outputs_to_mlb_17 ;
output [127:0] outputs_to_mlb_18 ;
output [127:0] outputs_to_mlb_19 ;
output [127:0] outputs_to_mlb_2 ;
output [127:0] outputs_to_mlb_20 ;
output [127:0] outputs_to_mlb_21 ;
output [127:0] outputs_to_mlb_22 ;
output [127:0] outputs_to_mlb_23 ;
output [127:0] outputs_to_mlb_24 ;
output [127:0] outputs_to_mlb_25 ;
output [127:0] outputs_to_mlb_26 ;
output [127:0] outputs_to_mlb_27 ;
output [127:0] outputs_to_mlb_28 ;
output [127:0] outputs_to_mlb_29 ;
output [127:0] outputs_to_mlb_3 ;
output [127:0] outputs_to_mlb_30 ;
output [127:0] outputs_to_mlb_31 ;
output [127:0] outputs_to_mlb_4 ;
output [127:0] outputs_to_mlb_5 ;
output [127:0] outputs_to_mlb_6 ;
output [127:0] outputs_to_mlb_7 ;
output [127:0] outputs_to_mlb_8 ;
output [127:0] outputs_to_mlb_9 ;
input  [0:0] reset ;

  wire [0:0] clk_tieoff;
  wire [127:0] inputs_from_mlb_0_tieoff;
  wire [127:0] inputs_from_mlb_10_tieoff;
  wire [127:0] inputs_from_mlb_11_tieoff;
  wire [127:0] inputs_from_mlb_12_tieoff;
  wire [127:0] inputs_from_mlb_13_tieoff;
  wire [127:0] inputs_from_mlb_14_tieoff;
  wire [127:0] inputs_from_mlb_15_tieoff;
  wire [127:0] inputs_from_mlb_16_tieoff;
  wire [127:0] inputs_from_mlb_17_tieoff;
  wire [127:0] inputs_from_mlb_18_tieoff;
  wire [127:0] inputs_from_mlb_19_tieoff;
  wire [127:0] inputs_from_mlb_1_tieoff;
  wire [127:0] inputs_from_mlb_20_tieoff;
  wire [127:0] inputs_from_mlb_21_tieoff;
  wire [127:0] inputs_from_mlb_22_tieoff;
  wire [127:0] inputs_from_mlb_23_tieoff;
  wire [127:0] inputs_from_mlb_24_tieoff;
  wire [127:0] inputs_from_mlb_25_tieoff;
  wire [127:0] inputs_from_mlb_26_tieoff;
  wire [127:0] inputs_from_mlb_27_tieoff;
  wire [127:0] inputs_from_mlb_28_tieoff;
  wire [127:0] inputs_from_mlb_29_tieoff;
  wire [127:0] inputs_from_mlb_2_tieoff;
  wire [127:0] inputs_from_mlb_30_tieoff;
  wire [127:0] inputs_from_mlb_31_tieoff;
  wire [127:0] inputs_from_mlb_3_tieoff;
  wire [127:0] inputs_from_mlb_4_tieoff;
  wire [127:0] inputs_from_mlb_5_tieoff;
  wire [127:0] inputs_from_mlb_6_tieoff;
  wire [127:0] inputs_from_mlb_7_tieoff;
  wire [127:0] inputs_from_mlb_8_tieoff;
  wire [127:0] inputs_from_mlb_9_tieoff;
  wire [0:0] reset_tieoff;

  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
  assign outputs_to_mlb_1 = inputs_from_mlb_0;
  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
  assign outputs_to_mlb_2 = inputs_from_mlb_1;
  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
  assign outputs_to_mlb_3 = inputs_from_mlb_2;
  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
  assign outputs_to_mlb_0[63:0] = 62'd0;
  assign outputs_to_afs_0 = inputs_from_mlb_3[31:0];
  assign outputs_to_afs_1 = inputs_from_mlb_3[63:32];
  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
  assign outputs_to_mlb_9 = inputs_from_mlb_8;
  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
  assign outputs_to_mlb_10 = inputs_from_mlb_9;
  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
  assign outputs_to_mlb_11 = inputs_from_mlb_10;
  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
  assign outputs_to_mlb_8[63:0] = 62'd0;
  assign outputs_to_afs_4 = inputs_from_mlb_11[31:0];
  assign outputs_to_afs_5 = inputs_from_mlb_11[63:32];
  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
  assign outputs_to_mlb_5 = inputs_from_mlb_4;
  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
  assign outputs_to_mlb_6 = inputs_from_mlb_5;
  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
  assign outputs_to_mlb_7 = inputs_from_mlb_6;
  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
  assign outputs_to_mlb_4[63:0] = 62'd0;
  assign outputs_to_afs_2 = inputs_from_mlb_7[31:0];
  assign outputs_to_afs_3 = inputs_from_mlb_7[63:32];
  assign inputs_from_mlb_12_tieoff = inputs_from_mlb_12;
  assign outputs_to_mlb_13 = inputs_from_mlb_12;
  assign inputs_from_mlb_13_tieoff = inputs_from_mlb_13;
  assign outputs_to_mlb_14 = inputs_from_mlb_13;
  assign inputs_from_mlb_14_tieoff = inputs_from_mlb_14;
  assign outputs_to_mlb_15 = inputs_from_mlb_14;
  assign inputs_from_mlb_15_tieoff = inputs_from_mlb_15;
  assign outputs_to_mlb_12[63:0] = 62'd0;
  assign outputs_to_afs_6 = inputs_from_mlb_15[31:0];
  assign outputs_to_afs_7 = inputs_from_mlb_15[63:32];
  assign inputs_from_mlb_16_tieoff = inputs_from_mlb_16;
  assign outputs_to_mlb_17 = inputs_from_mlb_16;
  assign inputs_from_mlb_17_tieoff = inputs_from_mlb_17;
  assign outputs_to_mlb_18 = inputs_from_mlb_17;
  assign inputs_from_mlb_18_tieoff = inputs_from_mlb_18;
  assign outputs_to_mlb_19 = inputs_from_mlb_18;
  assign inputs_from_mlb_19_tieoff = inputs_from_mlb_19;
  assign outputs_to_mlb_16[63:0] = 62'd0;
  assign outputs_to_afs_8 = inputs_from_mlb_19[31:0];
  assign outputs_to_afs_9 = inputs_from_mlb_19[63:32];
  assign inputs_from_mlb_24_tieoff = inputs_from_mlb_24;
  assign outputs_to_mlb_25 = inputs_from_mlb_24;
  assign inputs_from_mlb_25_tieoff = inputs_from_mlb_25;
  assign outputs_to_mlb_26 = inputs_from_mlb_25;
  assign inputs_from_mlb_26_tieoff = inputs_from_mlb_26;
  assign outputs_to_mlb_27 = inputs_from_mlb_26;
  assign inputs_from_mlb_27_tieoff = inputs_from_mlb_27;
  assign outputs_to_mlb_24[63:0] = 62'd0;
  assign outputs_to_afs_12 = inputs_from_mlb_27[31:0];
  assign outputs_to_afs_13 = inputs_from_mlb_27[63:32];
  assign inputs_from_mlb_20_tieoff = inputs_from_mlb_20;
  assign outputs_to_mlb_21 = inputs_from_mlb_20;
  assign inputs_from_mlb_21_tieoff = inputs_from_mlb_21;
  assign outputs_to_mlb_22 = inputs_from_mlb_21;
  assign inputs_from_mlb_22_tieoff = inputs_from_mlb_22;
  assign outputs_to_mlb_23 = inputs_from_mlb_22;
  assign inputs_from_mlb_23_tieoff = inputs_from_mlb_23;
  assign outputs_to_mlb_20[63:0] = 62'd0;
  assign outputs_to_afs_10 = inputs_from_mlb_23[31:0];
  assign outputs_to_afs_11 = inputs_from_mlb_23[63:32];
  assign inputs_from_mlb_28_tieoff = inputs_from_mlb_28;
  assign outputs_to_mlb_29 = inputs_from_mlb_28;
  assign inputs_from_mlb_29_tieoff = inputs_from_mlb_29;
  assign outputs_to_mlb_30 = inputs_from_mlb_29;
  assign inputs_from_mlb_30_tieoff = inputs_from_mlb_30;
  assign outputs_to_mlb_31 = inputs_from_mlb_30;
  assign inputs_from_mlb_31_tieoff = inputs_from_mlb_31;
  assign outputs_to_mlb_28[63:0] = 62'd0;
  assign outputs_to_afs_14 = inputs_from_mlb_31[31:0];
  assign outputs_to_afs_15 = inputs_from_mlb_31[63:32];
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component WeightInterconnect Definition
// Full name: WeightInterconnect__buffer_width_128__mlb_width_32__mlb_width_used_16__num_buffers_2__num_mlbs_32__projection_{'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}__sim_False
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module WeightInterconnect__bc4aebbf9c76dca1
(
clk,
inputs_from_buffer_0,
inputs_from_buffer_1,
inputs_from_mlb_0,
inputs_from_mlb_1,
inputs_from_mlb_10,
inputs_from_mlb_11,
inputs_from_mlb_12,
inputs_from_mlb_13,
inputs_from_mlb_14,
inputs_from_mlb_15,
inputs_from_mlb_16,
inputs_from_mlb_17,
inputs_from_mlb_18,
inputs_from_mlb_19,
inputs_from_mlb_2,
inputs_from_mlb_20,
inputs_from_mlb_21,
inputs_from_mlb_22,
inputs_from_mlb_23,
inputs_from_mlb_24,
inputs_from_mlb_25,
inputs_from_mlb_26,
inputs_from_mlb_27,
inputs_from_mlb_28,
inputs_from_mlb_29,
inputs_from_mlb_3,
inputs_from_mlb_30,
inputs_from_mlb_31,
inputs_from_mlb_4,
inputs_from_mlb_5,
inputs_from_mlb_6,
inputs_from_mlb_7,
inputs_from_mlb_8,
inputs_from_mlb_9,
outputs_to_mlb_0,
outputs_to_mlb_1,
outputs_to_mlb_10,
outputs_to_mlb_11,
outputs_to_mlb_12,
outputs_to_mlb_13,
outputs_to_mlb_14,
outputs_to_mlb_15,
outputs_to_mlb_16,
outputs_to_mlb_17,
outputs_to_mlb_18,
outputs_to_mlb_19,
outputs_to_mlb_2,
outputs_to_mlb_20,
outputs_to_mlb_21,
outputs_to_mlb_22,
outputs_to_mlb_23,
outputs_to_mlb_24,
outputs_to_mlb_25,
outputs_to_mlb_26,
outputs_to_mlb_27,
outputs_to_mlb_28,
outputs_to_mlb_29,
outputs_to_mlb_3,
outputs_to_mlb_30,
outputs_to_mlb_31,
outputs_to_mlb_4,
outputs_to_mlb_5,
outputs_to_mlb_6,
outputs_to_mlb_7,
outputs_to_mlb_8,
outputs_to_mlb_9,
reset
);
input  [0:0] clk ;
input  [127:0] inputs_from_buffer_0 ;
input  [127:0] inputs_from_buffer_1 ;
input  [31:0] inputs_from_mlb_0 ;
input  [31:0] inputs_from_mlb_1 ;
input  [31:0] inputs_from_mlb_10 ;
input  [31:0] inputs_from_mlb_11 ;
input  [31:0] inputs_from_mlb_12 ;
input  [31:0] inputs_from_mlb_13 ;
input  [31:0] inputs_from_mlb_14 ;
input  [31:0] inputs_from_mlb_15 ;
input  [31:0] inputs_from_mlb_16 ;
input  [31:0] inputs_from_mlb_17 ;
input  [31:0] inputs_from_mlb_18 ;
input  [31:0] inputs_from_mlb_19 ;
input  [31:0] inputs_from_mlb_2 ;
input  [31:0] inputs_from_mlb_20 ;
input  [31:0] inputs_from_mlb_21 ;
input  [31:0] inputs_from_mlb_22 ;
input  [31:0] inputs_from_mlb_23 ;
input  [31:0] inputs_from_mlb_24 ;
input  [31:0] inputs_from_mlb_25 ;
input  [31:0] inputs_from_mlb_26 ;
input  [31:0] inputs_from_mlb_27 ;
input  [31:0] inputs_from_mlb_28 ;
input  [31:0] inputs_from_mlb_29 ;
input  [31:0] inputs_from_mlb_3 ;
input  [31:0] inputs_from_mlb_30 ;
input  [31:0] inputs_from_mlb_31 ;
input  [31:0] inputs_from_mlb_4 ;
input  [31:0] inputs_from_mlb_5 ;
input  [31:0] inputs_from_mlb_6 ;
input  [31:0] inputs_from_mlb_7 ;
input  [31:0] inputs_from_mlb_8 ;
input  [31:0] inputs_from_mlb_9 ;
output [31:0] outputs_to_mlb_0 ;
output [31:0] outputs_to_mlb_1 ;
output [31:0] outputs_to_mlb_10 ;
output [31:0] outputs_to_mlb_11 ;
output [31:0] outputs_to_mlb_12 ;
output [31:0] outputs_to_mlb_13 ;
output [31:0] outputs_to_mlb_14 ;
output [31:0] outputs_to_mlb_15 ;
output [31:0] outputs_to_mlb_16 ;
output [31:0] outputs_to_mlb_17 ;
output [31:0] outputs_to_mlb_18 ;
output [31:0] outputs_to_mlb_19 ;
output [31:0] outputs_to_mlb_2 ;
output [31:0] outputs_to_mlb_20 ;
output [31:0] outputs_to_mlb_21 ;
output [31:0] outputs_to_mlb_22 ;
output [31:0] outputs_to_mlb_23 ;
output [31:0] outputs_to_mlb_24 ;
output [31:0] outputs_to_mlb_25 ;
output [31:0] outputs_to_mlb_26 ;
output [31:0] outputs_to_mlb_27 ;
output [31:0] outputs_to_mlb_28 ;
output [31:0] outputs_to_mlb_29 ;
output [31:0] outputs_to_mlb_3 ;
output [31:0] outputs_to_mlb_30 ;
output [31:0] outputs_to_mlb_31 ;
output [31:0] outputs_to_mlb_4 ;
output [31:0] outputs_to_mlb_5 ;
output [31:0] outputs_to_mlb_6 ;
output [31:0] outputs_to_mlb_7 ;
output [31:0] outputs_to_mlb_8 ;
output [31:0] outputs_to_mlb_9 ;
input  [0:0] reset ;

  wire [0:0] clk_tieoff;
  wire [127:0] inputs_from_buffer_0_tieoff;
  wire [127:0] inputs_from_buffer_1_tieoff;
  wire [31:0] inputs_from_mlb_0_tieoff;
  wire [31:0] inputs_from_mlb_10_tieoff;
  wire [31:0] inputs_from_mlb_11_tieoff;
  wire [31:0] inputs_from_mlb_12_tieoff;
  wire [31:0] inputs_from_mlb_13_tieoff;
  wire [31:0] inputs_from_mlb_14_tieoff;
  wire [31:0] inputs_from_mlb_15_tieoff;
  wire [31:0] inputs_from_mlb_16_tieoff;
  wire [31:0] inputs_from_mlb_17_tieoff;
  wire [31:0] inputs_from_mlb_18_tieoff;
  wire [31:0] inputs_from_mlb_19_tieoff;
  wire [31:0] inputs_from_mlb_1_tieoff;
  wire [31:0] inputs_from_mlb_20_tieoff;
  wire [31:0] inputs_from_mlb_21_tieoff;
  wire [31:0] inputs_from_mlb_22_tieoff;
  wire [31:0] inputs_from_mlb_23_tieoff;
  wire [31:0] inputs_from_mlb_24_tieoff;
  wire [31:0] inputs_from_mlb_25_tieoff;
  wire [31:0] inputs_from_mlb_26_tieoff;
  wire [31:0] inputs_from_mlb_27_tieoff;
  wire [31:0] inputs_from_mlb_28_tieoff;
  wire [31:0] inputs_from_mlb_29_tieoff;
  wire [31:0] inputs_from_mlb_2_tieoff;
  wire [31:0] inputs_from_mlb_30_tieoff;
  wire [31:0] inputs_from_mlb_31_tieoff;
  wire [31:0] inputs_from_mlb_3_tieoff;
  wire [31:0] inputs_from_mlb_4_tieoff;
  wire [31:0] inputs_from_mlb_5_tieoff;
  wire [31:0] inputs_from_mlb_6_tieoff;
  wire [31:0] inputs_from_mlb_7_tieoff;
  wire [31:0] inputs_from_mlb_8_tieoff;
  wire [31:0] inputs_from_mlb_9_tieoff;
  wire [0:0] reset_tieoff;

  assign inputs_from_buffer_0_tieoff = inputs_from_buffer_0;
  assign inputs_from_buffer_1_tieoff = inputs_from_buffer_1;
  assign inputs_from_mlb_0_tieoff = inputs_from_mlb_0;
  assign outputs_to_mlb_0[15:0] = inputs_from_buffer_0[15:0];
  assign inputs_from_mlb_1_tieoff = inputs_from_mlb_1;
  assign outputs_to_mlb_1[15:0] = inputs_from_buffer_0[31:16];
  assign inputs_from_mlb_2_tieoff = inputs_from_mlb_2;
  assign outputs_to_mlb_2[15:0] = inputs_from_buffer_0[47:32];
  assign inputs_from_mlb_3_tieoff = inputs_from_mlb_3;
  assign outputs_to_mlb_3[15:0] = inputs_from_buffer_0[63:48];
  assign inputs_from_mlb_8_tieoff = inputs_from_mlb_8;
  assign outputs_to_mlb_8[15:0] = inputs_from_buffer_0[15:0];
  assign inputs_from_mlb_9_tieoff = inputs_from_mlb_9;
  assign outputs_to_mlb_9[15:0] = inputs_from_buffer_0[31:16];
  assign inputs_from_mlb_10_tieoff = inputs_from_mlb_10;
  assign outputs_to_mlb_10[15:0] = inputs_from_buffer_0[47:32];
  assign inputs_from_mlb_11_tieoff = inputs_from_mlb_11;
  assign outputs_to_mlb_11[15:0] = inputs_from_buffer_0[63:48];
  assign inputs_from_mlb_4_tieoff = inputs_from_mlb_4;
  assign outputs_to_mlb_4[15:0] = inputs_from_buffer_0[79:64];
  assign inputs_from_mlb_5_tieoff = inputs_from_mlb_5;
  assign outputs_to_mlb_5[15:0] = inputs_from_buffer_0[95:80];
  assign inputs_from_mlb_6_tieoff = inputs_from_mlb_6;
  assign outputs_to_mlb_6[15:0] = inputs_from_buffer_0[111:96];
  assign inputs_from_mlb_7_tieoff = inputs_from_mlb_7;
  assign outputs_to_mlb_7[15:0] = inputs_from_buffer_0[127:112];
  assign inputs_from_mlb_12_tieoff = inputs_from_mlb_12;
  assign outputs_to_mlb_12[15:0] = inputs_from_buffer_0[79:64];
  assign inputs_from_mlb_13_tieoff = inputs_from_mlb_13;
  assign outputs_to_mlb_13[15:0] = inputs_from_buffer_0[95:80];
  assign inputs_from_mlb_14_tieoff = inputs_from_mlb_14;
  assign outputs_to_mlb_14[15:0] = inputs_from_buffer_0[111:96];
  assign inputs_from_mlb_15_tieoff = inputs_from_mlb_15;
  assign outputs_to_mlb_15[15:0] = inputs_from_buffer_0[127:112];
  assign inputs_from_mlb_16_tieoff = inputs_from_mlb_16;
  assign outputs_to_mlb_16[15:0] = inputs_from_buffer_1[15:0];
  assign inputs_from_mlb_17_tieoff = inputs_from_mlb_17;
  assign outputs_to_mlb_17[15:0] = inputs_from_buffer_1[31:16];
  assign inputs_from_mlb_18_tieoff = inputs_from_mlb_18;
  assign outputs_to_mlb_18[15:0] = inputs_from_buffer_1[47:32];
  assign inputs_from_mlb_19_tieoff = inputs_from_mlb_19;
  assign outputs_to_mlb_19[15:0] = inputs_from_buffer_1[63:48];
  assign inputs_from_mlb_24_tieoff = inputs_from_mlb_24;
  assign outputs_to_mlb_24[15:0] = inputs_from_buffer_1[15:0];
  assign inputs_from_mlb_25_tieoff = inputs_from_mlb_25;
  assign outputs_to_mlb_25[15:0] = inputs_from_buffer_1[31:16];
  assign inputs_from_mlb_26_tieoff = inputs_from_mlb_26;
  assign outputs_to_mlb_26[15:0] = inputs_from_buffer_1[47:32];
  assign inputs_from_mlb_27_tieoff = inputs_from_mlb_27;
  assign outputs_to_mlb_27[15:0] = inputs_from_buffer_1[63:48];
  assign inputs_from_mlb_20_tieoff = inputs_from_mlb_20;
  assign outputs_to_mlb_20[15:0] = inputs_from_buffer_1[79:64];
  assign inputs_from_mlb_21_tieoff = inputs_from_mlb_21;
  assign outputs_to_mlb_21[15:0] = inputs_from_buffer_1[95:80];
  assign inputs_from_mlb_22_tieoff = inputs_from_mlb_22;
  assign outputs_to_mlb_22[15:0] = inputs_from_buffer_1[111:96];
  assign inputs_from_mlb_23_tieoff = inputs_from_mlb_23;
  assign outputs_to_mlb_23[15:0] = inputs_from_buffer_1[127:112];
  assign inputs_from_mlb_28_tieoff = inputs_from_mlb_28;
  assign outputs_to_mlb_28[15:0] = inputs_from_buffer_1[79:64];
  assign inputs_from_mlb_29_tieoff = inputs_from_mlb_29;
  assign outputs_to_mlb_29[15:0] = inputs_from_buffer_1[95:80];
  assign inputs_from_mlb_30_tieoff = inputs_from_mlb_30;
  assign outputs_to_mlb_30[15:0] = inputs_from_buffer_1[111:96];
  assign inputs_from_mlb_31_tieoff = inputs_from_mlb_31;
  assign outputs_to_mlb_31[15:0] = inputs_from_buffer_1[127:112];
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component Register Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py

//module Register__reg_width_128__preload_value_0__sim_True
//(
//clk,
//ena,
//input_data,
//output_data,
//reset
//);
//input  [0:0] clk ;
//input  [0:0] ena ;
//input  [127:0] input_data ;
//output [127:0] output_data ;
//input  [0:0] reset ;
//
////  localparam wire [0:0] __const__preload_value_at_upblk0  = 1'd0;
//  wire [127:0] REG;
//  wire [0:0] ena_tieoff;
//  wire [127:0] input_data_tieoff;
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:38
//  // @update_ff
//  // def upblk0():
//  //     if s.reset:
//  //         s.REG <<= preload_value
//  //     else:
//  //         if s.ena:
//  //             s.REG <<= s.input_data
//  
//  always @(posedge clk) begin : upblk0
//    if ( reset ) begin
//      REG <= 121'd0;
//    end
//    else if ( ena ) begin
//      REG <= input_data;
//    end
//  end
//
//  assign input_data_tieoff = input_data;
//  assign ena_tieoff = ena;
//  assign output_data = REG;
//
//endmodule


// PyMTL Component BufferValue Definition
//// Full name: BufferValue__datawidth_128__addrwidth_2__addr_0__preload_value_0__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module BufferValue__fadef2fe06a49a3f
//(
//address,
//clk,
//datain,
//dataout,
//reset,
//wen
//);
//input  [1:0] address ;
//input  [0:0] clk ;
//input  [127:0] datain ;
//output [127:0] dataout ;
//input  [0:0] reset ;
//input  [0:0] wen ;
//
////  localparam wire [0:0] __const__addr_at_upblk0  = 1'd0;
//  wire [1:0] address_tieoff;
//  wire [127:0] datain_tieoff;
//  wire [0:0] wen_tieoff;
//  //-------------------------------------------------------------
//  // Component inner_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] inner_reg__clk;
//  wire [0:0] inner_reg__ena;
//  wire [127:0] inner_reg__input_data;
//  wire [127:0] inner_reg__output_data;
//  wire [0:0] inner_reg__reset;
//
//  Register__reg_width_128__preload_value_0__sim_True inner_reg
//  (
//    .clk( inner_reg__clk ),
//    .ena( inner_reg__ena ),
//    .input_data( inner_reg__input_data ),
//    .output_data( inner_reg__output_data ),
//    .reset( inner_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component inner_reg
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:171
//  // @update
//  // def upblk0():
//  //     s.inner_reg.ena @= s.wen & (addr == s.address)
//  
//  always@(*) begin : upblk0
//    inner_reg__ena = wen & ( 1'd0 == address );
//  end
//
//  assign datain_tieoff = datain;
//  assign address_tieoff = address;
//  assign wen_tieoff = wen;
//  assign inner_reg__clk = clk;
//  assign inner_reg__reset = reset;
//  assign inner_reg__input_data = datain;
//  assign dataout = inner_reg__output_data;
//
//endmodule


// PyMTL Component BufferValue Definition
//// Full name: BufferValue__datawidth_128__addrwidth_2__addr_1__preload_value_0__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module BufferValue__84ccc0090be9f2d7
//(
//address,
//clk,
//datain,
//dataout,
//reset,
//wen
//);
//input  [1:0] address ;
//input  [0:0] clk ;
//input  [127:0] datain ;
//output [127:0] dataout ;
//input  [0:0] reset ;
//input  [0:0] wen ;
//
////  localparam wire [0:0] __const__addr_at_upblk0  = 1'd1;
//  wire [1:0] address_tieoff;
//  wire [127:0] datain_tieoff;
//  wire [0:0] wen_tieoff;
//  //-------------------------------------------------------------
//  // Component inner_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] inner_reg__clk;
//  wire [0:0] inner_reg__ena;
//  wire [127:0] inner_reg__input_data;
//  wire [127:0] inner_reg__output_data;
//  wire [0:0] inner_reg__reset;
//
//  Register__reg_width_128__preload_value_0__sim_True inner_reg
//  (
//    .clk( inner_reg__clk ),
//    .ena( inner_reg__ena ),
//    .input_data( inner_reg__input_data ),
//    .output_data( inner_reg__output_data ),
//    .reset( inner_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component inner_reg
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:171
//  // @update
//  // def upblk0():
//  //     s.inner_reg.ena @= s.wen & (addr == s.address)
//  
//  always@(*) begin : upblk0
//    inner_reg__ena = wen & ( 1'd1 == address );
//  end
//
//  assign datain_tieoff = datain;
//  assign address_tieoff = address;
//  assign wen_tieoff = wen;
//  assign inner_reg__clk = clk;
//  assign inner_reg__reset = reset;
//  assign inner_reg__input_data = datain;
//  assign dataout = inner_reg__output_data;
//
//endmodule


// PyMTL Component BufferValue Definition
//// Full name: BufferValue__datawidth_128__addrwidth_2__addr_2__preload_value_0__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module BufferValue__883b2c9216c8b7fd
//(
//address,
//clk,
//datain,
//dataout,
//reset,
//wen
//);
//input  [1:0] address ;
//input  [0:0] clk ;
//input  [127:0] datain ;
//output [127:0] dataout ;
//input  [0:0] reset ;
//input  [0:0] wen ;
//
////  localparam wire [1:0] __const__addr_at_upblk0  = 2'd2;
//  wire [1:0] address_tieoff;
//  wire [127:0] datain_tieoff;
//  wire [0:0] wen_tieoff;
//  //-------------------------------------------------------------
//  // Component inner_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] inner_reg__clk;
//  wire [0:0] inner_reg__ena;
//  wire [127:0] inner_reg__input_data;
//  wire [127:0] inner_reg__output_data;
//  wire [0:0] inner_reg__reset;
//
//  Register__reg_width_128__preload_value_0__sim_True inner_reg
//  (
//    .clk( inner_reg__clk ),
//    .ena( inner_reg__ena ),
//    .input_data( inner_reg__input_data ),
//    .output_data( inner_reg__output_data ),
//    .reset( inner_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component inner_reg
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:171
//  // @update
//  // def upblk0():
//  //     s.inner_reg.ena @= s.wen & (addr == s.address)
//  
//  always@(*) begin : upblk0
//    inner_reg__ena = wen & ( 2'd2 == address );
//  end
//
//  assign datain_tieoff = datain;
//  assign address_tieoff = address;
//  assign wen_tieoff = wen;
//  assign inner_reg__clk = clk;
//  assign inner_reg__reset = reset;
//  assign inner_reg__input_data = datain;
//  assign dataout = inner_reg__output_data;
//
//endmodule


// PyMTL Component BufferValue Definition
//// Full name: BufferValue__datawidth_128__addrwidth_2__addr_3__preload_value_0__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module BufferValue__d0dd965747248d2a
//(
//address,
//clk,
//datain,
//dataout,
//reset,
//wen
//);
//input  [1:0] address ;
//input  [0:0] clk ;
//input  [127:0] datain ;
//output [127:0] dataout ;
//input  [0:0] reset ;
//input  [0:0] wen ;
//
////  localparam wire [1:0] __const__addr_at_upblk0  = 2'd3;
//  wire [1:0] address_tieoff;
//  wire [127:0] datain_tieoff;
//  wire [0:0] wen_tieoff;
//  //-------------------------------------------------------------
//  // Component inner_reg
//  //-------------------------------------------------------------
//
//  wire [0:0] inner_reg__clk;
//  wire [0:0] inner_reg__ena;
//  wire [127:0] inner_reg__input_data;
//  wire [127:0] inner_reg__output_data;
//  wire [0:0] inner_reg__reset;
//
//  Register__reg_width_128__preload_value_0__sim_True inner_reg
//  (
//    .clk( inner_reg__clk ),
//    .ena( inner_reg__ena ),
//    .input_data( inner_reg__input_data ),
//    .output_data( inner_reg__output_data ),
//    .reset( inner_reg__reset )
//  );
//
//  //-------------------------------------------------------------
//  // End of component inner_reg
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:171
//  // @update
//  // def upblk0():
//  //     s.inner_reg.ena @= s.wen & (addr == s.address)
//  
//  always@(*) begin : upblk0
//    inner_reg__ena = wen & ( 2'd3 == address );
//  end
//
//  assign datain_tieoff = datain;
//  assign address_tieoff = address;
//  assign wen_tieoff = wen;
//  assign inner_reg__clk = clk;
//  assign inner_reg__reset = reset;
//  assign inner_reg__input_data = datain;
//  assign dataout = inner_reg__output_data;
//
//endmodule


// PyMTL Component Buffer Definition
//// Full name: Buffer__datawidth_128__length_4__startaddr_0__preload_vector_[]__sim_True
//// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py
//
//module Buffer__2b41dbe2efd4c881
//(
//address,
//clk,
//datain,
//dataout,
//reset,
//wen
//);
//input  [1:0] address ;
//input  [0:0] clk ;
//input  [127:0] datain ;
//output [127:0] dataout ;
//input  [0:0] reset ;
//input  [0:0] wen ;
//
////  localparam wire [0:0] __const__startaddr_at_upblk0  = 1'd0;
////  localparam wire [2:0] __const__length_at_upblk0  = 3'd4;
////  localparam wire [7:0] __const__datawidth_at_upblk0  = 8'd128;
//  wire [1:0] address_tieoff;
//  wire [511:0] data;
//  wire [127:0] datain_tieoff;
//  wire [8:0] waddress;
//  wire [0:0] wen_tieoff;
//  //-------------------------------------------------------------
//  // Component V0
//  //-------------------------------------------------------------
//
//  wire [1:0] V0__address;
//  wire [0:0] V0__clk;
//  wire [127:0] V0__datain;
//  wire [127:0] V0__dataout;
//  wire [0:0] V0__reset;
//  wire [0:0] V0__wen;
//
//  BufferValue__fadef2fe06a49a3f V0
//  (
//    .address( V0__address ),
//    .clk( V0__clk ),
//    .datain( V0__datain ),
//    .dataout( V0__dataout ),
//    .reset( V0__reset ),
//    .wen( V0__wen )
//  );
//
//  //-------------------------------------------------------------
//  // End of component V0
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component V1
//  //-------------------------------------------------------------
//
//  wire [1:0] V1__address;
//  wire [0:0] V1__clk;
//  wire [127:0] V1__datain;
//  wire [127:0] V1__dataout;
//  wire [0:0] V1__reset;
//  wire [0:0] V1__wen;
//
//  BufferValue__84ccc0090be9f2d7 V1
//  (
//    .address( V1__address ),
//    .clk( V1__clk ),
//    .datain( V1__datain ),
//    .dataout( V1__dataout ),
//    .reset( V1__reset ),
//    .wen( V1__wen )
//  );
//
//  //-------------------------------------------------------------
//  // End of component V1
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component V2
//  //-------------------------------------------------------------
//
//  wire [1:0] V2__address;
//  wire [0:0] V2__clk;
//  wire [127:0] V2__datain;
//  wire [127:0] V2__dataout;
//  wire [0:0] V2__reset;
//  wire [0:0] V2__wen;
//
//  BufferValue__883b2c9216c8b7fd V2
//  (
//    .address( V2__address ),
//    .clk( V2__clk ),
//    .datain( V2__datain ),
//    .dataout( V2__dataout ),
//    .reset( V2__reset ),
//    .wen( V2__wen )
//  );
//
//  //-------------------------------------------------------------
//  // End of component V2
//  //-------------------------------------------------------------
//
//  //-------------------------------------------------------------
//  // Component V3
//  //-------------------------------------------------------------
//
//  wire [1:0] V3__address;
//  wire [0:0] V3__clk;
//  wire [127:0] V3__datain;
//  wire [127:0] V3__dataout;
//  wire [0:0] V3__reset;
//  wire [0:0] V3__wen;
//
//  BufferValue__d0dd965747248d2a V3
//  (
//    .address( V3__address ),
//    .clk( V3__clk ),
//    .datain( V3__datain ),
//    .dataout( V3__dataout ),
//    .reset( V3__reset ),
//    .wen( V3__wen )
//  );
//
//  //-------------------------------------------------------------
//  // End of component V3
//  //-------------------------------------------------------------
//
//  // PyMTL Update Block Source
//  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_helper_classes.py:130
//  // @update
//  // def upblk0():
//  //     if ((s.waddress - startaddr)) <= (length-1):
//  //         s.dataout @= s.data[(s.waddress - startaddr) * datawidth:
//  //             (s.waddress - startaddr) * datawidth + datawidth]
//  //     else:
//  //         s.dataout @= 0
//  
//  always@(*) begin : upblk0
//    if ( ( waddress - 1'd0 ) <= ( 3'd4 - 9'd1 ) ) begin
//      dataout = data[( waddress - 1'd0 ) * 8'd128 +: 128];
//    end
//    else
//      dataout = 62'd0;
//  end
//
//  assign datain_tieoff = datain;
//  assign address_tieoff = address;
//  assign wen_tieoff = wen;
//  assign waddress[1:0] = address;
//  assign waddress[8:2] = 7'd0;
//  assign V0__clk = clk;
//  assign V0__reset = reset;
//  assign V0__datain = datain;
//  assign V0__wen = wen;
//  assign V0__address = address;
//  assign data[127:0] = V0__dataout;
//  assign V1__clk = clk;
//  assign V1__reset = reset;
//  assign V1__datain = datain;
//  assign V1__wen = wen;
//  assign V1__address = address;
//  assign data[255:128] = V1__dataout;
//  assign V2__clk = clk;
//  assign V2__reset = reset;
//  assign V2__datain = datain;
//  assign V2__wen = wen;
//  assign V2__address = address;
//  assign data[383:256] = V2__dataout;
//  assign V3__clk = clk;
//  assign V3__reset = reset;
//  assign V3__datain = datain;
//  assign V3__wen = wen;
//  assign V3__address = address;
//  assign data[511:384] = V3__dataout;
//
//endmodule


// PyMTL Component HWB_Sim Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

//module ml_block_weights
//(
//clk,
//clk_portain,
//clk_portaout,
//clr0,
//clr1,
//ena0,
//ena1,
//ena2,
//ena3,
//portaaddr,
//portaaddrstall,
//portabyteenamasks,
//portadatain,
//portadataout,
//portare,
//portawe,
//reset
//);
//input  [0:0] clk ;
//input  [0:0] clk_portain ;
//input  [0:0] clk_portaout ;
//input  [0:0] clr0 ;
//input  [0:0] clr1 ;
//input  [0:0] ena0 ;
//input  [0:0] ena1 ;
//input  [0:0] ena2 ;
//input  [0:0] ena3 ;
//input  [1:0] portaaddr ;
//input  [0:0] portaaddrstall ;
//input  [0:0] portabyteenamasks ;
//input  [127:0] portadatain ;
//output [127:0] portadataout ;
//input  [0:0] portare ;
//input  [0:0] portawe ;
//input  [0:0] reset ;
//
//  wire [0:0] clk_portain_tieoff;
//  wire [0:0] clk_portaout_tieoff;
//  wire [0:0] clr0_tieoff;
//  wire [0:0] clr1_tieoff;
//  wire [0:0] ena0_tieoff;
//  wire [0:0] ena1_tieoff;
//  wire [0:0] ena2_tieoff;
//  wire [0:0] ena3_tieoff;
//  wire [1:0] portaaddr_tieoff;
//  wire [0:0] portaaddrstall_tieoff;
//  wire [0:0] portabyteenamasks_tieoff;
//  wire [127:0] portadatain_tieoff;
//  wire [0:0] portare_tieoff;
//  wire [0:0] portawe_tieoff;
//  //-------------------------------------------------------------
//  // Component sim_model_inst0
//  //-------------------------------------------------------------
//
//  wire [1:0] sim_model_inst0__address;
//  wire [0:0] sim_model_inst0__clk;
//  wire [127:0] sim_model_inst0__datain;
//  wire [127:0] sim_model_inst0__dataout;
//  wire [0:0] sim_model_inst0__reset;
//  wire [0:0] sim_model_inst0__wen;
//
//  Buffer__2b41dbe2efd4c881 sim_model_inst0
//  (
//    .address( sim_model_inst0__address ),
//    .clk( sim_model_inst0__clk ),
//    .datain( sim_model_inst0__datain ),
//    .dataout( sim_model_inst0__dataout ),
//    .reset( sim_model_inst0__reset ),
//    .wen( sim_model_inst0__wen )
//  );
//
//  //-------------------------------------------------------------
//  // End of component sim_model_inst0
//  //-------------------------------------------------------------
//
//  assign clk_portain_tieoff = clk_portain;
//  assign clk_portaout_tieoff = clk_portaout;
//  assign portare_tieoff = portare;
//  assign clr1_tieoff = clr1;
//  assign clr0_tieoff = clr0;
//  assign ena0_tieoff = ena0;
//  assign ena1_tieoff = ena1;
//  assign ena2_tieoff = ena2;
//  assign ena3_tieoff = ena3;
//  assign portaaddrstall_tieoff = portaaddrstall;
//  assign portabyteenamasks_tieoff = portabyteenamasks;
//  assign portawe_tieoff = portawe;
//  assign portaaddr_tieoff = portaaddr;
//  assign portadatain_tieoff = portadatain;
//  assign sim_model_inst0__clk = clk;
//  assign sim_model_inst0__reset = reset;
//  assign sim_model_inst0__datain = portadatain;
//  assign portadataout = sim_model_inst0__dataout;
//  assign sim_model_inst0__address = portaaddr;
//  assign sim_model_inst0__wen = portawe;
//
//endmodule


// PyMTL Component HWB_Wrapper Definition
// Full name: HWB_Wrapper__spec_{'block_name': 'ml_block_weights', 'simulation_model': 'Buffer', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 2, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 128, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 128, 'direction': 'out', 'type': 'DATA'}]}__count_2__name__v1__projection_empty
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module HWB_Wrapper__ceb5e7dfa7271575
(
clk,
clk_portain,
clk_portaout,
clr0,
clr1,
ena0,
ena1,
ena2,
ena3,
portaaddr,
portaaddrstall,
portabyteenamasks,
portadatain_0,
portadatain_1,
portadataout_0,
portadataout_1,
portare,
portawe_0,
portawe_1,
reset
);
input  [0:0] clk ;
input  [0:0] clk_portain ;
input  [0:0] clk_portaout ;
input  [0:0] clr0 ;
input  [0:0] clr1 ;
input  [0:0] ena0 ;
input  [0:0] ena1 ;
input  [0:0] ena2 ;
input  [0:0] ena3 ;
input  [1:0] portaaddr ;
input  [0:0] portaaddrstall ;
input  [0:0] portabyteenamasks ;
input  [127:0] portadatain_0 ;
input  [127:0] portadatain_1 ;
output [127:0] portadataout_0 ;
output [127:0] portadataout_1 ;
input  [0:0] portare ;
input  [0:0] portawe_0 ;
input  [0:0] portawe_1 ;
input  [0:0] reset ;

  wire [0:0] clk_portain_tieoff;
  wire [0:0] clk_portaout_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] clr0_tieoff;
  wire [0:0] clr1_tieoff;
  wire [0:0] ena0_tieoff;
  wire [0:0] ena1_tieoff;
  wire [0:0] ena2_tieoff;
  wire [0:0] ena3_tieoff;
  wire [1:0] portaaddr_tieoff;
  wire [0:0] portaaddrstall_tieoff;
  wire [0:0] portabyteenamasks_tieoff;
  wire [127:0] portadatain_0_tieoff;
  wire [127:0] portadatain_1_tieoff;
  wire [0:0] portare_tieoff;
  wire [0:0] portawe_0_tieoff;
  wire [0:0] portawe_1_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component ml_block_weights_inst_0
  //-------------------------------------------------------------

  wire [0:0] ml_block_weights_inst_0__clk;
  wire [0:0] ml_block_weights_inst_0__clk_portain;
  wire [0:0] ml_block_weights_inst_0__clk_portaout;
  wire [0:0] ml_block_weights_inst_0__clr0;
  wire [0:0] ml_block_weights_inst_0__clr1;
  wire [0:0] ml_block_weights_inst_0__ena0;
  wire [0:0] ml_block_weights_inst_0__ena1;
  wire [0:0] ml_block_weights_inst_0__ena2;
  wire [0:0] ml_block_weights_inst_0__ena3;
  wire [1:0] ml_block_weights_inst_0__portaaddr;
  wire [0:0] ml_block_weights_inst_0__portaaddrstall;
  wire [0:0] ml_block_weights_inst_0__portabyteenamasks;
  wire [127:0] ml_block_weights_inst_0__portadatain;
  wire [127:0] ml_block_weights_inst_0__portadataout;
  wire [0:0] ml_block_weights_inst_0__portare;
  wire [0:0] ml_block_weights_inst_0__portawe;
  wire [0:0] ml_block_weights_inst_0__reset;

  ml_block_weights ml_block_weights_inst_0
  (
//    .clk( ml_block_weights_inst_0__clk ),
    .clk_portain( ml_block_weights_inst_0__clk_portain ),
    .clk_portaout( ml_block_weights_inst_0__clk_portaout ),
    .clr0( ml_block_weights_inst_0__clr0 ),
    .clr1( ml_block_weights_inst_0__clr1 ),
    .ena0( ml_block_weights_inst_0__ena0 ),
    .ena1( ml_block_weights_inst_0__ena1 ),
    .ena2( ml_block_weights_inst_0__ena2 ),
    .ena3( ml_block_weights_inst_0__ena3 ),
    .portaaddr( ml_block_weights_inst_0__portaaddr ),
    .portaaddrstall( ml_block_weights_inst_0__portaaddrstall ),
    .portabyteenamasks( ml_block_weights_inst_0__portabyteenamasks ),
    .portadatain( ml_block_weights_inst_0__portadatain ),
    .portadataout( ml_block_weights_inst_0__portadataout ),
    .portare( ml_block_weights_inst_0__portare ),
    .portawe( ml_block_weights_inst_0__portawe )
//    .reset( ml_block_weights_inst_0__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_weights_inst_0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component ml_block_weights_inst_1
  //-------------------------------------------------------------

  wire [0:0] ml_block_weights_inst_1__clk;
  wire [0:0] ml_block_weights_inst_1__clk_portain;
  wire [0:0] ml_block_weights_inst_1__clk_portaout;
  wire [0:0] ml_block_weights_inst_1__clr0;
  wire [0:0] ml_block_weights_inst_1__clr1;
  wire [0:0] ml_block_weights_inst_1__ena0;
  wire [0:0] ml_block_weights_inst_1__ena1;
  wire [0:0] ml_block_weights_inst_1__ena2;
  wire [0:0] ml_block_weights_inst_1__ena3;
  wire [1:0] ml_block_weights_inst_1__portaaddr;
  wire [0:0] ml_block_weights_inst_1__portaaddrstall;
  wire [0:0] ml_block_weights_inst_1__portabyteenamasks;
  wire [127:0] ml_block_weights_inst_1__portadatain;
  wire [127:0] ml_block_weights_inst_1__portadataout;
  wire [0:0] ml_block_weights_inst_1__portare;
  wire [0:0] ml_block_weights_inst_1__portawe;
  wire [0:0] ml_block_weights_inst_1__reset;

  ml_block_weights ml_block_weights_inst_1
  (
//    .clk( ml_block_weights_inst_1__clk ),
    .clk_portain( ml_block_weights_inst_1__clk_portain ),
    .clk_portaout( ml_block_weights_inst_1__clk_portaout ),
    .clr0( ml_block_weights_inst_1__clr0 ),
    .clr1( ml_block_weights_inst_1__clr1 ),
    .ena0( ml_block_weights_inst_1__ena0 ),
    .ena1( ml_block_weights_inst_1__ena1 ),
    .ena2( ml_block_weights_inst_1__ena2 ),
    .ena3( ml_block_weights_inst_1__ena3 ),
    .portaaddr( ml_block_weights_inst_1__portaaddr ),
    .portaaddrstall( ml_block_weights_inst_1__portaaddrstall ),
    .portabyteenamasks( ml_block_weights_inst_1__portabyteenamasks ),
    .portadatain( ml_block_weights_inst_1__portadatain ),
    .portadataout( ml_block_weights_inst_1__portadataout ),
    .portare( ml_block_weights_inst_1__portare ),
    .portawe( ml_block_weights_inst_1__portawe )
//    .reset( ml_block_weights_inst_1__reset )
  );

  //-------------------------------------------------------------
  // End of component ml_block_weights_inst_1
  //-------------------------------------------------------------

  assign ml_block_weights_inst_0__clk = clk;
  assign ml_block_weights_inst_0__reset = reset;
  assign clk_portain_tieoff = clk_portain;
  assign ml_block_weights_inst_0__clk_portain = clk_portain;
  assign clk_portaout_tieoff = clk_portaout;
  assign ml_block_weights_inst_0__clk_portaout = clk_portaout;
  assign portare_tieoff = portare;
  assign ml_block_weights_inst_0__portare = portare;
  assign clr1_tieoff = clr1;
  assign ml_block_weights_inst_0__clr1 = clr1;
  assign clr0_tieoff = clr0;
  assign ml_block_weights_inst_0__clr0 = clr0;
  assign ena0_tieoff = ena0;
  assign ml_block_weights_inst_0__ena0 = ena0;
  assign ena1_tieoff = ena1;
  assign ml_block_weights_inst_0__ena1 = ena1;
  assign ena2_tieoff = ena2;
  assign ml_block_weights_inst_0__ena2 = ena2;
  assign ena3_tieoff = ena3;
  assign ml_block_weights_inst_0__ena3 = ena3;
  assign portaaddrstall_tieoff = portaaddrstall;
  assign ml_block_weights_inst_0__portaaddrstall = portaaddrstall;
  assign portabyteenamasks_tieoff = portabyteenamasks;
  assign ml_block_weights_inst_0__portabyteenamasks = portabyteenamasks;
  assign portawe_0_tieoff = portawe_0;
  assign ml_block_weights_inst_0__portawe = portawe_0;
  assign portaaddr_tieoff = portaaddr;
  assign ml_block_weights_inst_0__portaaddr = portaaddr;
  assign portadatain_0_tieoff = portadatain_0;
  assign ml_block_weights_inst_0__portadatain = portadatain_0;
  assign portadataout_0 = ml_block_weights_inst_0__portadataout;
  assign ml_block_weights_inst_1__clk = clk;
  assign ml_block_weights_inst_1__reset = reset;
  assign ml_block_weights_inst_1__clk_portain = clk_portain;
  assign ml_block_weights_inst_1__clk_portaout = clk_portaout;
  assign ml_block_weights_inst_1__portare = portare;
  assign ml_block_weights_inst_1__clr1 = clr1;
  assign ml_block_weights_inst_1__clr0 = clr0;
  assign ml_block_weights_inst_1__ena0 = ena0;
  assign ml_block_weights_inst_1__ena1 = ena1;
  assign ml_block_weights_inst_1__ena2 = ena2;
  assign ml_block_weights_inst_1__ena3 = ena3;
  assign ml_block_weights_inst_1__portaaddrstall = portaaddrstall;
  assign ml_block_weights_inst_1__portabyteenamasks = portabyteenamasks;
  assign portawe_1_tieoff = portawe_1;
  assign ml_block_weights_inst_1__portawe = portawe_1;
  assign ml_block_weights_inst_1__portaaddr = portaaddr;
  assign portadatain_1_tieoff = portadatain_1;
  assign ml_block_weights_inst_1__portadatain = portadatain_1;
  assign portadataout_1 = ml_block_weights_inst_1__portadataout;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component Datapath Definition
// Full name: Datapath__mlb_spec_{'block_name': 'ml_block', 'simulation_model': 'MLB', 'MAC_info': {'num_units': 12, 'data_widths': {'W': 8, 'I': 8, 'O': 32}}, 'ports': [{'name': 'a_en', 'width': 1, 'direction': 'in', 'type': 'W_EN'}, {'name': 'b_en', 'width': 1, 'direction': 'in', 'type': 'I_EN'}, {'name': 'hp_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'acc_en', 'width': 1, 'direction': 'in', 'type': 'ACC_EN'}, {'name': 'config_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'config_in', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'a', 'width': 32, 'direction': 'in', 'type': 'W'}, {'name': 'b_cas_in', 'width': 24, 'direction': 'in', 'type': 'I'}, {'name': 'res_cas_in', 'width': 128, 'direction': 'in', 'type': 'O'}, {'name': 'b_cas_out', 'width': 24, 'direction': 'out', 'type': 'I'}, {'name': 'a_out', 'width': 32, 'direction': 'out', 'type': 'W'}, {'name': 'res_cas_out', 'width': 128, 'direction': 'out', 'type': 'O'}, {'name': 'clk', 'width': 1, 'direction': 'in', 'type': 'CLK'}, {'name': 'reset', 'width': 1, 'direction': 'in', 'type': 'RESET'}]}__wb_spec_{'block_name': 'ml_block_weights', 'simulation_model': 'Buffer', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 2, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 128, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 128, 'direction': 'out', 'type': 'DATA'}]}__ib_spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__ob_spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__proj_spec_{'name': 'test_proj', 'outer_projection': {'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}, 'inner_projection': {'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}, 'temporal_projection': {'URW': {'value': 1}, 'URN': {'value': 1}, 'UE': {'value': 1}, 'UB': {'value': 1}, 'UG': {'value': 1}}, 'activation_function': 'RELU', 'stream_info': {'W': 8, 'I': 8, 'O': 32}}
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/module_classes.py

module Datapath__f43943945aa73637
(
clk,
input_act_modules_clk_portain_top,
input_act_modules_clk_portaout_top,
input_act_modules_clr0_top,
input_act_modules_clr1_top,
input_act_modules_ena0_top,
input_act_modules_ena1_top,
input_act_modules_ena2_top,
input_act_modules_ena3_top,
input_act_modules_portaaddr_top,
input_act_modules_portaaddrstall_top,
input_act_modules_portabyteenamasks_top,
input_act_modules_portare_top,
input_act_modules_portawe_0_top,
input_act_modules_portawe_1_top,
input_datain,
mlb_modules_a_en_top,
mlb_modules_acc_en_top,
mlb_modules_b_en_top,
mlb_modules_config_en_top,
mlb_modules_config_in_top,
mlb_modules_hp_en_top,
output_act_modules_clk_portain_top,
output_act_modules_clk_portaout_top,
output_act_modules_clr0_top,
output_act_modules_clr1_top,
output_act_modules_ena0_top,
output_act_modules_ena1_top,
output_act_modules_ena2_top,
output_act_modules_ena3_top,
output_act_modules_portaaddr_top,
output_act_modules_portaaddrstall_top,
output_act_modules_portabyteenamasks_top,
output_act_modules_portare_top,
output_act_modules_portawe_0_top,
output_act_modules_portawe_1_top,
output_act_modules_portawe_2_top,
output_act_modules_portawe_3_top,
portadataout_0,
portadataout_1,
portadataout_2,
portadataout_3,
reset,
weight_datain,
weight_modules_clk_portain_top,
weight_modules_clk_portaout_top,
weight_modules_clr0_top,
weight_modules_clr1_top,
weight_modules_ena0_top,
weight_modules_ena1_top,
weight_modules_ena2_top,
weight_modules_ena3_top,
weight_modules_portaaddr_top,
weight_modules_portaaddrstall_top,
weight_modules_portabyteenamasks_top,
weight_modules_portare_top,
weight_modules_portawe_0_top,
weight_modules_portawe_1_top
);
input  [0:0] clk ;
input  [0:0] input_act_modules_clk_portain_top ;
input  [0:0] input_act_modules_clk_portaout_top ;
input  [0:0] input_act_modules_clr0_top ;
input  [0:0] input_act_modules_clr1_top ;
input  [0:0] input_act_modules_ena0_top ;
input  [0:0] input_act_modules_ena1_top ;
input  [0:0] input_act_modules_ena2_top ;
input  [0:0] input_act_modules_ena3_top ;
input  [7:0] input_act_modules_portaaddr_top ;
input  [0:0] input_act_modules_portaaddrstall_top ;
input  [0:0] input_act_modules_portabyteenamasks_top ;
input  [0:0] input_act_modules_portare_top ;
input  [0:0] input_act_modules_portawe_0_top ;
input  [0:0] input_act_modules_portawe_1_top ;
input  [31:0] input_datain ;
input  [0:0] mlb_modules_a_en_top ;
input  [0:0] mlb_modules_acc_en_top ;
input  [0:0] mlb_modules_b_en_top ;
input  [0:0] mlb_modules_config_en_top ;
input  [0:0] mlb_modules_config_in_top ;
input  [0:0] mlb_modules_hp_en_top ;
input  [0:0] output_act_modules_clk_portain_top ;
input  [0:0] output_act_modules_clk_portaout_top ;
input  [0:0] output_act_modules_clr0_top ;
input  [0:0] output_act_modules_clr1_top ;
input  [0:0] output_act_modules_ena0_top ;
input  [0:0] output_act_modules_ena1_top ;
input  [0:0] output_act_modules_ena2_top ;
input  [0:0] output_act_modules_ena3_top ;
input  [7:0] output_act_modules_portaaddr_top ;
input  [0:0] output_act_modules_portaaddrstall_top ;
input  [0:0] output_act_modules_portabyteenamasks_top ;
input  [0:0] output_act_modules_portare_top ;
input  [0:0] output_act_modules_portawe_0_top ;
input  [0:0] output_act_modules_portawe_1_top ;
input  [0:0] output_act_modules_portawe_2_top ;
input  [0:0] output_act_modules_portawe_3_top ;
output [31:0] portadataout_0 ;
output [31:0] portadataout_1 ;
output [31:0] portadataout_2 ;
output [31:0] portadataout_3 ;
input  [0:0] reset ;
input  [127:0] weight_datain ;
input  [0:0] weight_modules_clk_portain_top ;
input  [0:0] weight_modules_clk_portaout_top ;
input  [0:0] weight_modules_clr0_top ;
input  [0:0] weight_modules_clr1_top ;
input  [0:0] weight_modules_ena0_top ;
input  [0:0] weight_modules_ena1_top ;
input  [0:0] weight_modules_ena2_top ;
input  [0:0] weight_modules_ena3_top ;
input  [1:0] weight_modules_portaaddr_top ;
input  [0:0] weight_modules_portaaddrstall_top ;
input  [0:0] weight_modules_portabyteenamasks_top ;
input  [0:0] weight_modules_portare_top ;
input  [0:0] weight_modules_portawe_0_top ;
input  [0:0] weight_modules_portawe_1_top ;

  wire [0:0] input_act_modules_clk_portain_top_tieoff;
  wire [0:0] input_act_modules_clk_portaout_top_tieoff;
  wire [0:0] input_act_modules_clr0_top_tieoff;
  wire [0:0] input_act_modules_clr1_top_tieoff;
  wire [0:0] input_act_modules_ena0_top_tieoff;
  wire [0:0] input_act_modules_ena1_top_tieoff;
  wire [0:0] input_act_modules_ena2_top_tieoff;
  wire [0:0] input_act_modules_ena3_top_tieoff;
  wire [7:0] input_act_modules_portaaddr_top_tieoff;
  wire [0:0] input_act_modules_portaaddrstall_top_tieoff;
  wire [0:0] input_act_modules_portabyteenamasks_top_tieoff;
  wire [0:0] input_act_modules_portare_top_tieoff;
  wire [0:0] input_act_modules_portawe_0_top_tieoff;
  wire [0:0] input_act_modules_portawe_1_top_tieoff;
  wire [31:0] input_datain_tieoff;
  wire [0:0] mlb_modules_a_en_top_tieoff;
  wire [0:0] mlb_modules_acc_en_top_tieoff;
  wire [0:0] mlb_modules_b_en_top_tieoff;
  wire [0:0] mlb_modules_config_en_top_tieoff;
  wire [0:0] mlb_modules_config_in_top_tieoff;
  wire [0:0] mlb_modules_hp_en_top_tieoff;
  wire [0:0] output_act_modules_clk_portain_top_tieoff;
  wire [0:0] output_act_modules_clk_portaout_top_tieoff;
  wire [0:0] output_act_modules_clr0_top_tieoff;
  wire [0:0] output_act_modules_clr1_top_tieoff;
  wire [0:0] output_act_modules_ena0_top_tieoff;
  wire [0:0] output_act_modules_ena1_top_tieoff;
  wire [0:0] output_act_modules_ena2_top_tieoff;
  wire [0:0] output_act_modules_ena3_top_tieoff;
  wire [7:0] output_act_modules_portaaddr_top_tieoff;
  wire [0:0] output_act_modules_portaaddrstall_top_tieoff;
  wire [0:0] output_act_modules_portabyteenamasks_top_tieoff;
  wire [0:0] output_act_modules_portare_top_tieoff;
  wire [0:0] output_act_modules_portawe_0_top_tieoff;
  wire [0:0] output_act_modules_portawe_1_top_tieoff;
  wire [0:0] output_act_modules_portawe_2_top_tieoff;
  wire [0:0] output_act_modules_portawe_3_top_tieoff;
  wire [127:0] weight_datain_tieoff;
  wire [0:0] weight_modules_clk_portain_top_tieoff;
  wire [0:0] weight_modules_clk_portaout_top_tieoff;
  wire [0:0] weight_modules_clr0_top_tieoff;
  wire [0:0] weight_modules_clr1_top_tieoff;
  wire [0:0] weight_modules_ena0_top_tieoff;
  wire [0:0] weight_modules_ena1_top_tieoff;
  wire [0:0] weight_modules_ena2_top_tieoff;
  wire [0:0] weight_modules_ena3_top_tieoff;
  wire [1:0] weight_modules_portaaddr_top_tieoff;
  wire [0:0] weight_modules_portaaddrstall_top_tieoff;
  wire [0:0] weight_modules_portabyteenamasks_top_tieoff;
  wire [0:0] weight_modules_portare_top_tieoff;
  wire [0:0] weight_modules_portawe_0_top_tieoff;
  wire [0:0] weight_modules_portawe_1_top_tieoff;
  //-------------------------------------------------------------
  // Component activation_function_modules
  //-------------------------------------------------------------

  wire [31:0] activation_function_modules__activation_function_in_0;
  wire [31:0] activation_function_modules__activation_function_in_1;
  wire [31:0] activation_function_modules__activation_function_in_10;
  wire [31:0] activation_function_modules__activation_function_in_11;
  wire [31:0] activation_function_modules__activation_function_in_12;
  wire [31:0] activation_function_modules__activation_function_in_13;
  wire [31:0] activation_function_modules__activation_function_in_14;
  wire [31:0] activation_function_modules__activation_function_in_15;
  wire [31:0] activation_function_modules__activation_function_in_2;
  wire [31:0] activation_function_modules__activation_function_in_3;
  wire [31:0] activation_function_modules__activation_function_in_4;
  wire [31:0] activation_function_modules__activation_function_in_5;
  wire [31:0] activation_function_modules__activation_function_in_6;
  wire [31:0] activation_function_modules__activation_function_in_7;
  wire [31:0] activation_function_modules__activation_function_in_8;
  wire [31:0] activation_function_modules__activation_function_in_9;
  wire [7:0] activation_function_modules__activation_function_out_0;
  wire [7:0] activation_function_modules__activation_function_out_1;
  wire [7:0] activation_function_modules__activation_function_out_10;
  wire [7:0] activation_function_modules__activation_function_out_11;
  wire [7:0] activation_function_modules__activation_function_out_12;
  wire [7:0] activation_function_modules__activation_function_out_13;
  wire [7:0] activation_function_modules__activation_function_out_14;
  wire [7:0] activation_function_modules__activation_function_out_15;
  wire [7:0] activation_function_modules__activation_function_out_2;
  wire [7:0] activation_function_modules__activation_function_out_3;
  wire [7:0] activation_function_modules__activation_function_out_4;
  wire [7:0] activation_function_modules__activation_function_out_5;
  wire [7:0] activation_function_modules__activation_function_out_6;
  wire [7:0] activation_function_modules__activation_function_out_7;
  wire [7:0] activation_function_modules__activation_function_out_8;
  wire [7:0] activation_function_modules__activation_function_out_9;
  wire [0:0] activation_function_modules__clk;
  wire [0:0] activation_function_modules__reset;

  ActivationWrapper__11a85bfd35a404ba activation_function_modules
  (
    .activation_function_in_0( activation_function_modules__activation_function_in_0 ),
    .activation_function_in_1( activation_function_modules__activation_function_in_1 ),
    .activation_function_in_10( activation_function_modules__activation_function_in_10 ),
    .activation_function_in_11( activation_function_modules__activation_function_in_11 ),
    .activation_function_in_12( activation_function_modules__activation_function_in_12 ),
    .activation_function_in_13( activation_function_modules__activation_function_in_13 ),
    .activation_function_in_14( activation_function_modules__activation_function_in_14 ),
    .activation_function_in_15( activation_function_modules__activation_function_in_15 ),
    .activation_function_in_2( activation_function_modules__activation_function_in_2 ),
    .activation_function_in_3( activation_function_modules__activation_function_in_3 ),
    .activation_function_in_4( activation_function_modules__activation_function_in_4 ),
    .activation_function_in_5( activation_function_modules__activation_function_in_5 ),
    .activation_function_in_6( activation_function_modules__activation_function_in_6 ),
    .activation_function_in_7( activation_function_modules__activation_function_in_7 ),
    .activation_function_in_8( activation_function_modules__activation_function_in_8 ),
    .activation_function_in_9( activation_function_modules__activation_function_in_9 ),
    .activation_function_out_0( activation_function_modules__activation_function_out_0 ),
    .activation_function_out_1( activation_function_modules__activation_function_out_1 ),
    .activation_function_out_10( activation_function_modules__activation_function_out_10 ),
    .activation_function_out_11( activation_function_modules__activation_function_out_11 ),
    .activation_function_out_12( activation_function_modules__activation_function_out_12 ),
    .activation_function_out_13( activation_function_modules__activation_function_out_13 ),
    .activation_function_out_14( activation_function_modules__activation_function_out_14 ),
    .activation_function_out_15( activation_function_modules__activation_function_out_15 ),
    .activation_function_out_2( activation_function_modules__activation_function_out_2 ),
    .activation_function_out_3( activation_function_modules__activation_function_out_3 ),
    .activation_function_out_4( activation_function_modules__activation_function_out_4 ),
    .activation_function_out_5( activation_function_modules__activation_function_out_5 ),
    .activation_function_out_6( activation_function_modules__activation_function_out_6 ),
    .activation_function_out_7( activation_function_modules__activation_function_out_7 ),
    .activation_function_out_8( activation_function_modules__activation_function_out_8 ),
    .activation_function_out_9( activation_function_modules__activation_function_out_9 ),
    .clk( activation_function_modules__clk ),
    .reset( activation_function_modules__reset )
  );

  //-------------------------------------------------------------
  // End of component activation_function_modules
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component input_act_modules
  //-------------------------------------------------------------

  wire [0:0] input_act_modules__clk;
  wire [0:0] input_act_modules__clk_portain;
  wire [0:0] input_act_modules__clk_portaout;
  wire [0:0] input_act_modules__clr0;
  wire [0:0] input_act_modules__clr1;
  wire [0:0] input_act_modules__ena0;
  wire [0:0] input_act_modules__ena1;
  wire [0:0] input_act_modules__ena2;
  wire [0:0] input_act_modules__ena3;
  wire [7:0] input_act_modules__portaaddr;
  wire [0:0] input_act_modules__portaaddrstall;
  wire [0:0] input_act_modules__portabyteenamasks;
  wire [31:0] input_act_modules__portadatain_0;
  wire [31:0] input_act_modules__portadatain_1;
  wire [31:0] input_act_modules__portadataout_0;
  wire [31:0] input_act_modules__portadataout_1;
  wire [0:0] input_act_modules__portare;
  wire [0:0] input_act_modules__portawe_0;
  wire [0:0] input_act_modules__portawe_1;
  wire [0:0] input_act_modules__reset;

  HWB_Wrapper__ec4a40ddf7e4f27f input_act_modules
  (
    .clk( input_act_modules__clk ),
    .clk_portain( input_act_modules__clk_portain ),
    .clk_portaout( input_act_modules__clk_portaout ),
    .clr0( input_act_modules__clr0 ),
    .clr1( input_act_modules__clr1 ),
    .ena0( input_act_modules__ena0 ),
    .ena1( input_act_modules__ena1 ),
    .ena2( input_act_modules__ena2 ),
    .ena3( input_act_modules__ena3 ),
    .portaaddr( input_act_modules__portaaddr ),
    .portaaddrstall( input_act_modules__portaaddrstall ),
    .portabyteenamasks( input_act_modules__portabyteenamasks ),
    .portadatain_0( input_act_modules__portadatain_0 ),
    .portadatain_1( input_act_modules__portadatain_1 ),
    .portadataout_0( input_act_modules__portadataout_0 ),
    .portadataout_1( input_act_modules__portadataout_1 ),
    .portare( input_act_modules__portare ),
    .portawe_0( input_act_modules__portawe_0 ),
    .portawe_1( input_act_modules__portawe_1 ),
    .reset( input_act_modules__reset )
  );

  //-------------------------------------------------------------
  // End of component input_act_modules
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component input_interconnect
  //-------------------------------------------------------------

  wire [0:0] input_interconnect__clk;
  wire [31:0] input_interconnect__inputs_from_buffer_0;
  wire [31:0] input_interconnect__inputs_from_buffer_1;
  wire [23:0] input_interconnect__inputs_from_mlb_0;
  wire [23:0] input_interconnect__inputs_from_mlb_1;
  wire [23:0] input_interconnect__inputs_from_mlb_10;
  wire [23:0] input_interconnect__inputs_from_mlb_11;
  wire [23:0] input_interconnect__inputs_from_mlb_12;
  wire [23:0] input_interconnect__inputs_from_mlb_13;
  wire [23:0] input_interconnect__inputs_from_mlb_14;
  wire [23:0] input_interconnect__inputs_from_mlb_15;
  wire [23:0] input_interconnect__inputs_from_mlb_16;
  wire [23:0] input_interconnect__inputs_from_mlb_17;
  wire [23:0] input_interconnect__inputs_from_mlb_18;
  wire [23:0] input_interconnect__inputs_from_mlb_19;
  wire [23:0] input_interconnect__inputs_from_mlb_2;
  wire [23:0] input_interconnect__inputs_from_mlb_20;
  wire [23:0] input_interconnect__inputs_from_mlb_21;
  wire [23:0] input_interconnect__inputs_from_mlb_22;
  wire [23:0] input_interconnect__inputs_from_mlb_23;
  wire [23:0] input_interconnect__inputs_from_mlb_24;
  wire [23:0] input_interconnect__inputs_from_mlb_25;
  wire [23:0] input_interconnect__inputs_from_mlb_26;
  wire [23:0] input_interconnect__inputs_from_mlb_27;
  wire [23:0] input_interconnect__inputs_from_mlb_28;
  wire [23:0] input_interconnect__inputs_from_mlb_29;
  wire [23:0] input_interconnect__inputs_from_mlb_3;
  wire [23:0] input_interconnect__inputs_from_mlb_30;
  wire [23:0] input_interconnect__inputs_from_mlb_31;
  wire [23:0] input_interconnect__inputs_from_mlb_4;
  wire [23:0] input_interconnect__inputs_from_mlb_5;
  wire [23:0] input_interconnect__inputs_from_mlb_6;
  wire [23:0] input_interconnect__inputs_from_mlb_7;
  wire [23:0] input_interconnect__inputs_from_mlb_8;
  wire [23:0] input_interconnect__inputs_from_mlb_9;
  wire [31:0] input_interconnect__outputs_to_buffer_0;
  wire [31:0] input_interconnect__outputs_to_buffer_1;
  wire [23:0] input_interconnect__outputs_to_mlb_0;
  wire [23:0] input_interconnect__outputs_to_mlb_1;
  wire [23:0] input_interconnect__outputs_to_mlb_10;
  wire [23:0] input_interconnect__outputs_to_mlb_11;
  wire [23:0] input_interconnect__outputs_to_mlb_12;
  wire [23:0] input_interconnect__outputs_to_mlb_13;
  wire [23:0] input_interconnect__outputs_to_mlb_14;
  wire [23:0] input_interconnect__outputs_to_mlb_15;
  wire [23:0] input_interconnect__outputs_to_mlb_16;
  wire [23:0] input_interconnect__outputs_to_mlb_17;
  wire [23:0] input_interconnect__outputs_to_mlb_18;
  wire [23:0] input_interconnect__outputs_to_mlb_19;
  wire [23:0] input_interconnect__outputs_to_mlb_2;
  wire [23:0] input_interconnect__outputs_to_mlb_20;
  wire [23:0] input_interconnect__outputs_to_mlb_21;
  wire [23:0] input_interconnect__outputs_to_mlb_22;
  wire [23:0] input_interconnect__outputs_to_mlb_23;
  wire [23:0] input_interconnect__outputs_to_mlb_24;
  wire [23:0] input_interconnect__outputs_to_mlb_25;
  wire [23:0] input_interconnect__outputs_to_mlb_26;
  wire [23:0] input_interconnect__outputs_to_mlb_27;
  wire [23:0] input_interconnect__outputs_to_mlb_28;
  wire [23:0] input_interconnect__outputs_to_mlb_29;
  wire [23:0] input_interconnect__outputs_to_mlb_3;
  wire [23:0] input_interconnect__outputs_to_mlb_30;
  wire [23:0] input_interconnect__outputs_to_mlb_31;
  wire [23:0] input_interconnect__outputs_to_mlb_4;
  wire [23:0] input_interconnect__outputs_to_mlb_5;
  wire [23:0] input_interconnect__outputs_to_mlb_6;
  wire [23:0] input_interconnect__outputs_to_mlb_7;
  wire [23:0] input_interconnect__outputs_to_mlb_8;
  wire [23:0] input_interconnect__outputs_to_mlb_9;
  wire [0:0] input_interconnect__reset;

  InputInterconnect__4f39730aa7415db6 input_interconnect
  (
    .clk( input_interconnect__clk ),
    .inputs_from_buffer_0( input_interconnect__inputs_from_buffer_0 ),
    .inputs_from_buffer_1( input_interconnect__inputs_from_buffer_1 ),
    .inputs_from_mlb_0( input_interconnect__inputs_from_mlb_0 ),
    .inputs_from_mlb_1( input_interconnect__inputs_from_mlb_1 ),
    .inputs_from_mlb_10( input_interconnect__inputs_from_mlb_10 ),
    .inputs_from_mlb_11( input_interconnect__inputs_from_mlb_11 ),
    .inputs_from_mlb_12( input_interconnect__inputs_from_mlb_12 ),
    .inputs_from_mlb_13( input_interconnect__inputs_from_mlb_13 ),
    .inputs_from_mlb_14( input_interconnect__inputs_from_mlb_14 ),
    .inputs_from_mlb_15( input_interconnect__inputs_from_mlb_15 ),
    .inputs_from_mlb_16( input_interconnect__inputs_from_mlb_16 ),
    .inputs_from_mlb_17( input_interconnect__inputs_from_mlb_17 ),
    .inputs_from_mlb_18( input_interconnect__inputs_from_mlb_18 ),
    .inputs_from_mlb_19( input_interconnect__inputs_from_mlb_19 ),
    .inputs_from_mlb_2( input_interconnect__inputs_from_mlb_2 ),
    .inputs_from_mlb_20( input_interconnect__inputs_from_mlb_20 ),
    .inputs_from_mlb_21( input_interconnect__inputs_from_mlb_21 ),
    .inputs_from_mlb_22( input_interconnect__inputs_from_mlb_22 ),
    .inputs_from_mlb_23( input_interconnect__inputs_from_mlb_23 ),
    .inputs_from_mlb_24( input_interconnect__inputs_from_mlb_24 ),
    .inputs_from_mlb_25( input_interconnect__inputs_from_mlb_25 ),
    .inputs_from_mlb_26( input_interconnect__inputs_from_mlb_26 ),
    .inputs_from_mlb_27( input_interconnect__inputs_from_mlb_27 ),
    .inputs_from_mlb_28( input_interconnect__inputs_from_mlb_28 ),
    .inputs_from_mlb_29( input_interconnect__inputs_from_mlb_29 ),
    .inputs_from_mlb_3( input_interconnect__inputs_from_mlb_3 ),
    .inputs_from_mlb_30( input_interconnect__inputs_from_mlb_30 ),
    .inputs_from_mlb_31( input_interconnect__inputs_from_mlb_31 ),
    .inputs_from_mlb_4( input_interconnect__inputs_from_mlb_4 ),
    .inputs_from_mlb_5( input_interconnect__inputs_from_mlb_5 ),
    .inputs_from_mlb_6( input_interconnect__inputs_from_mlb_6 ),
    .inputs_from_mlb_7( input_interconnect__inputs_from_mlb_7 ),
    .inputs_from_mlb_8( input_interconnect__inputs_from_mlb_8 ),
    .inputs_from_mlb_9( input_interconnect__inputs_from_mlb_9 ),
    .outputs_to_buffer_0( input_interconnect__outputs_to_buffer_0 ),
    .outputs_to_buffer_1( input_interconnect__outputs_to_buffer_1 ),
    .outputs_to_mlb_0( input_interconnect__outputs_to_mlb_0 ),
    .outputs_to_mlb_1( input_interconnect__outputs_to_mlb_1 ),
    .outputs_to_mlb_10( input_interconnect__outputs_to_mlb_10 ),
    .outputs_to_mlb_11( input_interconnect__outputs_to_mlb_11 ),
    .outputs_to_mlb_12( input_interconnect__outputs_to_mlb_12 ),
    .outputs_to_mlb_13( input_interconnect__outputs_to_mlb_13 ),
    .outputs_to_mlb_14( input_interconnect__outputs_to_mlb_14 ),
    .outputs_to_mlb_15( input_interconnect__outputs_to_mlb_15 ),
    .outputs_to_mlb_16( input_interconnect__outputs_to_mlb_16 ),
    .outputs_to_mlb_17( input_interconnect__outputs_to_mlb_17 ),
    .outputs_to_mlb_18( input_interconnect__outputs_to_mlb_18 ),
    .outputs_to_mlb_19( input_interconnect__outputs_to_mlb_19 ),
    .outputs_to_mlb_2( input_interconnect__outputs_to_mlb_2 ),
    .outputs_to_mlb_20( input_interconnect__outputs_to_mlb_20 ),
    .outputs_to_mlb_21( input_interconnect__outputs_to_mlb_21 ),
    .outputs_to_mlb_22( input_interconnect__outputs_to_mlb_22 ),
    .outputs_to_mlb_23( input_interconnect__outputs_to_mlb_23 ),
    .outputs_to_mlb_24( input_interconnect__outputs_to_mlb_24 ),
    .outputs_to_mlb_25( input_interconnect__outputs_to_mlb_25 ),
    .outputs_to_mlb_26( input_interconnect__outputs_to_mlb_26 ),
    .outputs_to_mlb_27( input_interconnect__outputs_to_mlb_27 ),
    .outputs_to_mlb_28( input_interconnect__outputs_to_mlb_28 ),
    .outputs_to_mlb_29( input_interconnect__outputs_to_mlb_29 ),
    .outputs_to_mlb_3( input_interconnect__outputs_to_mlb_3 ),
    .outputs_to_mlb_30( input_interconnect__outputs_to_mlb_30 ),
    .outputs_to_mlb_31( input_interconnect__outputs_to_mlb_31 ),
    .outputs_to_mlb_4( input_interconnect__outputs_to_mlb_4 ),
    .outputs_to_mlb_5( input_interconnect__outputs_to_mlb_5 ),
    .outputs_to_mlb_6( input_interconnect__outputs_to_mlb_6 ),
    .outputs_to_mlb_7( input_interconnect__outputs_to_mlb_7 ),
    .outputs_to_mlb_8( input_interconnect__outputs_to_mlb_8 ),
    .outputs_to_mlb_9( input_interconnect__outputs_to_mlb_9 ),
    .reset( input_interconnect__reset )
  );

  //-------------------------------------------------------------
  // End of component input_interconnect
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mlb_modules
  //-------------------------------------------------------------

  wire [31:0] mlb_modules__a_0;
  wire [31:0] mlb_modules__a_1;
  wire [31:0] mlb_modules__a_10;
  wire [31:0] mlb_modules__a_11;
  wire [31:0] mlb_modules__a_12;
  wire [31:0] mlb_modules__a_13;
  wire [31:0] mlb_modules__a_14;
  wire [31:0] mlb_modules__a_15;
  wire [31:0] mlb_modules__a_16;
  wire [31:0] mlb_modules__a_17;
  wire [31:0] mlb_modules__a_18;
  wire [31:0] mlb_modules__a_19;
  wire [31:0] mlb_modules__a_2;
  wire [31:0] mlb_modules__a_20;
  wire [31:0] mlb_modules__a_21;
  wire [31:0] mlb_modules__a_22;
  wire [31:0] mlb_modules__a_23;
  wire [31:0] mlb_modules__a_24;
  wire [31:0] mlb_modules__a_25;
  wire [31:0] mlb_modules__a_26;
  wire [31:0] mlb_modules__a_27;
  wire [31:0] mlb_modules__a_28;
  wire [31:0] mlb_modules__a_29;
  wire [31:0] mlb_modules__a_3;
  wire [31:0] mlb_modules__a_30;
  wire [31:0] mlb_modules__a_31;
  wire [31:0] mlb_modules__a_4;
  wire [31:0] mlb_modules__a_5;
  wire [31:0] mlb_modules__a_6;
  wire [31:0] mlb_modules__a_7;
  wire [31:0] mlb_modules__a_8;
  wire [31:0] mlb_modules__a_9;
  wire [0:0] mlb_modules__a_en;
  wire [31:0] mlb_modules__a_out_0;
  wire [31:0] mlb_modules__a_out_1;
  wire [31:0] mlb_modules__a_out_10;
  wire [31:0] mlb_modules__a_out_11;
  wire [31:0] mlb_modules__a_out_12;
  wire [31:0] mlb_modules__a_out_13;
  wire [31:0] mlb_modules__a_out_14;
  wire [31:0] mlb_modules__a_out_15;
  wire [31:0] mlb_modules__a_out_16;
  wire [31:0] mlb_modules__a_out_17;
  wire [31:0] mlb_modules__a_out_18;
  wire [31:0] mlb_modules__a_out_19;
  wire [31:0] mlb_modules__a_out_2;
  wire [31:0] mlb_modules__a_out_20;
  wire [31:0] mlb_modules__a_out_21;
  wire [31:0] mlb_modules__a_out_22;
  wire [31:0] mlb_modules__a_out_23;
  wire [31:0] mlb_modules__a_out_24;
  wire [31:0] mlb_modules__a_out_25;
  wire [31:0] mlb_modules__a_out_26;
  wire [31:0] mlb_modules__a_out_27;
  wire [31:0] mlb_modules__a_out_28;
  wire [31:0] mlb_modules__a_out_29;
  wire [31:0] mlb_modules__a_out_3;
  wire [31:0] mlb_modules__a_out_30;
  wire [31:0] mlb_modules__a_out_31;
  wire [31:0] mlb_modules__a_out_4;
  wire [31:0] mlb_modules__a_out_5;
  wire [31:0] mlb_modules__a_out_6;
  wire [31:0] mlb_modules__a_out_7;
  wire [31:0] mlb_modules__a_out_8;
  wire [31:0] mlb_modules__a_out_9;
  wire [0:0] mlb_modules__acc_en;
  wire [23:0] mlb_modules__b_cas_in_0;
  wire [23:0] mlb_modules__b_cas_in_1;
  wire [23:0] mlb_modules__b_cas_in_10;
  wire [23:0] mlb_modules__b_cas_in_11;
  wire [23:0] mlb_modules__b_cas_in_12;
  wire [23:0] mlb_modules__b_cas_in_13;
  wire [23:0] mlb_modules__b_cas_in_14;
  wire [23:0] mlb_modules__b_cas_in_15;
  wire [23:0] mlb_modules__b_cas_in_16;
  wire [23:0] mlb_modules__b_cas_in_17;
  wire [23:0] mlb_modules__b_cas_in_18;
  wire [23:0] mlb_modules__b_cas_in_19;
  wire [23:0] mlb_modules__b_cas_in_2;
  wire [23:0] mlb_modules__b_cas_in_20;
  wire [23:0] mlb_modules__b_cas_in_21;
  wire [23:0] mlb_modules__b_cas_in_22;
  wire [23:0] mlb_modules__b_cas_in_23;
  wire [23:0] mlb_modules__b_cas_in_24;
  wire [23:0] mlb_modules__b_cas_in_25;
  wire [23:0] mlb_modules__b_cas_in_26;
  wire [23:0] mlb_modules__b_cas_in_27;
  wire [23:0] mlb_modules__b_cas_in_28;
  wire [23:0] mlb_modules__b_cas_in_29;
  wire [23:0] mlb_modules__b_cas_in_3;
  wire [23:0] mlb_modules__b_cas_in_30;
  wire [23:0] mlb_modules__b_cas_in_31;
  wire [23:0] mlb_modules__b_cas_in_4;
  wire [23:0] mlb_modules__b_cas_in_5;
  wire [23:0] mlb_modules__b_cas_in_6;
  wire [23:0] mlb_modules__b_cas_in_7;
  wire [23:0] mlb_modules__b_cas_in_8;
  wire [23:0] mlb_modules__b_cas_in_9;
  wire [23:0] mlb_modules__b_cas_out_0;
  wire [23:0] mlb_modules__b_cas_out_1;
  wire [23:0] mlb_modules__b_cas_out_10;
  wire [23:0] mlb_modules__b_cas_out_11;
  wire [23:0] mlb_modules__b_cas_out_12;
  wire [23:0] mlb_modules__b_cas_out_13;
  wire [23:0] mlb_modules__b_cas_out_14;
  wire [23:0] mlb_modules__b_cas_out_15;
  wire [23:0] mlb_modules__b_cas_out_16;
  wire [23:0] mlb_modules__b_cas_out_17;
  wire [23:0] mlb_modules__b_cas_out_18;
  wire [23:0] mlb_modules__b_cas_out_19;
  wire [23:0] mlb_modules__b_cas_out_2;
  wire [23:0] mlb_modules__b_cas_out_20;
  wire [23:0] mlb_modules__b_cas_out_21;
  wire [23:0] mlb_modules__b_cas_out_22;
  wire [23:0] mlb_modules__b_cas_out_23;
  wire [23:0] mlb_modules__b_cas_out_24;
  wire [23:0] mlb_modules__b_cas_out_25;
  wire [23:0] mlb_modules__b_cas_out_26;
  wire [23:0] mlb_modules__b_cas_out_27;
  wire [23:0] mlb_modules__b_cas_out_28;
  wire [23:0] mlb_modules__b_cas_out_29;
  wire [23:0] mlb_modules__b_cas_out_3;
  wire [23:0] mlb_modules__b_cas_out_30;
  wire [23:0] mlb_modules__b_cas_out_31;
  wire [23:0] mlb_modules__b_cas_out_4;
  wire [23:0] mlb_modules__b_cas_out_5;
  wire [23:0] mlb_modules__b_cas_out_6;
  wire [23:0] mlb_modules__b_cas_out_7;
  wire [23:0] mlb_modules__b_cas_out_8;
  wire [23:0] mlb_modules__b_cas_out_9;
  wire [0:0] mlb_modules__b_en;
  wire [0:0] mlb_modules__clk;
  wire [0:0] mlb_modules__config_en;
  wire [0:0] mlb_modules__config_in;
  wire [0:0] mlb_modules__hp_en;
  wire [127:0] mlb_modules__res_cas_in_0;
  wire [127:0] mlb_modules__res_cas_in_1;
  wire [127:0] mlb_modules__res_cas_in_10;
  wire [127:0] mlb_modules__res_cas_in_11;
  wire [127:0] mlb_modules__res_cas_in_12;
  wire [127:0] mlb_modules__res_cas_in_13;
  wire [127:0] mlb_modules__res_cas_in_14;
  wire [127:0] mlb_modules__res_cas_in_15;
  wire [127:0] mlb_modules__res_cas_in_16;
  wire [127:0] mlb_modules__res_cas_in_17;
  wire [127:0] mlb_modules__res_cas_in_18;
  wire [127:0] mlb_modules__res_cas_in_19;
  wire [127:0] mlb_modules__res_cas_in_2;
  wire [127:0] mlb_modules__res_cas_in_20;
  wire [127:0] mlb_modules__res_cas_in_21;
  wire [127:0] mlb_modules__res_cas_in_22;
  wire [127:0] mlb_modules__res_cas_in_23;
  wire [127:0] mlb_modules__res_cas_in_24;
  wire [127:0] mlb_modules__res_cas_in_25;
  wire [127:0] mlb_modules__res_cas_in_26;
  wire [127:0] mlb_modules__res_cas_in_27;
  wire [127:0] mlb_modules__res_cas_in_28;
  wire [127:0] mlb_modules__res_cas_in_29;
  wire [127:0] mlb_modules__res_cas_in_3;
  wire [127:0] mlb_modules__res_cas_in_30;
  wire [127:0] mlb_modules__res_cas_in_31;
  wire [127:0] mlb_modules__res_cas_in_4;
  wire [127:0] mlb_modules__res_cas_in_5;
  wire [127:0] mlb_modules__res_cas_in_6;
  wire [127:0] mlb_modules__res_cas_in_7;
  wire [127:0] mlb_modules__res_cas_in_8;
  wire [127:0] mlb_modules__res_cas_in_9;
  wire [127:0] mlb_modules__res_cas_out_0;
  wire [127:0] mlb_modules__res_cas_out_1;
  wire [127:0] mlb_modules__res_cas_out_10;
  wire [127:0] mlb_modules__res_cas_out_11;
  wire [127:0] mlb_modules__res_cas_out_12;
  wire [127:0] mlb_modules__res_cas_out_13;
  wire [127:0] mlb_modules__res_cas_out_14;
  wire [127:0] mlb_modules__res_cas_out_15;
  wire [127:0] mlb_modules__res_cas_out_16;
  wire [127:0] mlb_modules__res_cas_out_17;
  wire [127:0] mlb_modules__res_cas_out_18;
  wire [127:0] mlb_modules__res_cas_out_19;
  wire [127:0] mlb_modules__res_cas_out_2;
  wire [127:0] mlb_modules__res_cas_out_20;
  wire [127:0] mlb_modules__res_cas_out_21;
  wire [127:0] mlb_modules__res_cas_out_22;
  wire [127:0] mlb_modules__res_cas_out_23;
  wire [127:0] mlb_modules__res_cas_out_24;
  wire [127:0] mlb_modules__res_cas_out_25;
  wire [127:0] mlb_modules__res_cas_out_26;
  wire [127:0] mlb_modules__res_cas_out_27;
  wire [127:0] mlb_modules__res_cas_out_28;
  wire [127:0] mlb_modules__res_cas_out_29;
  wire [127:0] mlb_modules__res_cas_out_3;
  wire [127:0] mlb_modules__res_cas_out_30;
  wire [127:0] mlb_modules__res_cas_out_31;
  wire [127:0] mlb_modules__res_cas_out_4;
  wire [127:0] mlb_modules__res_cas_out_5;
  wire [127:0] mlb_modules__res_cas_out_6;
  wire [127:0] mlb_modules__res_cas_out_7;
  wire [127:0] mlb_modules__res_cas_out_8;
  wire [127:0] mlb_modules__res_cas_out_9;
  wire [0:0] mlb_modules__reset;

  HWB_Wrapper__6c80311fcdc0a1e9 mlb_modules
  (
    .a_0( mlb_modules__a_0 ),
    .a_1( mlb_modules__a_1 ),
    .a_10( mlb_modules__a_10 ),
    .a_11( mlb_modules__a_11 ),
    .a_12( mlb_modules__a_12 ),
    .a_13( mlb_modules__a_13 ),
    .a_14( mlb_modules__a_14 ),
    .a_15( mlb_modules__a_15 ),
    .a_16( mlb_modules__a_16 ),
    .a_17( mlb_modules__a_17 ),
    .a_18( mlb_modules__a_18 ),
    .a_19( mlb_modules__a_19 ),
    .a_2( mlb_modules__a_2 ),
    .a_20( mlb_modules__a_20 ),
    .a_21( mlb_modules__a_21 ),
    .a_22( mlb_modules__a_22 ),
    .a_23( mlb_modules__a_23 ),
    .a_24( mlb_modules__a_24 ),
    .a_25( mlb_modules__a_25 ),
    .a_26( mlb_modules__a_26 ),
    .a_27( mlb_modules__a_27 ),
    .a_28( mlb_modules__a_28 ),
    .a_29( mlb_modules__a_29 ),
    .a_3( mlb_modules__a_3 ),
    .a_30( mlb_modules__a_30 ),
    .a_31( mlb_modules__a_31 ),
    .a_4( mlb_modules__a_4 ),
    .a_5( mlb_modules__a_5 ),
    .a_6( mlb_modules__a_6 ),
    .a_7( mlb_modules__a_7 ),
    .a_8( mlb_modules__a_8 ),
    .a_9( mlb_modules__a_9 ),
    .a_en( mlb_modules__a_en ),
    .a_out_0( mlb_modules__a_out_0 ),
    .a_out_1( mlb_modules__a_out_1 ),
    .a_out_10( mlb_modules__a_out_10 ),
    .a_out_11( mlb_modules__a_out_11 ),
    .a_out_12( mlb_modules__a_out_12 ),
    .a_out_13( mlb_modules__a_out_13 ),
    .a_out_14( mlb_modules__a_out_14 ),
    .a_out_15( mlb_modules__a_out_15 ),
    .a_out_16( mlb_modules__a_out_16 ),
    .a_out_17( mlb_modules__a_out_17 ),
    .a_out_18( mlb_modules__a_out_18 ),
    .a_out_19( mlb_modules__a_out_19 ),
    .a_out_2( mlb_modules__a_out_2 ),
    .a_out_20( mlb_modules__a_out_20 ),
    .a_out_21( mlb_modules__a_out_21 ),
    .a_out_22( mlb_modules__a_out_22 ),
    .a_out_23( mlb_modules__a_out_23 ),
    .a_out_24( mlb_modules__a_out_24 ),
    .a_out_25( mlb_modules__a_out_25 ),
    .a_out_26( mlb_modules__a_out_26 ),
    .a_out_27( mlb_modules__a_out_27 ),
    .a_out_28( mlb_modules__a_out_28 ),
    .a_out_29( mlb_modules__a_out_29 ),
    .a_out_3( mlb_modules__a_out_3 ),
    .a_out_30( mlb_modules__a_out_30 ),
    .a_out_31( mlb_modules__a_out_31 ),
    .a_out_4( mlb_modules__a_out_4 ),
    .a_out_5( mlb_modules__a_out_5 ),
    .a_out_6( mlb_modules__a_out_6 ),
    .a_out_7( mlb_modules__a_out_7 ),
    .a_out_8( mlb_modules__a_out_8 ),
    .a_out_9( mlb_modules__a_out_9 ),
    .acc_en( mlb_modules__acc_en ),
    .b_cas_in_0( mlb_modules__b_cas_in_0 ),
    .b_cas_in_1( mlb_modules__b_cas_in_1 ),
    .b_cas_in_10( mlb_modules__b_cas_in_10 ),
    .b_cas_in_11( mlb_modules__b_cas_in_11 ),
    .b_cas_in_12( mlb_modules__b_cas_in_12 ),
    .b_cas_in_13( mlb_modules__b_cas_in_13 ),
    .b_cas_in_14( mlb_modules__b_cas_in_14 ),
    .b_cas_in_15( mlb_modules__b_cas_in_15 ),
    .b_cas_in_16( mlb_modules__b_cas_in_16 ),
    .b_cas_in_17( mlb_modules__b_cas_in_17 ),
    .b_cas_in_18( mlb_modules__b_cas_in_18 ),
    .b_cas_in_19( mlb_modules__b_cas_in_19 ),
    .b_cas_in_2( mlb_modules__b_cas_in_2 ),
    .b_cas_in_20( mlb_modules__b_cas_in_20 ),
    .b_cas_in_21( mlb_modules__b_cas_in_21 ),
    .b_cas_in_22( mlb_modules__b_cas_in_22 ),
    .b_cas_in_23( mlb_modules__b_cas_in_23 ),
    .b_cas_in_24( mlb_modules__b_cas_in_24 ),
    .b_cas_in_25( mlb_modules__b_cas_in_25 ),
    .b_cas_in_26( mlb_modules__b_cas_in_26 ),
    .b_cas_in_27( mlb_modules__b_cas_in_27 ),
    .b_cas_in_28( mlb_modules__b_cas_in_28 ),
    .b_cas_in_29( mlb_modules__b_cas_in_29 ),
    .b_cas_in_3( mlb_modules__b_cas_in_3 ),
    .b_cas_in_30( mlb_modules__b_cas_in_30 ),
    .b_cas_in_31( mlb_modules__b_cas_in_31 ),
    .b_cas_in_4( mlb_modules__b_cas_in_4 ),
    .b_cas_in_5( mlb_modules__b_cas_in_5 ),
    .b_cas_in_6( mlb_modules__b_cas_in_6 ),
    .b_cas_in_7( mlb_modules__b_cas_in_7 ),
    .b_cas_in_8( mlb_modules__b_cas_in_8 ),
    .b_cas_in_9( mlb_modules__b_cas_in_9 ),
    .b_cas_out_0( mlb_modules__b_cas_out_0 ),
    .b_cas_out_1( mlb_modules__b_cas_out_1 ),
    .b_cas_out_10( mlb_modules__b_cas_out_10 ),
    .b_cas_out_11( mlb_modules__b_cas_out_11 ),
    .b_cas_out_12( mlb_modules__b_cas_out_12 ),
    .b_cas_out_13( mlb_modules__b_cas_out_13 ),
    .b_cas_out_14( mlb_modules__b_cas_out_14 ),
    .b_cas_out_15( mlb_modules__b_cas_out_15 ),
    .b_cas_out_16( mlb_modules__b_cas_out_16 ),
    .b_cas_out_17( mlb_modules__b_cas_out_17 ),
    .b_cas_out_18( mlb_modules__b_cas_out_18 ),
    .b_cas_out_19( mlb_modules__b_cas_out_19 ),
    .b_cas_out_2( mlb_modules__b_cas_out_2 ),
    .b_cas_out_20( mlb_modules__b_cas_out_20 ),
    .b_cas_out_21( mlb_modules__b_cas_out_21 ),
    .b_cas_out_22( mlb_modules__b_cas_out_22 ),
    .b_cas_out_23( mlb_modules__b_cas_out_23 ),
    .b_cas_out_24( mlb_modules__b_cas_out_24 ),
    .b_cas_out_25( mlb_modules__b_cas_out_25 ),
    .b_cas_out_26( mlb_modules__b_cas_out_26 ),
    .b_cas_out_27( mlb_modules__b_cas_out_27 ),
    .b_cas_out_28( mlb_modules__b_cas_out_28 ),
    .b_cas_out_29( mlb_modules__b_cas_out_29 ),
    .b_cas_out_3( mlb_modules__b_cas_out_3 ),
    .b_cas_out_30( mlb_modules__b_cas_out_30 ),
    .b_cas_out_31( mlb_modules__b_cas_out_31 ),
    .b_cas_out_4( mlb_modules__b_cas_out_4 ),
    .b_cas_out_5( mlb_modules__b_cas_out_5 ),
    .b_cas_out_6( mlb_modules__b_cas_out_6 ),
    .b_cas_out_7( mlb_modules__b_cas_out_7 ),
    .b_cas_out_8( mlb_modules__b_cas_out_8 ),
    .b_cas_out_9( mlb_modules__b_cas_out_9 ),
    .b_en( mlb_modules__b_en ),
    .clk( mlb_modules__clk ),
    .config_en( mlb_modules__config_en ),
    .config_in( mlb_modules__config_in ),
    .hp_en( mlb_modules__hp_en ),
    .res_cas_in_0( mlb_modules__res_cas_in_0 ),
    .res_cas_in_1( mlb_modules__res_cas_in_1 ),
    .res_cas_in_10( mlb_modules__res_cas_in_10 ),
    .res_cas_in_11( mlb_modules__res_cas_in_11 ),
    .res_cas_in_12( mlb_modules__res_cas_in_12 ),
    .res_cas_in_13( mlb_modules__res_cas_in_13 ),
    .res_cas_in_14( mlb_modules__res_cas_in_14 ),
    .res_cas_in_15( mlb_modules__res_cas_in_15 ),
    .res_cas_in_16( mlb_modules__res_cas_in_16 ),
    .res_cas_in_17( mlb_modules__res_cas_in_17 ),
    .res_cas_in_18( mlb_modules__res_cas_in_18 ),
    .res_cas_in_19( mlb_modules__res_cas_in_19 ),
    .res_cas_in_2( mlb_modules__res_cas_in_2 ),
    .res_cas_in_20( mlb_modules__res_cas_in_20 ),
    .res_cas_in_21( mlb_modules__res_cas_in_21 ),
    .res_cas_in_22( mlb_modules__res_cas_in_22 ),
    .res_cas_in_23( mlb_modules__res_cas_in_23 ),
    .res_cas_in_24( mlb_modules__res_cas_in_24 ),
    .res_cas_in_25( mlb_modules__res_cas_in_25 ),
    .res_cas_in_26( mlb_modules__res_cas_in_26 ),
    .res_cas_in_27( mlb_modules__res_cas_in_27 ),
    .res_cas_in_28( mlb_modules__res_cas_in_28 ),
    .res_cas_in_29( mlb_modules__res_cas_in_29 ),
    .res_cas_in_3( mlb_modules__res_cas_in_3 ),
    .res_cas_in_30( mlb_modules__res_cas_in_30 ),
    .res_cas_in_31( mlb_modules__res_cas_in_31 ),
    .res_cas_in_4( mlb_modules__res_cas_in_4 ),
    .res_cas_in_5( mlb_modules__res_cas_in_5 ),
    .res_cas_in_6( mlb_modules__res_cas_in_6 ),
    .res_cas_in_7( mlb_modules__res_cas_in_7 ),
    .res_cas_in_8( mlb_modules__res_cas_in_8 ),
    .res_cas_in_9( mlb_modules__res_cas_in_9 ),
    .res_cas_out_0( mlb_modules__res_cas_out_0 ),
    .res_cas_out_1( mlb_modules__res_cas_out_1 ),
    .res_cas_out_10( mlb_modules__res_cas_out_10 ),
    .res_cas_out_11( mlb_modules__res_cas_out_11 ),
    .res_cas_out_12( mlb_modules__res_cas_out_12 ),
    .res_cas_out_13( mlb_modules__res_cas_out_13 ),
    .res_cas_out_14( mlb_modules__res_cas_out_14 ),
    .res_cas_out_15( mlb_modules__res_cas_out_15 ),
    .res_cas_out_16( mlb_modules__res_cas_out_16 ),
    .res_cas_out_17( mlb_modules__res_cas_out_17 ),
    .res_cas_out_18( mlb_modules__res_cas_out_18 ),
    .res_cas_out_19( mlb_modules__res_cas_out_19 ),
    .res_cas_out_2( mlb_modules__res_cas_out_2 ),
    .res_cas_out_20( mlb_modules__res_cas_out_20 ),
    .res_cas_out_21( mlb_modules__res_cas_out_21 ),
    .res_cas_out_22( mlb_modules__res_cas_out_22 ),
    .res_cas_out_23( mlb_modules__res_cas_out_23 ),
    .res_cas_out_24( mlb_modules__res_cas_out_24 ),
    .res_cas_out_25( mlb_modules__res_cas_out_25 ),
    .res_cas_out_26( mlb_modules__res_cas_out_26 ),
    .res_cas_out_27( mlb_modules__res_cas_out_27 ),
    .res_cas_out_28( mlb_modules__res_cas_out_28 ),
    .res_cas_out_29( mlb_modules__res_cas_out_29 ),
    .res_cas_out_3( mlb_modules__res_cas_out_3 ),
    .res_cas_out_30( mlb_modules__res_cas_out_30 ),
    .res_cas_out_31( mlb_modules__res_cas_out_31 ),
    .res_cas_out_4( mlb_modules__res_cas_out_4 ),
    .res_cas_out_5( mlb_modules__res_cas_out_5 ),
    .res_cas_out_6( mlb_modules__res_cas_out_6 ),
    .res_cas_out_7( mlb_modules__res_cas_out_7 ),
    .res_cas_out_8( mlb_modules__res_cas_out_8 ),
    .res_cas_out_9( mlb_modules__res_cas_out_9 ),
    .reset( mlb_modules__reset )
  );

  //-------------------------------------------------------------
  // End of component mlb_modules
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_act_modules
  //-------------------------------------------------------------

  wire [0:0] output_act_modules__clk;
  wire [0:0] output_act_modules__clk_portain;
  wire [0:0] output_act_modules__clk_portaout;
  wire [0:0] output_act_modules__clr0;
  wire [0:0] output_act_modules__clr1;
  wire [0:0] output_act_modules__ena0;
  wire [0:0] output_act_modules__ena1;
  wire [0:0] output_act_modules__ena2;
  wire [0:0] output_act_modules__ena3;
  wire [7:0] output_act_modules__portaaddr;
  wire [0:0] output_act_modules__portaaddrstall;
  wire [0:0] output_act_modules__portabyteenamasks;
  wire [31:0] output_act_modules__portadatain_0;
  wire [31:0] output_act_modules__portadatain_1;
  wire [31:0] output_act_modules__portadatain_2;
  wire [31:0] output_act_modules__portadatain_3;
  wire [31:0] output_act_modules__portadataout_0;
  wire [31:0] output_act_modules__portadataout_1;
  wire [31:0] output_act_modules__portadataout_2;
  wire [31:0] output_act_modules__portadataout_3;
  wire [0:0] output_act_modules__portare;
  wire [0:0] output_act_modules__portawe_0;
  wire [0:0] output_act_modules__portawe_1;
  wire [0:0] output_act_modules__portawe_2;
  wire [0:0] output_act_modules__portawe_3;
  wire [0:0] output_act_modules__reset;

  HWB_Wrapper__f278a0d584bba8bb output_act_modules
  (
    .clk( output_act_modules__clk ),
    .clk_portain( output_act_modules__clk_portain ),
    .clk_portaout( output_act_modules__clk_portaout ),
    .clr0( output_act_modules__clr0 ),
    .clr1( output_act_modules__clr1 ),
    .ena0( output_act_modules__ena0 ),
    .ena1( output_act_modules__ena1 ),
    .ena2( output_act_modules__ena2 ),
    .ena3( output_act_modules__ena3 ),
    .portaaddr( output_act_modules__portaaddr ),
    .portaaddrstall( output_act_modules__portaaddrstall ),
    .portabyteenamasks( output_act_modules__portabyteenamasks ),
    .portadatain_0( output_act_modules__portadatain_0 ),
    .portadatain_1( output_act_modules__portadatain_1 ),
    .portadatain_2( output_act_modules__portadatain_2 ),
    .portadatain_3( output_act_modules__portadatain_3 ),
    .portadataout_0( output_act_modules__portadataout_0 ),
    .portadataout_1( output_act_modules__portadataout_1 ),
    .portadataout_2( output_act_modules__portadataout_2 ),
    .portadataout_3( output_act_modules__portadataout_3 ),
    .portare( output_act_modules__portare ),
    .portawe_0( output_act_modules__portawe_0 ),
    .portawe_1( output_act_modules__portawe_1 ),
    .portawe_2( output_act_modules__portawe_2 ),
    .portawe_3( output_act_modules__portawe_3 ),
    .reset( output_act_modules__reset )
  );

  //-------------------------------------------------------------
  // End of component output_act_modules
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_interconnect
  //-------------------------------------------------------------

  wire [0:0] output_interconnect__clk;
  wire [7:0] output_interconnect__input_0;
  wire [7:0] output_interconnect__input_1;
  wire [7:0] output_interconnect__input_10;
  wire [7:0] output_interconnect__input_11;
  wire [7:0] output_interconnect__input_12;
  wire [7:0] output_interconnect__input_13;
  wire [7:0] output_interconnect__input_14;
  wire [7:0] output_interconnect__input_15;
  wire [7:0] output_interconnect__input_2;
  wire [7:0] output_interconnect__input_3;
  wire [7:0] output_interconnect__input_4;
  wire [7:0] output_interconnect__input_5;
  wire [7:0] output_interconnect__input_6;
  wire [7:0] output_interconnect__input_7;
  wire [7:0] output_interconnect__input_8;
  wire [7:0] output_interconnect__input_9;
  wire [31:0] output_interconnect__output_0;
  wire [31:0] output_interconnect__output_1;
  wire [31:0] output_interconnect__output_2;
  wire [31:0] output_interconnect__output_3;
  wire [0:0] output_interconnect__reset;

  MergeBusses__0112bfa1bf08d8e6 output_interconnect
  (
    .clk( output_interconnect__clk ),
    .input_0( output_interconnect__input_0 ),
    .input_1( output_interconnect__input_1 ),
    .input_10( output_interconnect__input_10 ),
    .input_11( output_interconnect__input_11 ),
    .input_12( output_interconnect__input_12 ),
    .input_13( output_interconnect__input_13 ),
    .input_14( output_interconnect__input_14 ),
    .input_15( output_interconnect__input_15 ),
    .input_2( output_interconnect__input_2 ),
    .input_3( output_interconnect__input_3 ),
    .input_4( output_interconnect__input_4 ),
    .input_5( output_interconnect__input_5 ),
    .input_6( output_interconnect__input_6 ),
    .input_7( output_interconnect__input_7 ),
    .input_8( output_interconnect__input_8 ),
    .input_9( output_interconnect__input_9 ),
    .output_0( output_interconnect__output_0 ),
    .output_1( output_interconnect__output_1 ),
    .output_2( output_interconnect__output_2 ),
    .output_3( output_interconnect__output_3 ),
    .reset( output_interconnect__reset )
  );

  //-------------------------------------------------------------
  // End of component output_interconnect
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component output_ps_interconnect
  //-------------------------------------------------------------

  wire [0:0] output_ps_interconnect__clk;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_0;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_1;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_10;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_11;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_12;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_13;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_14;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_15;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_16;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_17;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_18;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_19;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_2;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_20;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_21;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_22;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_23;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_24;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_25;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_26;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_27;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_28;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_29;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_3;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_30;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_31;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_4;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_5;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_6;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_7;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_8;
  wire [127:0] output_ps_interconnect__inputs_from_mlb_9;
  wire [31:0] output_ps_interconnect__outputs_to_afs_0;
  wire [31:0] output_ps_interconnect__outputs_to_afs_1;
  wire [31:0] output_ps_interconnect__outputs_to_afs_10;
  wire [31:0] output_ps_interconnect__outputs_to_afs_11;
  wire [31:0] output_ps_interconnect__outputs_to_afs_12;
  wire [31:0] output_ps_interconnect__outputs_to_afs_13;
  wire [31:0] output_ps_interconnect__outputs_to_afs_14;
  wire [31:0] output_ps_interconnect__outputs_to_afs_15;
  wire [31:0] output_ps_interconnect__outputs_to_afs_2;
  wire [31:0] output_ps_interconnect__outputs_to_afs_3;
  wire [31:0] output_ps_interconnect__outputs_to_afs_4;
  wire [31:0] output_ps_interconnect__outputs_to_afs_5;
  wire [31:0] output_ps_interconnect__outputs_to_afs_6;
  wire [31:0] output_ps_interconnect__outputs_to_afs_7;
  wire [31:0] output_ps_interconnect__outputs_to_afs_8;
  wire [31:0] output_ps_interconnect__outputs_to_afs_9;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_0;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_1;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_10;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_11;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_12;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_13;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_14;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_15;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_16;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_17;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_18;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_19;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_2;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_20;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_21;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_22;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_23;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_24;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_25;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_26;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_27;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_28;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_29;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_3;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_30;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_31;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_4;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_5;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_6;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_7;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_8;
  wire [127:0] output_ps_interconnect__outputs_to_mlb_9;
  wire [0:0] output_ps_interconnect__reset;

  OutputPSInterconnect__e4f6194a384af800 output_ps_interconnect
  (
    .clk( output_ps_interconnect__clk ),
    .inputs_from_mlb_0( output_ps_interconnect__inputs_from_mlb_0 ),
    .inputs_from_mlb_1( output_ps_interconnect__inputs_from_mlb_1 ),
    .inputs_from_mlb_10( output_ps_interconnect__inputs_from_mlb_10 ),
    .inputs_from_mlb_11( output_ps_interconnect__inputs_from_mlb_11 ),
    .inputs_from_mlb_12( output_ps_interconnect__inputs_from_mlb_12 ),
    .inputs_from_mlb_13( output_ps_interconnect__inputs_from_mlb_13 ),
    .inputs_from_mlb_14( output_ps_interconnect__inputs_from_mlb_14 ),
    .inputs_from_mlb_15( output_ps_interconnect__inputs_from_mlb_15 ),
    .inputs_from_mlb_16( output_ps_interconnect__inputs_from_mlb_16 ),
    .inputs_from_mlb_17( output_ps_interconnect__inputs_from_mlb_17 ),
    .inputs_from_mlb_18( output_ps_interconnect__inputs_from_mlb_18 ),
    .inputs_from_mlb_19( output_ps_interconnect__inputs_from_mlb_19 ),
    .inputs_from_mlb_2( output_ps_interconnect__inputs_from_mlb_2 ),
    .inputs_from_mlb_20( output_ps_interconnect__inputs_from_mlb_20 ),
    .inputs_from_mlb_21( output_ps_interconnect__inputs_from_mlb_21 ),
    .inputs_from_mlb_22( output_ps_interconnect__inputs_from_mlb_22 ),
    .inputs_from_mlb_23( output_ps_interconnect__inputs_from_mlb_23 ),
    .inputs_from_mlb_24( output_ps_interconnect__inputs_from_mlb_24 ),
    .inputs_from_mlb_25( output_ps_interconnect__inputs_from_mlb_25 ),
    .inputs_from_mlb_26( output_ps_interconnect__inputs_from_mlb_26 ),
    .inputs_from_mlb_27( output_ps_interconnect__inputs_from_mlb_27 ),
    .inputs_from_mlb_28( output_ps_interconnect__inputs_from_mlb_28 ),
    .inputs_from_mlb_29( output_ps_interconnect__inputs_from_mlb_29 ),
    .inputs_from_mlb_3( output_ps_interconnect__inputs_from_mlb_3 ),
    .inputs_from_mlb_30( output_ps_interconnect__inputs_from_mlb_30 ),
    .inputs_from_mlb_31( output_ps_interconnect__inputs_from_mlb_31 ),
    .inputs_from_mlb_4( output_ps_interconnect__inputs_from_mlb_4 ),
    .inputs_from_mlb_5( output_ps_interconnect__inputs_from_mlb_5 ),
    .inputs_from_mlb_6( output_ps_interconnect__inputs_from_mlb_6 ),
    .inputs_from_mlb_7( output_ps_interconnect__inputs_from_mlb_7 ),
    .inputs_from_mlb_8( output_ps_interconnect__inputs_from_mlb_8 ),
    .inputs_from_mlb_9( output_ps_interconnect__inputs_from_mlb_9 ),
    .outputs_to_afs_0( output_ps_interconnect__outputs_to_afs_0 ),
    .outputs_to_afs_1( output_ps_interconnect__outputs_to_afs_1 ),
    .outputs_to_afs_10( output_ps_interconnect__outputs_to_afs_10 ),
    .outputs_to_afs_11( output_ps_interconnect__outputs_to_afs_11 ),
    .outputs_to_afs_12( output_ps_interconnect__outputs_to_afs_12 ),
    .outputs_to_afs_13( output_ps_interconnect__outputs_to_afs_13 ),
    .outputs_to_afs_14( output_ps_interconnect__outputs_to_afs_14 ),
    .outputs_to_afs_15( output_ps_interconnect__outputs_to_afs_15 ),
    .outputs_to_afs_2( output_ps_interconnect__outputs_to_afs_2 ),
    .outputs_to_afs_3( output_ps_interconnect__outputs_to_afs_3 ),
    .outputs_to_afs_4( output_ps_interconnect__outputs_to_afs_4 ),
    .outputs_to_afs_5( output_ps_interconnect__outputs_to_afs_5 ),
    .outputs_to_afs_6( output_ps_interconnect__outputs_to_afs_6 ),
    .outputs_to_afs_7( output_ps_interconnect__outputs_to_afs_7 ),
    .outputs_to_afs_8( output_ps_interconnect__outputs_to_afs_8 ),
    .outputs_to_afs_9( output_ps_interconnect__outputs_to_afs_9 ),
    .outputs_to_mlb_0( output_ps_interconnect__outputs_to_mlb_0 ),
    .outputs_to_mlb_1( output_ps_interconnect__outputs_to_mlb_1 ),
    .outputs_to_mlb_10( output_ps_interconnect__outputs_to_mlb_10 ),
    .outputs_to_mlb_11( output_ps_interconnect__outputs_to_mlb_11 ),
    .outputs_to_mlb_12( output_ps_interconnect__outputs_to_mlb_12 ),
    .outputs_to_mlb_13( output_ps_interconnect__outputs_to_mlb_13 ),
    .outputs_to_mlb_14( output_ps_interconnect__outputs_to_mlb_14 ),
    .outputs_to_mlb_15( output_ps_interconnect__outputs_to_mlb_15 ),
    .outputs_to_mlb_16( output_ps_interconnect__outputs_to_mlb_16 ),
    .outputs_to_mlb_17( output_ps_interconnect__outputs_to_mlb_17 ),
    .outputs_to_mlb_18( output_ps_interconnect__outputs_to_mlb_18 ),
    .outputs_to_mlb_19( output_ps_interconnect__outputs_to_mlb_19 ),
    .outputs_to_mlb_2( output_ps_interconnect__outputs_to_mlb_2 ),
    .outputs_to_mlb_20( output_ps_interconnect__outputs_to_mlb_20 ),
    .outputs_to_mlb_21( output_ps_interconnect__outputs_to_mlb_21 ),
    .outputs_to_mlb_22( output_ps_interconnect__outputs_to_mlb_22 ),
    .outputs_to_mlb_23( output_ps_interconnect__outputs_to_mlb_23 ),
    .outputs_to_mlb_24( output_ps_interconnect__outputs_to_mlb_24 ),
    .outputs_to_mlb_25( output_ps_interconnect__outputs_to_mlb_25 ),
    .outputs_to_mlb_26( output_ps_interconnect__outputs_to_mlb_26 ),
    .outputs_to_mlb_27( output_ps_interconnect__outputs_to_mlb_27 ),
    .outputs_to_mlb_28( output_ps_interconnect__outputs_to_mlb_28 ),
    .outputs_to_mlb_29( output_ps_interconnect__outputs_to_mlb_29 ),
    .outputs_to_mlb_3( output_ps_interconnect__outputs_to_mlb_3 ),
    .outputs_to_mlb_30( output_ps_interconnect__outputs_to_mlb_30 ),
    .outputs_to_mlb_31( output_ps_interconnect__outputs_to_mlb_31 ),
    .outputs_to_mlb_4( output_ps_interconnect__outputs_to_mlb_4 ),
    .outputs_to_mlb_5( output_ps_interconnect__outputs_to_mlb_5 ),
    .outputs_to_mlb_6( output_ps_interconnect__outputs_to_mlb_6 ),
    .outputs_to_mlb_7( output_ps_interconnect__outputs_to_mlb_7 ),
    .outputs_to_mlb_8( output_ps_interconnect__outputs_to_mlb_8 ),
    .outputs_to_mlb_9( output_ps_interconnect__outputs_to_mlb_9 ),
    .reset( output_ps_interconnect__reset )
  );

  //-------------------------------------------------------------
  // End of component output_ps_interconnect
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component weight_interconnect
  //-------------------------------------------------------------

  wire [0:0] weight_interconnect__clk;
  wire [127:0] weight_interconnect__inputs_from_buffer_0;
  wire [127:0] weight_interconnect__inputs_from_buffer_1;
  wire [31:0] weight_interconnect__inputs_from_mlb_0;
  wire [31:0] weight_interconnect__inputs_from_mlb_1;
  wire [31:0] weight_interconnect__inputs_from_mlb_10;
  wire [31:0] weight_interconnect__inputs_from_mlb_11;
  wire [31:0] weight_interconnect__inputs_from_mlb_12;
  wire [31:0] weight_interconnect__inputs_from_mlb_13;
  wire [31:0] weight_interconnect__inputs_from_mlb_14;
  wire [31:0] weight_interconnect__inputs_from_mlb_15;
  wire [31:0] weight_interconnect__inputs_from_mlb_16;
  wire [31:0] weight_interconnect__inputs_from_mlb_17;
  wire [31:0] weight_interconnect__inputs_from_mlb_18;
  wire [31:0] weight_interconnect__inputs_from_mlb_19;
  wire [31:0] weight_interconnect__inputs_from_mlb_2;
  wire [31:0] weight_interconnect__inputs_from_mlb_20;
  wire [31:0] weight_interconnect__inputs_from_mlb_21;
  wire [31:0] weight_interconnect__inputs_from_mlb_22;
  wire [31:0] weight_interconnect__inputs_from_mlb_23;
  wire [31:0] weight_interconnect__inputs_from_mlb_24;
  wire [31:0] weight_interconnect__inputs_from_mlb_25;
  wire [31:0] weight_interconnect__inputs_from_mlb_26;
  wire [31:0] weight_interconnect__inputs_from_mlb_27;
  wire [31:0] weight_interconnect__inputs_from_mlb_28;
  wire [31:0] weight_interconnect__inputs_from_mlb_29;
  wire [31:0] weight_interconnect__inputs_from_mlb_3;
  wire [31:0] weight_interconnect__inputs_from_mlb_30;
  wire [31:0] weight_interconnect__inputs_from_mlb_31;
  wire [31:0] weight_interconnect__inputs_from_mlb_4;
  wire [31:0] weight_interconnect__inputs_from_mlb_5;
  wire [31:0] weight_interconnect__inputs_from_mlb_6;
  wire [31:0] weight_interconnect__inputs_from_mlb_7;
  wire [31:0] weight_interconnect__inputs_from_mlb_8;
  wire [31:0] weight_interconnect__inputs_from_mlb_9;
  wire [31:0] weight_interconnect__outputs_to_mlb_0;
  wire [31:0] weight_interconnect__outputs_to_mlb_1;
  wire [31:0] weight_interconnect__outputs_to_mlb_10;
  wire [31:0] weight_interconnect__outputs_to_mlb_11;
  wire [31:0] weight_interconnect__outputs_to_mlb_12;
  wire [31:0] weight_interconnect__outputs_to_mlb_13;
  wire [31:0] weight_interconnect__outputs_to_mlb_14;
  wire [31:0] weight_interconnect__outputs_to_mlb_15;
  wire [31:0] weight_interconnect__outputs_to_mlb_16;
  wire [31:0] weight_interconnect__outputs_to_mlb_17;
  wire [31:0] weight_interconnect__outputs_to_mlb_18;
  wire [31:0] weight_interconnect__outputs_to_mlb_19;
  wire [31:0] weight_interconnect__outputs_to_mlb_2;
  wire [31:0] weight_interconnect__outputs_to_mlb_20;
  wire [31:0] weight_interconnect__outputs_to_mlb_21;
  wire [31:0] weight_interconnect__outputs_to_mlb_22;
  wire [31:0] weight_interconnect__outputs_to_mlb_23;
  wire [31:0] weight_interconnect__outputs_to_mlb_24;
  wire [31:0] weight_interconnect__outputs_to_mlb_25;
  wire [31:0] weight_interconnect__outputs_to_mlb_26;
  wire [31:0] weight_interconnect__outputs_to_mlb_27;
  wire [31:0] weight_interconnect__outputs_to_mlb_28;
  wire [31:0] weight_interconnect__outputs_to_mlb_29;
  wire [31:0] weight_interconnect__outputs_to_mlb_3;
  wire [31:0] weight_interconnect__outputs_to_mlb_30;
  wire [31:0] weight_interconnect__outputs_to_mlb_31;
  wire [31:0] weight_interconnect__outputs_to_mlb_4;
  wire [31:0] weight_interconnect__outputs_to_mlb_5;
  wire [31:0] weight_interconnect__outputs_to_mlb_6;
  wire [31:0] weight_interconnect__outputs_to_mlb_7;
  wire [31:0] weight_interconnect__outputs_to_mlb_8;
  wire [31:0] weight_interconnect__outputs_to_mlb_9;
  wire [0:0] weight_interconnect__reset;

  WeightInterconnect__bc4aebbf9c76dca1 weight_interconnect
  (
    .clk( weight_interconnect__clk ),
    .inputs_from_buffer_0( weight_interconnect__inputs_from_buffer_0 ),
    .inputs_from_buffer_1( weight_interconnect__inputs_from_buffer_1 ),
    .inputs_from_mlb_0( weight_interconnect__inputs_from_mlb_0 ),
    .inputs_from_mlb_1( weight_interconnect__inputs_from_mlb_1 ),
    .inputs_from_mlb_10( weight_interconnect__inputs_from_mlb_10 ),
    .inputs_from_mlb_11( weight_interconnect__inputs_from_mlb_11 ),
    .inputs_from_mlb_12( weight_interconnect__inputs_from_mlb_12 ),
    .inputs_from_mlb_13( weight_interconnect__inputs_from_mlb_13 ),
    .inputs_from_mlb_14( weight_interconnect__inputs_from_mlb_14 ),
    .inputs_from_mlb_15( weight_interconnect__inputs_from_mlb_15 ),
    .inputs_from_mlb_16( weight_interconnect__inputs_from_mlb_16 ),
    .inputs_from_mlb_17( weight_interconnect__inputs_from_mlb_17 ),
    .inputs_from_mlb_18( weight_interconnect__inputs_from_mlb_18 ),
    .inputs_from_mlb_19( weight_interconnect__inputs_from_mlb_19 ),
    .inputs_from_mlb_2( weight_interconnect__inputs_from_mlb_2 ),
    .inputs_from_mlb_20( weight_interconnect__inputs_from_mlb_20 ),
    .inputs_from_mlb_21( weight_interconnect__inputs_from_mlb_21 ),
    .inputs_from_mlb_22( weight_interconnect__inputs_from_mlb_22 ),
    .inputs_from_mlb_23( weight_interconnect__inputs_from_mlb_23 ),
    .inputs_from_mlb_24( weight_interconnect__inputs_from_mlb_24 ),
    .inputs_from_mlb_25( weight_interconnect__inputs_from_mlb_25 ),
    .inputs_from_mlb_26( weight_interconnect__inputs_from_mlb_26 ),
    .inputs_from_mlb_27( weight_interconnect__inputs_from_mlb_27 ),
    .inputs_from_mlb_28( weight_interconnect__inputs_from_mlb_28 ),
    .inputs_from_mlb_29( weight_interconnect__inputs_from_mlb_29 ),
    .inputs_from_mlb_3( weight_interconnect__inputs_from_mlb_3 ),
    .inputs_from_mlb_30( weight_interconnect__inputs_from_mlb_30 ),
    .inputs_from_mlb_31( weight_interconnect__inputs_from_mlb_31 ),
    .inputs_from_mlb_4( weight_interconnect__inputs_from_mlb_4 ),
    .inputs_from_mlb_5( weight_interconnect__inputs_from_mlb_5 ),
    .inputs_from_mlb_6( weight_interconnect__inputs_from_mlb_6 ),
    .inputs_from_mlb_7( weight_interconnect__inputs_from_mlb_7 ),
    .inputs_from_mlb_8( weight_interconnect__inputs_from_mlb_8 ),
    .inputs_from_mlb_9( weight_interconnect__inputs_from_mlb_9 ),
    .outputs_to_mlb_0( weight_interconnect__outputs_to_mlb_0 ),
    .outputs_to_mlb_1( weight_interconnect__outputs_to_mlb_1 ),
    .outputs_to_mlb_10( weight_interconnect__outputs_to_mlb_10 ),
    .outputs_to_mlb_11( weight_interconnect__outputs_to_mlb_11 ),
    .outputs_to_mlb_12( weight_interconnect__outputs_to_mlb_12 ),
    .outputs_to_mlb_13( weight_interconnect__outputs_to_mlb_13 ),
    .outputs_to_mlb_14( weight_interconnect__outputs_to_mlb_14 ),
    .outputs_to_mlb_15( weight_interconnect__outputs_to_mlb_15 ),
    .outputs_to_mlb_16( weight_interconnect__outputs_to_mlb_16 ),
    .outputs_to_mlb_17( weight_interconnect__outputs_to_mlb_17 ),
    .outputs_to_mlb_18( weight_interconnect__outputs_to_mlb_18 ),
    .outputs_to_mlb_19( weight_interconnect__outputs_to_mlb_19 ),
    .outputs_to_mlb_2( weight_interconnect__outputs_to_mlb_2 ),
    .outputs_to_mlb_20( weight_interconnect__outputs_to_mlb_20 ),
    .outputs_to_mlb_21( weight_interconnect__outputs_to_mlb_21 ),
    .outputs_to_mlb_22( weight_interconnect__outputs_to_mlb_22 ),
    .outputs_to_mlb_23( weight_interconnect__outputs_to_mlb_23 ),
    .outputs_to_mlb_24( weight_interconnect__outputs_to_mlb_24 ),
    .outputs_to_mlb_25( weight_interconnect__outputs_to_mlb_25 ),
    .outputs_to_mlb_26( weight_interconnect__outputs_to_mlb_26 ),
    .outputs_to_mlb_27( weight_interconnect__outputs_to_mlb_27 ),
    .outputs_to_mlb_28( weight_interconnect__outputs_to_mlb_28 ),
    .outputs_to_mlb_29( weight_interconnect__outputs_to_mlb_29 ),
    .outputs_to_mlb_3( weight_interconnect__outputs_to_mlb_3 ),
    .outputs_to_mlb_30( weight_interconnect__outputs_to_mlb_30 ),
    .outputs_to_mlb_31( weight_interconnect__outputs_to_mlb_31 ),
    .outputs_to_mlb_4( weight_interconnect__outputs_to_mlb_4 ),
    .outputs_to_mlb_5( weight_interconnect__outputs_to_mlb_5 ),
    .outputs_to_mlb_6( weight_interconnect__outputs_to_mlb_6 ),
    .outputs_to_mlb_7( weight_interconnect__outputs_to_mlb_7 ),
    .outputs_to_mlb_8( weight_interconnect__outputs_to_mlb_8 ),
    .outputs_to_mlb_9( weight_interconnect__outputs_to_mlb_9 ),
    .reset( weight_interconnect__reset )
  );

  //-------------------------------------------------------------
  // End of component weight_interconnect
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component weight_modules
  //-------------------------------------------------------------

  wire [0:0] weight_modules__clk;
  wire [0:0] weight_modules__clk_portain;
  wire [0:0] weight_modules__clk_portaout;
  wire [0:0] weight_modules__clr0;
  wire [0:0] weight_modules__clr1;
  wire [0:0] weight_modules__ena0;
  wire [0:0] weight_modules__ena1;
  wire [0:0] weight_modules__ena2;
  wire [0:0] weight_modules__ena3;
  wire [1:0] weight_modules__portaaddr;
  wire [0:0] weight_modules__portaaddrstall;
  wire [0:0] weight_modules__portabyteenamasks;
  wire [127:0] weight_modules__portadatain_0;
  wire [127:0] weight_modules__portadatain_1;
  wire [127:0] weight_modules__portadataout_0;
  wire [127:0] weight_modules__portadataout_1;
  wire [0:0] weight_modules__portare;
  wire [0:0] weight_modules__portawe_0;
  wire [0:0] weight_modules__portawe_1;
  wire [0:0] weight_modules__reset;

  HWB_Wrapper__ceb5e7dfa7271575 weight_modules
  (
    .clk( weight_modules__clk ),
    .clk_portain( weight_modules__clk_portain ),
    .clk_portaout( weight_modules__clk_portaout ),
    .clr0( weight_modules__clr0 ),
    .clr1( weight_modules__clr1 ),
    .ena0( weight_modules__ena0 ),
    .ena1( weight_modules__ena1 ),
    .ena2( weight_modules__ena2 ),
    .ena3( weight_modules__ena3 ),
    .portaaddr( weight_modules__portaaddr ),
    .portaaddrstall( weight_modules__portaaddrstall ),
    .portabyteenamasks( weight_modules__portabyteenamasks ),
    .portadatain_0( weight_modules__portadatain_0 ),
    .portadatain_1( weight_modules__portadatain_1 ),
    .portadataout_0( weight_modules__portadataout_0 ),
    .portadataout_1( weight_modules__portadataout_1 ),
    .portare( weight_modules__portare ),
    .portawe_0( weight_modules__portawe_0 ),
    .portawe_1( weight_modules__portawe_1 ),
    .reset( weight_modules__reset )
  );

  //-------------------------------------------------------------
  // End of component weight_modules
  //-------------------------------------------------------------

  assign mlb_modules__clk = clk;
  assign mlb_modules__reset = reset;
  assign weight_modules__clk = clk;
  assign weight_modules__reset = reset;
  assign input_act_modules__clk = clk;
  assign input_act_modules__reset = reset;
  assign output_act_modules__clk = clk;
  assign output_act_modules__reset = reset;
  assign activation_function_modules__clk = clk;
  assign activation_function_modules__reset = reset;
  assign weight_interconnect__clk = clk;
  assign weight_interconnect__reset = reset;
  assign input_interconnect__clk = clk;
  assign input_interconnect__reset = reset;
  assign output_ps_interconnect__clk = clk;
  assign output_ps_interconnect__reset = reset;
  assign output_interconnect__clk = clk;
  assign output_interconnect__reset = reset;
  assign weight_interconnect__inputs_from_mlb_18 = mlb_modules__a_out_18;
  assign weight_interconnect__inputs_from_mlb_2 = mlb_modules__a_out_2;
  assign weight_interconnect__inputs_from_mlb_22 = mlb_modules__a_out_22;
  assign weight_interconnect__inputs_from_mlb_6 = mlb_modules__a_out_6;
  assign weight_interconnect__inputs_from_mlb_13 = mlb_modules__a_out_13;
  assign weight_interconnect__inputs_from_mlb_20 = mlb_modules__a_out_20;
  assign weight_interconnect__inputs_from_mlb_25 = mlb_modules__a_out_25;
  assign weight_interconnect__inputs_from_mlb_29 = mlb_modules__a_out_29;
  assign weight_interconnect__inputs_from_mlb_16 = mlb_modules__a_out_16;
  assign weight_interconnect__inputs_from_mlb_4 = mlb_modules__a_out_4;
  assign weight_interconnect__inputs_from_mlb_9 = mlb_modules__a_out_9;
  assign weight_interconnect__inputs_from_mlb_0 = mlb_modules__a_out_0;
  assign weight_interconnect__inputs_from_mlb_19 = mlb_modules__a_out_19;
  assign weight_interconnect__inputs_from_mlb_3 = mlb_modules__a_out_3;
  assign weight_interconnect__inputs_from_mlb_7 = mlb_modules__a_out_7;
  assign weight_interconnect__inputs_from_mlb_23 = mlb_modules__a_out_23;
  assign weight_interconnect__inputs_from_mlb_30 = mlb_modules__a_out_30;
  assign weight_interconnect__inputs_from_mlb_14 = mlb_modules__a_out_14;
  assign weight_interconnect__inputs_from_mlb_26 = mlb_modules__a_out_26;
  assign weight_interconnect__inputs_from_mlb_10 = mlb_modules__a_out_10;
  assign weight_interconnect__inputs_from_mlb_21 = mlb_modules__a_out_21;
  assign weight_interconnect__inputs_from_mlb_5 = mlb_modules__a_out_5;
  assign weight_interconnect__inputs_from_mlb_17 = mlb_modules__a_out_17;
  assign weight_interconnect__inputs_from_mlb_1 = mlb_modules__a_out_1;
  assign weight_interconnect__inputs_from_mlb_31 = mlb_modules__a_out_31;
  assign weight_interconnect__inputs_from_mlb_24 = mlb_modules__a_out_24;
  assign weight_interconnect__inputs_from_mlb_28 = mlb_modules__a_out_28;
  assign weight_interconnect__inputs_from_mlb_27 = mlb_modules__a_out_27;
  assign weight_interconnect__inputs_from_mlb_15 = mlb_modules__a_out_15;
  assign weight_interconnect__inputs_from_mlb_12 = mlb_modules__a_out_12;
  assign weight_interconnect__inputs_from_mlb_11 = mlb_modules__a_out_11;
  assign weight_interconnect__inputs_from_mlb_8 = mlb_modules__a_out_8;
  assign mlb_modules__a_4 = weight_interconnect__outputs_to_mlb_4;
  assign mlb_modules__a_3 = weight_interconnect__outputs_to_mlb_3;
  assign mlb_modules__a_6 = weight_interconnect__outputs_to_mlb_6;
  assign mlb_modules__a_26 = weight_interconnect__outputs_to_mlb_26;
  assign mlb_modules__a_9 = weight_interconnect__outputs_to_mlb_9;
  assign mlb_modules__a_30 = weight_interconnect__outputs_to_mlb_30;
  assign mlb_modules__a_28 = weight_interconnect__outputs_to_mlb_28;
  assign mlb_modules__a_24 = weight_interconnect__outputs_to_mlb_24;
  assign mlb_modules__a_22 = weight_interconnect__outputs_to_mlb_22;
  assign mlb_modules__a_31 = weight_interconnect__outputs_to_mlb_31;
  assign mlb_modules__a_21 = weight_interconnect__outputs_to_mlb_21;
  assign mlb_modules__a_19 = weight_interconnect__outputs_to_mlb_19;
  assign mlb_modules__a_17 = weight_interconnect__outputs_to_mlb_17;
  assign mlb_modules__a_13 = weight_interconnect__outputs_to_mlb_13;
  assign mlb_modules__a_18 = weight_interconnect__outputs_to_mlb_18;
  assign mlb_modules__a_0 = weight_interconnect__outputs_to_mlb_0;
  assign mlb_modules__a_5 = weight_interconnect__outputs_to_mlb_5;
  assign mlb_modules__a_8 = weight_interconnect__outputs_to_mlb_8;
  assign mlb_modules__a_7 = weight_interconnect__outputs_to_mlb_7;
  assign mlb_modules__a_2 = weight_interconnect__outputs_to_mlb_2;
  assign mlb_modules__a_1 = weight_interconnect__outputs_to_mlb_1;
  assign mlb_modules__a_12 = weight_interconnect__outputs_to_mlb_12;
  assign mlb_modules__a_20 = weight_interconnect__outputs_to_mlb_20;
  assign mlb_modules__a_14 = weight_interconnect__outputs_to_mlb_14;
  assign mlb_modules__a_16 = weight_interconnect__outputs_to_mlb_16;
  assign mlb_modules__a_29 = weight_interconnect__outputs_to_mlb_29;
  assign mlb_modules__a_27 = weight_interconnect__outputs_to_mlb_27;
  assign mlb_modules__a_25 = weight_interconnect__outputs_to_mlb_25;
  assign mlb_modules__a_23 = weight_interconnect__outputs_to_mlb_23;
  assign mlb_modules__a_11 = weight_interconnect__outputs_to_mlb_11;
  assign mlb_modules__a_10 = weight_interconnect__outputs_to_mlb_10;
  assign mlb_modules__a_15 = weight_interconnect__outputs_to_mlb_15;
  assign weight_interconnect__inputs_from_buffer_0 = weight_modules__portadataout_0;
  assign weight_interconnect__inputs_from_buffer_1 = weight_modules__portadataout_1;
  assign input_interconnect__inputs_from_mlb_31 = mlb_modules__b_cas_out_31;
  assign input_interconnect__inputs_from_mlb_3 = mlb_modules__b_cas_out_3;
  assign input_interconnect__inputs_from_mlb_7 = mlb_modules__b_cas_out_7;
  assign input_interconnect__inputs_from_mlb_1 = mlb_modules__b_cas_out_1;
  assign input_interconnect__inputs_from_mlb_28 = mlb_modules__b_cas_out_28;
  assign input_interconnect__inputs_from_mlb_26 = mlb_modules__b_cas_out_26;
  assign input_interconnect__inputs_from_mlb_4 = mlb_modules__b_cas_out_4;
  assign input_interconnect__inputs_from_mlb_21 = mlb_modules__b_cas_out_21;
  assign input_interconnect__inputs_from_mlb_15 = mlb_modules__b_cas_out_15;
  assign input_interconnect__inputs_from_mlb_24 = mlb_modules__b_cas_out_24;
  assign input_interconnect__inputs_from_mlb_12 = mlb_modules__b_cas_out_12;
  assign input_interconnect__inputs_from_mlb_10 = mlb_modules__b_cas_out_10;
  assign input_interconnect__inputs_from_mlb_27 = mlb_modules__b_cas_out_27;
  assign input_interconnect__inputs_from_mlb_29 = mlb_modules__b_cas_out_29;
  assign input_interconnect__inputs_from_mlb_18 = mlb_modules__b_cas_out_18;
  assign input_interconnect__inputs_from_mlb_5 = mlb_modules__b_cas_out_5;
  assign input_interconnect__inputs_from_mlb_22 = mlb_modules__b_cas_out_22;
  assign input_interconnect__inputs_from_mlb_16 = mlb_modules__b_cas_out_16;
  assign input_interconnect__inputs_from_mlb_8 = mlb_modules__b_cas_out_8;
  assign input_interconnect__inputs_from_mlb_25 = mlb_modules__b_cas_out_25;
  assign input_interconnect__inputs_from_mlb_13 = mlb_modules__b_cas_out_13;
  assign input_interconnect__inputs_from_mlb_11 = mlb_modules__b_cas_out_11;
  assign input_interconnect__inputs_from_mlb_30 = mlb_modules__b_cas_out_30;
  assign input_interconnect__inputs_from_mlb_2 = mlb_modules__b_cas_out_2;
  assign input_interconnect__inputs_from_mlb_19 = mlb_modules__b_cas_out_19;
  assign input_interconnect__inputs_from_mlb_0 = mlb_modules__b_cas_out_0;
  assign input_interconnect__inputs_from_mlb_6 = mlb_modules__b_cas_out_6;
  assign input_interconnect__inputs_from_mlb_23 = mlb_modules__b_cas_out_23;
  assign input_interconnect__inputs_from_mlb_17 = mlb_modules__b_cas_out_17;
  assign input_interconnect__inputs_from_mlb_9 = mlb_modules__b_cas_out_9;
  assign input_interconnect__inputs_from_mlb_14 = mlb_modules__b_cas_out_14;
  assign input_interconnect__inputs_from_mlb_20 = mlb_modules__b_cas_out_20;
  assign mlb_modules__b_cas_in_3 = input_interconnect__outputs_to_mlb_3;
  assign mlb_modules__b_cas_in_6 = input_interconnect__outputs_to_mlb_6;
  assign mlb_modules__b_cas_in_8 = input_interconnect__outputs_to_mlb_8;
  assign mlb_modules__b_cas_in_2 = input_interconnect__outputs_to_mlb_2;
  assign mlb_modules__b_cas_in_18 = input_interconnect__outputs_to_mlb_18;
  assign mlb_modules__b_cas_in_9 = input_interconnect__outputs_to_mlb_9;
  assign mlb_modules__b_cas_in_28 = input_interconnect__outputs_to_mlb_28;
  assign mlb_modules__b_cas_in_31 = input_interconnect__outputs_to_mlb_31;
  assign mlb_modules__b_cas_in_29 = input_interconnect__outputs_to_mlb_29;
  assign mlb_modules__b_cas_in_27 = input_interconnect__outputs_to_mlb_27;
  assign mlb_modules__b_cas_in_22 = input_interconnect__outputs_to_mlb_22;
  assign mlb_modules__b_cas_in_21 = input_interconnect__outputs_to_mlb_21;
  assign mlb_modules__b_cas_in_20 = input_interconnect__outputs_to_mlb_20;
  assign mlb_modules__b_cas_in_19 = input_interconnect__outputs_to_mlb_19;
  assign mlb_modules__b_cas_in_11 = input_interconnect__outputs_to_mlb_11;
  assign mlb_modules__b_cas_in_0 = input_interconnect__outputs_to_mlb_0;
  assign mlb_modules__b_cas_in_4 = input_interconnect__outputs_to_mlb_4;
  assign mlb_modules__b_cas_in_5 = input_interconnect__outputs_to_mlb_5;
  assign mlb_modules__b_cas_in_7 = input_interconnect__outputs_to_mlb_7;
  assign mlb_modules__b_cas_in_26 = input_interconnect__outputs_to_mlb_26;
  assign mlb_modules__b_cas_in_1 = input_interconnect__outputs_to_mlb_1;
  assign mlb_modules__b_cas_in_10 = input_interconnect__outputs_to_mlb_10;
  assign mlb_modules__b_cas_in_12 = input_interconnect__outputs_to_mlb_12;
  assign mlb_modules__b_cas_in_30 = input_interconnect__outputs_to_mlb_30;
  assign mlb_modules__b_cas_in_13 = input_interconnect__outputs_to_mlb_13;
  assign mlb_modules__b_cas_in_24 = input_interconnect__outputs_to_mlb_24;
  assign mlb_modules__b_cas_in_23 = input_interconnect__outputs_to_mlb_23;
  assign mlb_modules__b_cas_in_17 = input_interconnect__outputs_to_mlb_17;
  assign mlb_modules__b_cas_in_15 = input_interconnect__outputs_to_mlb_15;
  assign mlb_modules__b_cas_in_16 = input_interconnect__outputs_to_mlb_16;
  assign mlb_modules__b_cas_in_14 = input_interconnect__outputs_to_mlb_14;
  assign mlb_modules__b_cas_in_25 = input_interconnect__outputs_to_mlb_25;
  assign input_interconnect__inputs_from_buffer_0 = input_act_modules__portadataout_0;
  assign input_interconnect__inputs_from_buffer_1 = input_act_modules__portadataout_1;
  assign output_ps_interconnect__inputs_from_mlb_21 = mlb_modules__res_cas_out_21;
  assign output_ps_interconnect__inputs_from_mlb_6 = mlb_modules__res_cas_out_6;
  assign output_ps_interconnect__inputs_from_mlb_11 = mlb_modules__res_cas_out_11;
  assign output_ps_interconnect__inputs_from_mlb_13 = mlb_modules__res_cas_out_13;
  assign output_ps_interconnect__inputs_from_mlb_28 = mlb_modules__res_cas_out_28;
  assign output_ps_interconnect__inputs_from_mlb_1 = mlb_modules__res_cas_out_1;
  assign output_ps_interconnect__inputs_from_mlb_16 = mlb_modules__res_cas_out_16;
  assign output_ps_interconnect__inputs_from_mlb_22 = mlb_modules__res_cas_out_22;
  assign output_ps_interconnect__inputs_from_mlb_27 = mlb_modules__res_cas_out_27;
  assign output_ps_interconnect__inputs_from_mlb_8 = mlb_modules__res_cas_out_8;
  assign output_ps_interconnect__inputs_from_mlb_29 = mlb_modules__res_cas_out_29;
  assign output_ps_interconnect__inputs_from_mlb_14 = mlb_modules__res_cas_out_14;
  assign output_ps_interconnect__inputs_from_mlb_7 = mlb_modules__res_cas_out_7;
  assign output_ps_interconnect__inputs_from_mlb_17 = mlb_modules__res_cas_out_17;
  assign output_ps_interconnect__inputs_from_mlb_2 = mlb_modules__res_cas_out_2;
  assign output_ps_interconnect__inputs_from_mlb_9 = mlb_modules__res_cas_out_9;
  assign output_ps_interconnect__inputs_from_mlb_24 = mlb_modules__res_cas_out_24;
  assign output_ps_interconnect__inputs_from_mlb_30 = mlb_modules__res_cas_out_30;
  assign output_ps_interconnect__inputs_from_mlb_23 = mlb_modules__res_cas_out_23;
  assign output_ps_interconnect__inputs_from_mlb_4 = mlb_modules__res_cas_out_4;
  assign output_ps_interconnect__inputs_from_mlb_18 = mlb_modules__res_cas_out_18;
  assign output_ps_interconnect__inputs_from_mlb_15 = mlb_modules__res_cas_out_15;
  assign output_ps_interconnect__inputs_from_mlb_25 = mlb_modules__res_cas_out_25;
  assign output_ps_interconnect__inputs_from_mlb_10 = mlb_modules__res_cas_out_10;
  assign output_ps_interconnect__inputs_from_mlb_3 = mlb_modules__res_cas_out_3;
  assign output_ps_interconnect__inputs_from_mlb_5 = mlb_modules__res_cas_out_5;
  assign output_ps_interconnect__inputs_from_mlb_20 = mlb_modules__res_cas_out_20;
  assign output_ps_interconnect__inputs_from_mlb_31 = mlb_modules__res_cas_out_31;
  assign output_ps_interconnect__inputs_from_mlb_12 = mlb_modules__res_cas_out_12;
  assign output_ps_interconnect__inputs_from_mlb_0 = mlb_modules__res_cas_out_0;
  assign output_ps_interconnect__inputs_from_mlb_26 = mlb_modules__res_cas_out_26;
  assign output_ps_interconnect__inputs_from_mlb_19 = mlb_modules__res_cas_out_19;
  assign mlb_modules__res_cas_in_2 = output_ps_interconnect__outputs_to_mlb_2;
  assign mlb_modules__res_cas_in_5 = output_ps_interconnect__outputs_to_mlb_5;
  assign mlb_modules__res_cas_in_7 = output_ps_interconnect__outputs_to_mlb_7;
  assign mlb_modules__res_cas_in_1 = output_ps_interconnect__outputs_to_mlb_1;
  assign mlb_modules__res_cas_in_8 = output_ps_interconnect__outputs_to_mlb_8;
  assign mlb_modules__res_cas_in_19 = output_ps_interconnect__outputs_to_mlb_19;
  assign mlb_modules__res_cas_in_13 = output_ps_interconnect__outputs_to_mlb_13;
  assign mlb_modules__res_cas_in_17 = output_ps_interconnect__outputs_to_mlb_17;
  assign mlb_modules__res_cas_in_10 = output_ps_interconnect__outputs_to_mlb_10;
  assign mlb_modules__res_cas_in_27 = output_ps_interconnect__outputs_to_mlb_27;
  assign mlb_modules__res_cas_in_30 = output_ps_interconnect__outputs_to_mlb_30;
  assign mlb_modules__res_cas_in_28 = output_ps_interconnect__outputs_to_mlb_28;
  assign mlb_modules__res_cas_in_26 = output_ps_interconnect__outputs_to_mlb_26;
  assign mlb_modules__res_cas_in_21 = output_ps_interconnect__outputs_to_mlb_21;
  assign mlb_modules__res_cas_in_20 = output_ps_interconnect__outputs_to_mlb_20;
  assign mlb_modules__res_cas_in_18 = output_ps_interconnect__outputs_to_mlb_18;
  assign mlb_modules__res_cas_in_3 = output_ps_interconnect__outputs_to_mlb_3;
  assign mlb_modules__res_cas_in_4 = output_ps_interconnect__outputs_to_mlb_4;
  assign mlb_modules__res_cas_in_6 = output_ps_interconnect__outputs_to_mlb_6;
  assign mlb_modules__res_cas_in_0 = output_ps_interconnect__outputs_to_mlb_0;
  assign mlb_modules__res_cas_in_25 = output_ps_interconnect__outputs_to_mlb_25;
  assign mlb_modules__res_cas_in_9 = output_ps_interconnect__outputs_to_mlb_9;
  assign mlb_modules__res_cas_in_15 = output_ps_interconnect__outputs_to_mlb_15;
  assign mlb_modules__res_cas_in_11 = output_ps_interconnect__outputs_to_mlb_11;
  assign mlb_modules__res_cas_in_31 = output_ps_interconnect__outputs_to_mlb_31;
  assign mlb_modules__res_cas_in_12 = output_ps_interconnect__outputs_to_mlb_12;
  assign mlb_modules__res_cas_in_29 = output_ps_interconnect__outputs_to_mlb_29;
  assign mlb_modules__res_cas_in_24 = output_ps_interconnect__outputs_to_mlb_24;
  assign mlb_modules__res_cas_in_23 = output_ps_interconnect__outputs_to_mlb_23;
  assign mlb_modules__res_cas_in_22 = output_ps_interconnect__outputs_to_mlb_22;
  assign mlb_modules__res_cas_in_16 = output_ps_interconnect__outputs_to_mlb_16;
  assign mlb_modules__res_cas_in_14 = output_ps_interconnect__outputs_to_mlb_14;
  assign activation_function_modules__activation_function_in_3 = output_ps_interconnect__outputs_to_afs_3;
  assign activation_function_modules__activation_function_in_5 = output_ps_interconnect__outputs_to_afs_5;
  assign activation_function_modules__activation_function_in_1 = output_ps_interconnect__outputs_to_afs_1;
  assign activation_function_modules__activation_function_in_9 = output_ps_interconnect__outputs_to_afs_9;
  assign activation_function_modules__activation_function_in_7 = output_ps_interconnect__outputs_to_afs_7;
  assign activation_function_modules__activation_function_in_12 = output_ps_interconnect__outputs_to_afs_12;
  assign activation_function_modules__activation_function_in_14 = output_ps_interconnect__outputs_to_afs_14;
  assign activation_function_modules__activation_function_in_15 = output_ps_interconnect__outputs_to_afs_15;
  assign activation_function_modules__activation_function_in_13 = output_ps_interconnect__outputs_to_afs_13;
  assign activation_function_modules__activation_function_in_11 = output_ps_interconnect__outputs_to_afs_11;
  assign activation_function_modules__activation_function_in_10 = output_ps_interconnect__outputs_to_afs_10;
  assign activation_function_modules__activation_function_in_8 = output_ps_interconnect__outputs_to_afs_8;
  assign activation_function_modules__activation_function_in_6 = output_ps_interconnect__outputs_to_afs_6;
  assign activation_function_modules__activation_function_in_4 = output_ps_interconnect__outputs_to_afs_4;
  assign activation_function_modules__activation_function_in_2 = output_ps_interconnect__outputs_to_afs_2;
  assign activation_function_modules__activation_function_in_0 = output_ps_interconnect__outputs_to_afs_0;
  assign output_interconnect__input_3 = activation_function_modules__activation_function_out_3;
  assign output_interconnect__input_7 = activation_function_modules__activation_function_out_7;
  assign output_interconnect__input_2 = activation_function_modules__activation_function_out_2;
  assign output_interconnect__input_0 = activation_function_modules__activation_function_out_0;
  assign output_interconnect__input_6 = activation_function_modules__activation_function_out_6;
  assign output_interconnect__input_13 = activation_function_modules__activation_function_out_13;
  assign output_interconnect__input_10 = activation_function_modules__activation_function_out_10;
  assign output_interconnect__input_1 = activation_function_modules__activation_function_out_1;
  assign output_interconnect__input_5 = activation_function_modules__activation_function_out_5;
  assign output_interconnect__input_15 = activation_function_modules__activation_function_out_15;
  assign output_interconnect__input_12 = activation_function_modules__activation_function_out_12;
  assign output_interconnect__input_9 = activation_function_modules__activation_function_out_9;
  assign output_interconnect__input_4 = activation_function_modules__activation_function_out_4;
  assign output_interconnect__input_8 = activation_function_modules__activation_function_out_8;
  assign output_interconnect__input_14 = activation_function_modules__activation_function_out_14;
  assign output_interconnect__input_11 = activation_function_modules__activation_function_out_11;
  assign output_act_modules__portadatain_1 = output_interconnect__output_1;
  assign output_act_modules__portadatain_2 = output_interconnect__output_2;
  assign output_act_modules__portadatain_3 = output_interconnect__output_3;
  assign output_act_modules__portadatain_0 = output_interconnect__output_0;
  assign portadataout_2 = output_act_modules__portadataout_2;
  assign portadataout_3 = output_act_modules__portadataout_3;
  assign portadataout_0 = output_act_modules__portadataout_0;
  assign portadataout_1 = output_act_modules__portadataout_1;
  assign input_datain_tieoff = input_datain;
  assign input_act_modules__portadatain_0 = input_datain;
  assign input_act_modules__portadatain_1 = input_datain;
  assign weight_datain_tieoff = weight_datain;
  assign weight_modules__portadatain_0 = weight_datain;
  assign weight_modules__portadatain_1 = weight_datain;
  assign mlb_modules_hp_en_top_tieoff = mlb_modules_hp_en_top;
  assign mlb_modules__hp_en = mlb_modules_hp_en_top;
  assign mlb_modules_acc_en_top_tieoff = mlb_modules_acc_en_top;
  assign mlb_modules__acc_en = mlb_modules_acc_en_top;
  assign mlb_modules_config_en_top_tieoff = mlb_modules_config_en_top;
  assign mlb_modules__config_en = mlb_modules_config_en_top;
  assign mlb_modules_config_in_top_tieoff = mlb_modules_config_in_top;
  assign mlb_modules__config_in = mlb_modules_config_in_top;
  assign mlb_modules_b_en_top_tieoff = mlb_modules_b_en_top;
  assign mlb_modules__b_en = mlb_modules_b_en_top;
  assign mlb_modules_a_en_top_tieoff = mlb_modules_a_en_top;
  assign mlb_modules__a_en = mlb_modules_a_en_top;
  assign output_act_modules_portare_top_tieoff = output_act_modules_portare_top;
  assign output_act_modules__portare = output_act_modules_portare_top;
  assign output_act_modules_ena3_top_tieoff = output_act_modules_ena3_top;
  assign output_act_modules__ena3 = output_act_modules_ena3_top;
  assign output_act_modules_clr1_top_tieoff = output_act_modules_clr1_top;
  assign output_act_modules__clr1 = output_act_modules_clr1_top;
  assign output_act_modules_portaaddrstall_top_tieoff = output_act_modules_portaaddrstall_top;
  assign output_act_modules__portaaddrstall = output_act_modules_portaaddrstall_top;
  assign output_act_modules_clr0_top_tieoff = output_act_modules_clr0_top;
  assign output_act_modules__clr0 = output_act_modules_clr0_top;
  assign output_act_modules_portabyteenamasks_top_tieoff = output_act_modules_portabyteenamasks_top;
  assign output_act_modules__portabyteenamasks = output_act_modules_portabyteenamasks_top;
  assign output_act_modules_portawe_3_top_tieoff = output_act_modules_portawe_3_top;
  assign output_act_modules__portawe_3 = output_act_modules_portawe_3_top;
  assign output_act_modules_ena0_top_tieoff = output_act_modules_ena0_top;
  assign output_act_modules__ena0 = output_act_modules_ena0_top;
  assign output_act_modules_portawe_0_top_tieoff = output_act_modules_portawe_0_top;
  assign output_act_modules__portawe_0 = output_act_modules_portawe_0_top;
  assign output_act_modules_clk_portain_top_tieoff = output_act_modules_clk_portain_top;
  assign output_act_modules__clk_portain = output_act_modules_clk_portain_top;
  assign output_act_modules_portawe_1_top_tieoff = output_act_modules_portawe_1_top;
  assign output_act_modules__portawe_1 = output_act_modules_portawe_1_top;
  assign output_act_modules_ena1_top_tieoff = output_act_modules_ena1_top;
  assign output_act_modules__ena1 = output_act_modules_ena1_top;
  assign output_act_modules_portawe_2_top_tieoff = output_act_modules_portawe_2_top;
  assign output_act_modules__portawe_2 = output_act_modules_portawe_2_top;
  assign output_act_modules_portaaddr_top_tieoff = output_act_modules_portaaddr_top;
  assign output_act_modules__portaaddr = output_act_modules_portaaddr_top;
  assign output_act_modules_ena2_top_tieoff = output_act_modules_ena2_top;
  assign output_act_modules__ena2 = output_act_modules_ena2_top;
  assign output_act_modules_clk_portaout_top_tieoff = output_act_modules_clk_portaout_top;
  assign output_act_modules__clk_portaout = output_act_modules_clk_portaout_top;
  assign input_act_modules_ena2_top_tieoff = input_act_modules_ena2_top;
  assign input_act_modules__ena2 = input_act_modules_ena2_top;
  assign input_act_modules_clr0_top_tieoff = input_act_modules_clr0_top;
  assign input_act_modules__clr0 = input_act_modules_clr0_top;
  assign input_act_modules_portabyteenamasks_top_tieoff = input_act_modules_portabyteenamasks_top;
  assign input_act_modules__portabyteenamasks = input_act_modules_portabyteenamasks_top;
  assign input_act_modules_portawe_1_top_tieoff = input_act_modules_portawe_1_top;
  assign input_act_modules__portawe_1 = input_act_modules_portawe_1_top;
  assign input_act_modules_clk_portaout_top_tieoff = input_act_modules_clk_portaout_top;
  assign input_act_modules__clk_portaout = input_act_modules_clk_portaout_top;
  assign input_act_modules_clk_portain_top_tieoff = input_act_modules_clk_portain_top;
  assign input_act_modules__clk_portain = input_act_modules_clk_portain_top;
  assign input_act_modules_portaaddrstall_top_tieoff = input_act_modules_portaaddrstall_top;
  assign input_act_modules__portaaddrstall = input_act_modules_portaaddrstall_top;
  assign input_act_modules_ena1_top_tieoff = input_act_modules_ena1_top;
  assign input_act_modules__ena1 = input_act_modules_ena1_top;
  assign input_act_modules_clr1_top_tieoff = input_act_modules_clr1_top;
  assign input_act_modules__clr1 = input_act_modules_clr1_top;
  assign input_act_modules_portaaddr_top_tieoff = input_act_modules_portaaddr_top;
  assign input_act_modules__portaaddr = input_act_modules_portaaddr_top;
  assign input_act_modules_ena3_top_tieoff = input_act_modules_ena3_top;
  assign input_act_modules__ena3 = input_act_modules_ena3_top;
  assign input_act_modules_ena0_top_tieoff = input_act_modules_ena0_top;
  assign input_act_modules__ena0 = input_act_modules_ena0_top;
  assign input_act_modules_portare_top_tieoff = input_act_modules_portare_top;
  assign input_act_modules__portare = input_act_modules_portare_top;
  assign input_act_modules_portawe_0_top_tieoff = input_act_modules_portawe_0_top;
  assign input_act_modules__portawe_0 = input_act_modules_portawe_0_top;
  assign weight_modules_portare_top_tieoff = weight_modules_portare_top;
  assign weight_modules__portare = weight_modules_portare_top;
  assign weight_modules_clr0_top_tieoff = weight_modules_clr0_top;
  assign weight_modules__clr0 = weight_modules_clr0_top;
  assign weight_modules_portabyteenamasks_top_tieoff = weight_modules_portabyteenamasks_top;
  assign weight_modules__portabyteenamasks = weight_modules_portabyteenamasks_top;
  assign weight_modules_ena2_top_tieoff = weight_modules_ena2_top;
  assign weight_modules__ena2 = weight_modules_ena2_top;
  assign weight_modules_clk_portaout_top_tieoff = weight_modules_clk_portaout_top;
  assign weight_modules__clk_portaout = weight_modules_clk_portaout_top;
  assign weight_modules_clk_portain_top_tieoff = weight_modules_clk_portain_top;
  assign weight_modules__clk_portain = weight_modules_clk_portain_top;
  assign weight_modules_ena1_top_tieoff = weight_modules_ena1_top;
  assign weight_modules__ena1 = weight_modules_ena1_top;
  assign weight_modules_clr1_top_tieoff = weight_modules_clr1_top;
  assign weight_modules__clr1 = weight_modules_clr1_top;
  assign weight_modules_portaaddr_top_tieoff = weight_modules_portaaddr_top;
  assign weight_modules__portaaddr = weight_modules_portaaddr_top;
  assign weight_modules_portaaddrstall_top_tieoff = weight_modules_portaaddrstall_top;
  assign weight_modules__portaaddrstall = weight_modules_portaaddrstall_top;
  assign weight_modules_ena0_top_tieoff = weight_modules_ena0_top;
  assign weight_modules__ena0 = weight_modules_ena0_top;
  assign weight_modules_portawe_0_top_tieoff = weight_modules_portawe_0_top;
  assign weight_modules__portawe_0 = weight_modules_portawe_0_top;
  assign weight_modules_ena3_top_tieoff = weight_modules_ena3_top;
  assign weight_modules__ena3 = weight_modules_ena3_top;
  assign weight_modules_portawe_1_top_tieoff = weight_modules_portawe_1_top;
  assign weight_modules__portawe_1 = weight_modules_portawe_1_top;

endmodule


// PyMTL Component SM_BufferWen Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_BufferWen__buf_count_width_1__curr_buffer_count_0
(
buffer_count,
clk,
reset,
we,
we_in
);
input  [0:0] buffer_count ;
input  [0:0] clk ;
input  [0:0] reset ;
output [0:0] we ;
input  [0:0] we_in ;

//  localparam wire [0:0] __const__curr_buffer_count_at_upblk_set_wen0  = 1'd0;
  wire [0:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  wire [0:0] we_in_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:27
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.we @= s.we_in
  //     else:
  //         s.we @= 0
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 1'd0 ) begin
      we = we_in;
    end
    else
      we = 1'd0;
  end

  assign we_in_tieoff = we_in;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_BufferWen Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_BufferWen__buf_count_width_1__curr_buffer_count_1
(
buffer_count,
clk,
reset,
we,
we_in
);
input  [0:0] buffer_count ;
input  [0:0] clk ;
input  [0:0] reset ;
output [0:0] we ;
input  [0:0] we_in ;

//  localparam wire [0:0] __const__curr_buffer_count_at_upblk_set_wen0  = 1'd1;
  wire [0:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  wire [0:0] we_in_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:27
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.we @= s.we_in
  //     else:
  //         s.we @= 0
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 1'd1 ) begin
      we = we_in;
    end
    else
      we = 1'd0;
  end

  assign we_in_tieoff = we_in;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_LoadBufs Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_LoadBufs__buffer_count_2__write_count_256
(
buf_address,
clk,
rdy,
reset,
start,
wen_0,
wen_1
);
output [7:0] buf_address ;
input  [0:0] clk ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen_0 ;
output [0:0] wen_1 ;

//  localparam wire [0:0] __const__INIT_at_upblk_set_wen  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_set_wen  = 1'd1;
//  localparam wire [8:0] __const__write_count_at_upblk_set_wen  = 9'd256;
//  localparam wire [1:0] __const__buffer_count_at_upblk_set_wen  = 2'd2;
  wire [0:0] buf_count;
  wire [1:0] buf_state;
  wire [0:0] buf_wen;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component buf_wen0
  //-------------------------------------------------------------

  wire [0:0] buf_wen0__buffer_count;
  wire [0:0] buf_wen0__clk;
  wire [0:0] buf_wen0__reset;
  wire [0:0] buf_wen0__we;
  wire [0:0] buf_wen0__we_in;

  SM_BufferWen__buf_count_width_1__curr_buffer_count_0 buf_wen0
  (
    .buffer_count( buf_wen0__buffer_count ),
    .clk( buf_wen0__clk ),
    .reset( buf_wen0__reset ),
    .we( buf_wen0__we ),
    .we_in( buf_wen0__we_in )
  );

  //-------------------------------------------------------------
  // End of component buf_wen0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component buf_wen1
  //-------------------------------------------------------------

  wire [0:0] buf_wen1__buffer_count;
  wire [0:0] buf_wen1__clk;
  wire [0:0] buf_wen1__reset;
  wire [0:0] buf_wen1__we;
  wire [0:0] buf_wen1__we_in;

  SM_BufferWen__buf_count_width_1__curr_buffer_count_1 buf_wen1
  (
    .buffer_count( buf_wen1__buffer_count ),
    .clk( buf_wen1__clk ),
    .reset( buf_wen1__reset ),
    .we( buf_wen1__we ),
    .we_in( buf_wen1__we_in )
  );

  //-------------------------------------------------------------
  // End of component buf_wen1
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:82
  // @update_ff
  // def upblk_set_wen():
  //     if s.reset:
  //         s.buf_count <<= 0
  //         s.buf_wen <<= 0
  //         s.buf_state <<= INIT
  //         s.buf_address <<= 0
  //         s.rdy <<= 1
  //     else:
  //         if (s.buf_state == INIT):
  //             if (s.start):
  //                 s.buf_state <<= LOAD
  //                 s.buf_wen <<= 1
  //                 s.rdy <<= 0
  //         elif (s.buf_state == LOAD):
  //             if (s.buf_address == (write_count-1)):
  //                 s.buf_address <<= 0
  //                 if (s.buf_count == (buffer_count-1)):
  //                     s.buf_state <<= INIT
  //                     s.rdy <<= 1
  //                     s.buf_count <<= 0
  //                     s.buf_wen <<= 0
  //                 else:
  //                     s.buf_state <<= LOAD
  //                     s.buf_count <<= s.buf_count + 1
  //             else:
  //                 s.buf_address <<= s.buf_address + 1
  
  always @(posedge clk) begin : upblk_set_wen
    if ( reset ) begin
      buf_count <= 1'd0;
      buf_wen <= 1'd0;
      buf_state <= 1'd0;
      buf_address <= 8'd0;
      rdy <= 1'd1;
    end
    else if ( buf_state == 1'd0 ) begin
      if ( start ) begin
        buf_state <= 1'd1;
        buf_wen <= 1'd1;
        rdy <= 1'd0;
      end
    end
    else if ( buf_state == 1'd1 ) begin
      if ( buf_address == ( 9'd256 - 8'd1 ) ) begin
        buf_address <= 8'd0;
        if ( buf_count == ( 2'd2 - 1'd1 ) ) begin
          buf_state <= 1'd0;
          rdy <= 1'd1;
          buf_count <= 1'd0;
          buf_wen <= 1'd0;
        end
        else begin
          buf_state <= 1'd1;
          buf_count <= buf_count + 1'd1;
        end
      end
      else
        buf_address <= buf_address + 8'd1;
    end
  end

  assign buf_wen0__clk = clk;
  assign buf_wen0__reset = reset;
  assign buf_wen0__buffer_count = buf_count;
  assign buf_wen0__we_in = buf_wen;
  assign wen_0 = buf_wen0__we;
  assign buf_wen1__clk = clk;
  assign buf_wen1__reset = reset;
  assign buf_wen1__buffer_count = buf_count;
  assign buf_wen1__we_in = buf_wen;
  assign wen_1 = buf_wen1__we;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_LoadBufs Definition
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_LoadBufs__buffer_count_2__write_count_4
(
buf_address,
clk,
rdy,
reset,
start,
wen_0,
wen_1
);
output [1:0] buf_address ;
input  [0:0] clk ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen_0 ;
output [0:0] wen_1 ;

//  localparam wire [0:0] __const__INIT_at_upblk_set_wen  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_set_wen  = 1'd1;
//  localparam wire [2:0] __const__write_count_at_upblk_set_wen  = 3'd4;
//  localparam wire [1:0] __const__buffer_count_at_upblk_set_wen  = 2'd2;
  wire [0:0] buf_count;
  wire [1:0] buf_state;
  wire [0:0] buf_wen;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  //-------------------------------------------------------------
  // Component buf_wen0
  //-------------------------------------------------------------

  wire [0:0] buf_wen0__buffer_count;
  wire [0:0] buf_wen0__clk;
  wire [0:0] buf_wen0__reset;
  wire [0:0] buf_wen0__we;
  wire [0:0] buf_wen0__we_in;

  SM_BufferWen__buf_count_width_1__curr_buffer_count_0 buf_wen0
  (
    .buffer_count( buf_wen0__buffer_count ),
    .clk( buf_wen0__clk ),
    .reset( buf_wen0__reset ),
    .we( buf_wen0__we ),
    .we_in( buf_wen0__we_in )
  );

  //-------------------------------------------------------------
  // End of component buf_wen0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component buf_wen1
  //-------------------------------------------------------------

  wire [0:0] buf_wen1__buffer_count;
  wire [0:0] buf_wen1__clk;
  wire [0:0] buf_wen1__reset;
  wire [0:0] buf_wen1__we;
  wire [0:0] buf_wen1__we_in;

  SM_BufferWen__buf_count_width_1__curr_buffer_count_1 buf_wen1
  (
    .buffer_count( buf_wen1__buffer_count ),
    .clk( buf_wen1__clk ),
    .reset( buf_wen1__reset ),
    .we( buf_wen1__we ),
    .we_in( buf_wen1__we_in )
  );

  //-------------------------------------------------------------
  // End of component buf_wen1
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:82
  // @update_ff
  // def upblk_set_wen():
  //     if s.reset:
  //         s.buf_count <<= 0
  //         s.buf_wen <<= 0
  //         s.buf_state <<= INIT
  //         s.buf_address <<= 0
  //         s.rdy <<= 1
  //     else:
  //         if (s.buf_state == INIT):
  //             if (s.start):
  //                 s.buf_state <<= LOAD
  //                 s.buf_wen <<= 1
  //                 s.rdy <<= 0
  //         elif (s.buf_state == LOAD):
  //             if (s.buf_address == (write_count-1)):
  //                 s.buf_address <<= 0
  //                 if (s.buf_count == (buffer_count-1)):
  //                     s.buf_state <<= INIT
  //                     s.rdy <<= 1
  //                     s.buf_count <<= 0
  //                     s.buf_wen <<= 0
  //                 else:
  //                     s.buf_state <<= LOAD
  //                     s.buf_count <<= s.buf_count + 1
  //             else:
  //                 s.buf_address <<= s.buf_address + 1
  
  always @(posedge clk) begin : upblk_set_wen
    if ( reset ) begin
      buf_count <= 1'd0;
      buf_wen <= 1'd0;
      buf_state <= 1'd0;
      buf_address <= 2'd0;
      rdy <= 1'd1;
    end
    else if ( buf_state == 1'd0 ) begin
      if ( start ) begin
        buf_state <= 1'd1;
        buf_wen <= 1'd1;
        rdy <= 1'd0;
      end
    end
    else if ( buf_state == 1'd1 ) begin
      if ( buf_address == ( 3'd4 - 2'd1 ) ) begin
        buf_address <= 2'd0;
        if ( buf_count == ( 2'd2 - 1'd1 ) ) begin
          buf_state <= 1'd0;
          rdy <= 1'd1;
          buf_count <= 1'd0;
          buf_wen <= 1'd0;
        end
        else begin
          buf_state <= 1'd1;
          buf_count <= buf_count + 1'd1;
        end
      end
      else
        buf_address <= buf_address + 2'd1;
    end
  end

  assign buf_wen0__clk = clk;
  assign buf_wen0__reset = reset;
  assign buf_wen0__buffer_count = buf_count;
  assign buf_wen0__we_in = buf_wen;
  assign wen_0 = buf_wen0__we;
  assign buf_wen1__clk = clk;
  assign buf_wen1__reset = reset;
  assign buf_wen1__buffer_count = buf_count;
  assign buf_wen1__we_in = buf_wen;
  assign wen_1 = buf_wen1__we;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_PreloadMLBWeights Definition
// Full name: SM_PreloadMLBWeights__addr_width_2__num_outer_tiles_2__outer_tile_size_96__inner_tile_size_12__outer_tile_repeat_x_2__inner_tile_repeat_x_1
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_PreloadMLBWeights__0d8fd8f20b43a105
(
address,
clk,
rdy,
reset,
start,
wen
);
output [1:0] address ;
input  [0:0] clk ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen ;

//  localparam wire [3:0] __const__inner_tile_size_at_upblk_preload_comb  = 4'd12;
//  localparam wire [6:0] __const__outer_tile_size_at_upblk_preload_comb  = 7'd96;
//  localparam wire [1:0] __const__addr_width_at_upblk_preload_comb  = 2'd2;
//  localparam wire [0:0] __const__INIT_at_upblk_preload_ff  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_preload_ff  = 1'd1;
//  localparam wire [3:0] __const__inner_tile_size_at_upblk_preload_ff  = 4'd12;
//  localparam wire [0:0] __const__inner_tile_repeat_x_at_upblk_preload_ff  = 1'd1;
//  localparam wire [3:0] __const__max_inner_tile_idx_at_upblk_preload_ff  = 4'd8;
//  localparam wire [1:0] __const__outer_tile_repeat_x_at_upblk_preload_ff  = 2'd2;
//  localparam wire [1:0] __const__num_outer_tiles_at_upblk_preload_ff  = 2'd2;
  wire [6:0] addr_w;
  wire [0:0] clk_tieoff;
  wire [6:0] index_within_inner_tile;
  wire [6:0] inner_tile_index;
  wire [0:0] inner_tile_repeat_count;
  wire [6:0] outer_tile_index;
  wire [0:0] outer_tile_repeat_count;
  wire [0:0] reset_tieoff;
  wire [1:0] state;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:187
  // @update
  // def upblk_preload_comb():
  //     s.addr_w @= s.index_within_inner_tile + s.inner_tile_index*inner_tile_size + \
  //                  s.outer_tile_index*outer_tile_size
  //     s.address @= s.addr_w[0:addr_width]
  
  always@(*) begin : upblk_preload_comb
    addr_w = ( index_within_inner_tile + ( inner_tile_index * 4'd12 ) ) + ( outer_tile_index * 7'd96 );
    address = addr_w[3'd1:3'd0];
  end

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:193
  // @update_ff
  // def upblk_preload_ff():
  //     if s.reset:
  //         s.wen <<= 0
  //         s.state <<= INIT
  //         s.rdy <<= 1
  //         s.outer_tile_repeat_count <<= 0
  //         s.inner_tile_repeat_count <<= 0
  //         s.index_within_inner_tile <<= 0
  //         s.inner_tile_index <<= 0
  //         s.outer_tile_index <<= 0
  //     else:
  //         if (s.state == INIT):
  //             if (s.start):
  //                 s.state <<= LOAD
  //                 s.wen <<= 1
  //                 s.rdy <<= 0
  //         elif (s.state == LOAD):
  //             if (s.index_within_inner_tile < (inner_tile_size - 1)):
  //                 s.index_within_inner_tile <<= s.index_within_inner_tile + 1
  //             else:
  //                 s.index_within_inner_tile <<= 0
  //                 if (s.inner_tile_repeat_count < (inner_tile_repeat_x - 1)):
  //                     s.inner_tile_repeat_count <<= s.inner_tile_repeat_count + 1
  //                 else:
  //                     s.inner_tile_repeat_count <<= 0
  //                     if (s.inner_tile_index < (max_inner_tile_idx - 1)):
  //                         s.inner_tile_index <<= s.inner_tile_index + 1
  //                     else:
  //                         s.inner_tile_index <<= 0
  //                         if (s.outer_tile_repeat_count < (outer_tile_repeat_x - 1)):
  //                             s.outer_tile_repeat_count <<= s.outer_tile_repeat_count + 1
  //                         else:
  //                             s.outer_tile_repeat_count <<= 0
  //                             if (s.outer_tile_index < (num_outer_tiles - 1)):
  //                                 s.outer_tile_index <<= s.outer_tile_index + 1
  //                             else:
  //                                 s.outer_tile_index <<= 0
  //                                 s.state <<= INIT
  //                                 s.wen <<= 0
  //                                 s.rdy <<= 1
  
  always @(posedge clk) begin : upblk_preload_ff
    if ( reset ) begin
      wen <= 1'd0;
      state <= 1'd0;
      rdy <= 1'd1;
      outer_tile_repeat_count <= 1'd0;
      inner_tile_repeat_count <= 1'd0;
      index_within_inner_tile <= 7'd0;
      inner_tile_index <= 7'd0;
      outer_tile_index <= 7'd0;
    end
    else if ( state == 1'd0 ) begin
      if ( start ) begin
        state <= 1'd1;
        wen <= 1'd1;
        rdy <= 1'd0;
      end
    end
    else if ( state == 1'd1 ) begin
      if ( index_within_inner_tile < ( 4'd12 - 7'd1 ) ) begin
        index_within_inner_tile <= index_within_inner_tile + 7'd1;
      end
      else begin
        index_within_inner_tile <= 7'd0;
        if ( inner_tile_repeat_count < ( 1'd1 - 1'd1 ) ) begin
          inner_tile_repeat_count <= inner_tile_repeat_count + 1'd1;
        end
        else begin
          inner_tile_repeat_count <= 1'd0;
          if ( inner_tile_index < ( 4'd8 - 7'd1 ) ) begin
            inner_tile_index <= inner_tile_index + 7'd1;
          end
          else begin
            inner_tile_index <= 7'd0;
            if ( outer_tile_repeat_count < ( 2'd2 - 1'd1 ) ) begin
              outer_tile_repeat_count <= outer_tile_repeat_count + 1'd1;
            end
            else begin
              outer_tile_repeat_count <= 1'd0;
              if ( outer_tile_index < ( 2'd2 - 7'd1 ) ) begin
                outer_tile_index <= outer_tile_index + 7'd1;
              end
              else begin
                outer_tile_index <= 7'd0;
                state <= 1'd0;
                wen <= 1'd0;
                rdy <= 1'd1;
              end
            end
          end
        end
      end
    end
  end

  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_IterateThruAddresses Definition
// Full name: SM_IterateThruAddresses__write_count_256__addr_width_8__initial_address_0
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_IterateThruAddresses__319b41569fe2d577
(
address,
clk,
incr,
rdy,
reset,
start,
wen
);
output [7:0] address ;
input  [0:0] clk ;
output [7:0] incr ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen ;

//  localparam wire [0:0] __const__abs_init_val_at_upblk_set_wenc  = 1'd0;
//  localparam wire [3:0] __const__addr_width_at_upblk_set_wenc  = 4'd8;
//  localparam wire [0:0] __const__INIT_at_upblk_set_wen  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_set_wen  = 1'd1;
//  localparam wire [8:0] __const__write_count_at_upblk_set_wen  = 9'd256;
  wire [7:0] address_offset;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  wire [3:0] state;
  wire [7:0] w_address;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:253
  // @update
  // def upblk_set_wenc():
  //     if (s.wen):
  //         s.w_address @= s.incr + abs_init_val
  //     else:
  //         s.w_address @= 0
  //     s.address @= s.w_address[0:addr_width]
  
  always@(*) begin : upblk_set_wenc
    if ( wen ) begin
      w_address = incr + 1'd0;
    end
    else
      w_address = 8'd0;
    address = w_address[3'd7:3'd0];
  end

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:262
  // @update_ff
  // def upblk_set_wen():
  //     if s.reset:
  //         s.state <<= INIT
  //         s.incr <<= 0
  //         s.rdy <<= 1
  //         s.wen <<= 0
  //     else:
  //         if (s.state == INIT):
  //             if (s.start):
  //                 s.state <<= LOAD
  //                 s.rdy <<= 0
  //                 s.wen <<= 1
  //             s.incr <<= 0
  //         elif (s.state == LOAD):
  //             if (s.incr == (write_count-1)):
  //                 s.state <<= INIT
  //                 s.rdy <<= 1
  //                 s.wen <<= 0
  //                 s.incr <<= 0
  //             else:
  //                 s.incr <<= s.incr + 1
  
  always @(posedge clk) begin : upblk_set_wen
    if ( reset ) begin
      state <= 1'd0;
      incr <= 8'd0;
      rdy <= 1'd1;
      wen <= 1'd0;
    end
    else if ( state == 1'd0 ) begin
      if ( start ) begin
        state <= 1'd1;
        rdy <= 1'd0;
        wen <= 1'd1;
      end
      incr <= 8'd0;
    end
    else if ( state == 1'd1 ) begin
      if ( incr == ( 9'd256 - 8'd1 ) ) begin
        state <= 1'd0;
        rdy <= 1'd1;
        wen <= 1'd0;
        incr <= 8'd0;
      end
      else
        incr <= incr + 8'd1;
    end
  end

  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_IterateThruAddresses Definition
// Full name: SM_IterateThruAddresses__write_count_256__addr_width_8__initial_address_-1
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_IterateThruAddresses__740089f8f3ae18c1
(
address,
clk,
incr,
rdy,
reset,
start,
wen
);
output [7:0] address ;
input  [0:0] clk ;
output [7:0] incr ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen ;

//  localparam wire [7:0] __const__abs_init_val_at_upblk_set_wenc  = 8'd255;
//  localparam wire [3:0] __const__addr_width_at_upblk_set_wenc  = 4'd8;
//  localparam wire [0:0] __const__INIT_at_upblk_set_wen  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_set_wen  = 1'd1;
//  localparam wire [8:0] __const__write_count_at_upblk_set_wen  = 9'd256;
  wire [7:0] address_offset;
  wire [0:0] clk_tieoff;
  wire [0:0] reset_tieoff;
  wire [3:0] state;
  wire [7:0] w_address;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:253
  // @update
  // def upblk_set_wenc():
  //     if (s.wen):
  //         s.w_address @= s.incr + abs_init_val
  //     else:
  //         s.w_address @= 0
  //     s.address @= s.w_address[0:addr_width]
  
  always@(*) begin : upblk_set_wenc
    if ( wen ) begin
      w_address = incr + 8'd255;
    end
    else
      w_address = 8'd0;
    address = w_address[3'd7:3'd0];
  end

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:262
  // @update_ff
  // def upblk_set_wen():
  //     if s.reset:
  //         s.state <<= INIT
  //         s.incr <<= 0
  //         s.rdy <<= 1
  //         s.wen <<= 0
  //     else:
  //         if (s.state == INIT):
  //             if (s.start):
  //                 s.state <<= LOAD
  //                 s.rdy <<= 0
  //                 s.wen <<= 1
  //             s.incr <<= 0
  //         elif (s.state == LOAD):
  //             if (s.incr == (write_count-1)):
  //                 s.state <<= INIT
  //                 s.rdy <<= 1
  //                 s.wen <<= 0
  //                 s.incr <<= 0
  //             else:
  //                 s.incr <<= s.incr + 1
  
  always @(posedge clk) begin : upblk_set_wen
    if ( reset ) begin
      state <= 1'd0;
      incr <= 8'd0;
      rdy <= 1'd1;
      wen <= 1'd0;
    end
    else if ( state == 1'd0 ) begin
      if ( start ) begin
        state <= 1'd1;
        rdy <= 1'd0;
        wen <= 1'd1;
      end
      incr <= 8'd0;
    end
    else if ( state == 1'd1 ) begin
      if ( incr == ( 9'd256 - 8'd1 ) ) begin
        state <= 1'd0;
        rdy <= 1'd1;
        wen <= 1'd0;
        incr <= 8'd0;
      end
      else
        incr <= incr + 8'd1;
    end
  end

  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_InputSel Definition
// Full name: SM_InputSel__value_width_32__buf_count_width_2__curr_buffer_count_0
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_InputSel__b388f7edfc85651b
(
buffer_count,
clk,
cv,
reset,
vin,
vout,
we
);
input  [1:0] buffer_count ;
input  [0:0] clk ;
input  [31:0] cv ;
input  [0:0] reset ;
input  [31:0] vin ;
output [31:0] vout ;
output [0:0] we ;

//  localparam wire [0:0] __const__curr_buffer_count_at_upblk_set_wen0  = 1'd0;
  wire [1:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [31:0] cv_tieoff;
  wire [0:0] reset_tieoff;
  wire [31:0] vin_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:49
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.vout @= s.cv
  //     else:
  //         s.vout @= s.vin
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 1'd0 ) begin
      vout = cv;
    end
    else
      vout = vin;
  end

  assign vin_tieoff = vin;
  assign cv_tieoff = cv;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_InputSel Definition
// Full name: SM_InputSel__value_width_32__buf_count_width_2__curr_buffer_count_1
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_InputSel__11654d375438bb57
(
buffer_count,
clk,
cv,
reset,
vin,
vout,
we
);
input  [1:0] buffer_count ;
input  [0:0] clk ;
input  [31:0] cv ;
input  [0:0] reset ;
input  [31:0] vin ;
output [31:0] vout ;
output [0:0] we ;

//  localparam wire [0:0] __const__curr_buffer_count_at_upblk_set_wen0  = 1'd1;
  wire [1:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [31:0] cv_tieoff;
  wire [0:0] reset_tieoff;
  wire [31:0] vin_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:49
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.vout @= s.cv
  //     else:
  //         s.vout @= s.vin
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 1'd1 ) begin
      vout = cv;
    end
    else
      vout = vin;
  end

  assign vin_tieoff = vin;
  assign cv_tieoff = cv;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_InputSel Definition
// Full name: SM_InputSel__value_width_32__buf_count_width_2__curr_buffer_count_2
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_InputSel__25025e7c579428d9
(
buffer_count,
clk,
cv,
reset,
vin,
vout,
we
);
input  [1:0] buffer_count ;
input  [0:0] clk ;
input  [31:0] cv ;
input  [0:0] reset ;
input  [31:0] vin ;
output [31:0] vout ;
output [0:0] we ;

//  localparam wire [1:0] __const__curr_buffer_count_at_upblk_set_wen0  = 2'd2;
  wire [1:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [31:0] cv_tieoff;
  wire [0:0] reset_tieoff;
  wire [31:0] vin_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:49
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.vout @= s.cv
  //     else:
  //         s.vout @= s.vin
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 2'd2 ) begin
      vout = cv;
    end
    else
      vout = vin;
  end

  assign vin_tieoff = vin;
  assign cv_tieoff = cv;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_InputSel Definition
// Full name: SM_InputSel__value_width_32__buf_count_width_2__curr_buffer_count_3
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_InputSel__6e60a7a33b9657f3
(
buffer_count,
clk,
cv,
reset,
vin,
vout,
we
);
input  [1:0] buffer_count ;
input  [0:0] clk ;
input  [31:0] cv ;
input  [0:0] reset ;
input  [31:0] vin ;
output [31:0] vout ;
output [0:0] we ;

//  localparam wire [1:0] __const__curr_buffer_count_at_upblk_set_wen0  = 2'd3;
  wire [1:0] buffer_count_tieoff;
  wire [0:0] clk_tieoff;
  wire [31:0] cv_tieoff;
  wire [0:0] reset_tieoff;
  wire [31:0] vin_tieoff;

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:49
  // @update
  // def upblk_set_wen0():
  //     if (s.buffer_count == curr_buffer_count):
  //         s.vout @= s.cv
  //     else:
  //         s.vout @= s.vin
  
  always@(*) begin : upblk_set_wen0
    if ( buffer_count == 2'd3 ) begin
      vout = cv;
    end
    else
      vout = vin;
  end

  assign vin_tieoff = vin;
  assign cv_tieoff = cv;
  assign buffer_count_tieoff = buffer_count;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component SM_WriteOffChip Definition
// Full name: SM_WriteOffChip__buffer_count_4__write_count_256__addr_width_8__datawidth_32
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module SM_WriteOffChip__80fd79e0d378588b
(
address,
clk,
datain_0,
datain_1,
datain_2,
datain_3,
dataout,
rdy,
reset,
start,
wen
);
output [7:0] address ;
input  [0:0] clk ;
input  [31:0] datain_0 ;
input  [31:0] datain_1 ;
input  [31:0] datain_2 ;
input  [31:0] datain_3 ;
output [31:0] dataout ;
output [0:0] rdy ;
input  [0:0] reset ;
input  [0:0] start ;
output [0:0] wen ;

//  localparam wire [0:0] __const__INIT_at_upblk_set_wen_ff  = 1'd0;
//  localparam wire [0:0] __const__LOAD_at_upblk_set_wen_ff  = 1'd1;
//  localparam wire [8:0] __const__write_count_at_upblk_set_wen_ff  = 9'd256;
//  localparam wire [2:0] __const__buffer_count_at_upblk_set_wen_ff  = 3'd4;
  wire [1:0] buf_count;
  wire [0:0] clk_tieoff;
  wire [31:0] datain_0_tieoff;
  wire [31:0] datain_1_tieoff;
  wire [31:0] datain_2_tieoff;
  wire [31:0] datain_3_tieoff;
  wire [0:0] reset_tieoff;
  wire [31:0] sel_cin0;
  wire [31:0] sel_cin1;
  wire [31:0] sel_cin2;
  wire [31:0] sel_cin3;
  wire [1:0] state;
  //-------------------------------------------------------------
  // Component insel0
  //-------------------------------------------------------------

  wire [1:0] insel0__buffer_count;
  wire [0:0] insel0__clk;
  wire [31:0] insel0__cv;
  wire [0:0] insel0__reset;
  wire [31:0] insel0__vin;
  wire [31:0] insel0__vout;
  wire [0:0] insel0__we;

  SM_InputSel__b388f7edfc85651b insel0
  (
    .buffer_count( insel0__buffer_count ),
    .clk( insel0__clk ),
    .cv( insel0__cv ),
    .reset( insel0__reset ),
    .vin( insel0__vin ),
    .vout( insel0__vout ),
    .we( insel0__we )
  );

  //-------------------------------------------------------------
  // End of component insel0
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component insel1
  //-------------------------------------------------------------

  wire [1:0] insel1__buffer_count;
  wire [0:0] insel1__clk;
  wire [31:0] insel1__cv;
  wire [0:0] insel1__reset;
  wire [31:0] insel1__vin;
  wire [31:0] insel1__vout;
  wire [0:0] insel1__we;

  SM_InputSel__11654d375438bb57 insel1
  (
    .buffer_count( insel1__buffer_count ),
    .clk( insel1__clk ),
    .cv( insel1__cv ),
    .reset( insel1__reset ),
    .vin( insel1__vin ),
    .vout( insel1__vout ),
    .we( insel1__we )
  );

  //-------------------------------------------------------------
  // End of component insel1
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component insel2
  //-------------------------------------------------------------

  wire [1:0] insel2__buffer_count;
  wire [0:0] insel2__clk;
  wire [31:0] insel2__cv;
  wire [0:0] insel2__reset;
  wire [31:0] insel2__vin;
  wire [31:0] insel2__vout;
  wire [0:0] insel2__we;

  SM_InputSel__25025e7c579428d9 insel2
  (
    .buffer_count( insel2__buffer_count ),
    .clk( insel2__clk ),
    .cv( insel2__cv ),
    .reset( insel2__reset ),
    .vin( insel2__vin ),
    .vout( insel2__vout ),
    .we( insel2__we )
  );

  //-------------------------------------------------------------
  // End of component insel2
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component insel3
  //-------------------------------------------------------------

  wire [1:0] insel3__buffer_count;
  wire [0:0] insel3__clk;
  wire [31:0] insel3__cv;
  wire [0:0] insel3__reset;
  wire [31:0] insel3__vin;
  wire [31:0] insel3__vout;
  wire [0:0] insel3__we;

  SM_InputSel__6e60a7a33b9657f3 insel3
  (
    .buffer_count( insel3__buffer_count ),
    .clk( insel3__clk ),
    .cv( insel3__cv ),
    .reset( insel3__reset ),
    .vin( insel3__vin ),
    .vout( insel3__vout ),
    .we( insel3__we )
  );

  //-------------------------------------------------------------
  // End of component insel3
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:138
  // @update_ff
  // def upblk_set_wen_ff():
  //     if s.reset:
  //         s.buf_count <<= 0
  //         s.wen <<= 0
  //         s.state <<= INIT
  //         s.address <<= 0
  //         s.rdy <<= 1
  //     else:
  //         if (s.state == INIT):
  //             if (s.start):
  //                 s.state <<= LOAD
  //                 s.wen <<= 1
  //                 s.rdy <<= 0
  //         elif (s.state == LOAD):
  //             if (s.address == (write_count-1)):
  //                 s.address <<= 0
  //                 if (s.buf_count == (buffer_count-1)):
  //                     s.state <<= INIT
  //                     s.rdy <<= 1
  //                     s.buf_count <<= 0
  //                     s.wen <<= 0
  //                 else:
  //                     s.state <<= LOAD
  //                     s.buf_count <<= s.buf_count + 1
  //             else:
  //                 s.address <<= s.address + 1
  
  always @(posedge clk) begin : upblk_set_wen_ff
    if ( reset ) begin
      buf_count <= 2'd0;
      wen <= 1'd0;
      state <= 1'd0;
      address <= 8'd0;
      rdy <= 1'd1;
    end
    else if ( state == 1'd0 ) begin
      if ( start ) begin
        state <= 1'd1;
        wen <= 1'd1;
        rdy <= 1'd0;
      end
    end
    else if ( state == 1'd1 ) begin
      if ( address == ( 9'd256 - 8'd1 ) ) begin
        address <= 8'd0;
        if ( buf_count == ( 3'd4 - 2'd1 ) ) begin
          state <= 1'd0;
          rdy <= 1'd1;
          buf_count <= 2'd0;
          wen <= 1'd0;
        end
        else begin
          state <= 1'd1;
          buf_count <= buf_count + 2'd1;
        end
      end
      else
        address <= address + 8'd1;
    end
  end

  assign datain_0_tieoff = datain_0;
  assign datain_1_tieoff = datain_1;
  assign datain_2_tieoff = datain_2;
  assign datain_3_tieoff = datain_3;
  assign insel0__clk = clk;
  assign insel0__reset = reset;
  assign insel0__buffer_count = buf_count;
  assign insel0__cv = datain_0;
  assign insel0__vin = 32'd0;
  assign insel1__clk = clk;
  assign insel1__reset = reset;
  assign insel1__buffer_count = buf_count;
  assign insel1__cv = datain_1;
  assign insel1__vin = insel0__vout;
  assign insel2__clk = clk;
  assign insel2__reset = reset;
  assign insel2__buffer_count = buf_count;
  assign insel2__cv = datain_2;
  assign insel2__vin = insel1__vout;
  assign insel3__clk = clk;
  assign insel3__reset = reset;
  assign insel3__buffer_count = buf_count;
  assign insel3__cv = datain_3;
  assign insel3__vin = insel2__vout;
  assign dataout = insel3__vout;
  assign clk_tieoff = clk;
  assign reset_tieoff = reset;

endmodule


// PyMTL Component StateMachine Definition
// Full name: StateMachine__mlb_spec_{'block_name': 'ml_block', 'simulation_model': 'MLB', 'MAC_info': {'num_units': 12, 'data_widths': {'W': 8, 'I': 8, 'O': 32}}, 'ports': [{'name': 'a_en', 'width': 1, 'direction': 'in', 'type': 'W_EN'}, {'name': 'b_en', 'width': 1, 'direction': 'in', 'type': 'I_EN'}, {'name': 'hp_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'acc_en', 'width': 1, 'direction': 'in', 'type': 'ACC_EN'}, {'name': 'config_en', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'config_in', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'a', 'width': 32, 'direction': 'in', 'type': 'W'}, {'name': 'b_cas_in', 'width': 24, 'direction': 'in', 'type': 'I'}, {'name': 'res_cas_in', 'width': 128, 'direction': 'in', 'type': 'O'}, {'name': 'b_cas_out', 'width': 24, 'direction': 'out', 'type': 'I'}, {'name': 'a_out', 'width': 32, 'direction': 'out', 'type': 'W'}, {'name': 'res_cas_out', 'width': 128, 'direction': 'out', 'type': 'O'}, {'name': 'clk', 'width': 1, 'direction': 'in', 'type': 'CLK'}, {'name': 'reset', 'width': 1, 'direction': 'in', 'type': 'RESET'}]}__wb_spec_{'block_name': 'ml_block_weights', 'simulation_model': 'Buffer', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 2, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 128, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 128, 'direction': 'out', 'type': 'DATA'}]}__ib_spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__ob_spec_{'block_name': 'ml_block_input', 'ports': [{'name': 'clk_portain', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clk_portaout', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portare', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'clr0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena0', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena1', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena2', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'ena3', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portaaddrstall', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portabyteenamasks', 'width': 1, 'direction': 'in', 'type': 'C'}, {'name': 'portawe', 'width': 1, 'direction': 'in', 'type': 'WEN'}, {'name': 'portaaddr', 'width': 8, 'direction': 'in', 'type': 'ADDRESS'}, {'name': 'portadatain', 'width': 32, 'direction': 'in', 'type': 'DATA'}, {'name': 'portadataout', 'width': 32, 'direction': 'out', 'type': 'DATA'}]}__proj_spec_{'name': 'test_proj', 'outer_projection': {'URW': {'value': 2}, 'URN': {'value': 2}, 'UE': {'value': 2}, 'UB': {'value': 2}, 'UG': {'value': 2}}, 'inner_projection': {'URW': {'value': 6}, 'URN': {'value': 1}, 'UE': {'value': 2}, 'UB': {'value': 1}, 'UG': {'value': 1}, 'PRELOAD': [{'dtype': 'W', 'bus_count': 2}]}, 'temporal_projection': {'URW': {'value': 1}, 'URN': {'value': 1}, 'UE': {'value': 1}, 'UB': {'value': 1}, 'UG': {'value': 1}}, 'activation_function': 'RELU', 'stream_info': {'W': 8, 'I': 8, 'O': 32}}
// At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py

module test_odin_sm
(
clk,
datapath_input_act_modules_clk_portain_top_sm,
datapath_input_act_modules_clk_portaout_top_sm,
datapath_input_act_modules_clr0_top_sm,
datapath_input_act_modules_clr1_top_sm,
datapath_input_act_modules_ena0_top_sm,
datapath_input_act_modules_ena1_top_sm,
datapath_input_act_modules_ena2_top_sm,
datapath_input_act_modules_ena3_top_sm,
datapath_input_act_modules_portaaddrstall_top_sm,
datapath_input_act_modules_portabyteenamasks_top_sm,
datapath_input_act_modules_portare_top_sm,
datapath_input_datain_sm,
datapath_mlb_modules_acc_en_top_sm,
datapath_mlb_modules_config_en_top_sm,
datapath_mlb_modules_config_in_top_sm,
datapath_mlb_modules_hp_en_top_sm,
datapath_output_act_modules_clk_portain_top_sm,
datapath_output_act_modules_clk_portaout_top_sm,
datapath_output_act_modules_clr0_top_sm,
datapath_output_act_modules_clr1_top_sm,
datapath_output_act_modules_ena0_top_sm,
datapath_output_act_modules_ena1_top_sm,
datapath_output_act_modules_ena2_top_sm,
datapath_output_act_modules_ena3_top_sm,
datapath_output_act_modules_portaaddrstall_top_sm,
datapath_output_act_modules_portabyteenamasks_top_sm,
datapath_output_act_modules_portare_top_sm,
datapath_weight_datain_sm,
datapath_weight_modules_clk_portain_top_sm,
datapath_weight_modules_clk_portaout_top_sm,
datapath_weight_modules_clr0_top_sm,
datapath_weight_modules_clr1_top_sm,
datapath_weight_modules_ena0_top_sm,
datapath_weight_modules_ena1_top_sm,
datapath_weight_modules_ena2_top_sm,
datapath_weight_modules_ena3_top_sm,
datapath_weight_modules_portaaddrstall_top_sm,
datapath_weight_modules_portabyteenamasks_top_sm,
datapath_weight_modules_portare_top_sm,
external_a_en,
external_out,
reset,
sm_start,
weight_address
);
input  [0:0] clk ;
input  [0:0] datapath_input_act_modules_clk_portain_top_sm ;
input  [0:0] datapath_input_act_modules_clk_portaout_top_sm ;
input  [0:0] datapath_input_act_modules_clr0_top_sm ;
input  [0:0] datapath_input_act_modules_clr1_top_sm ;
input  [0:0] datapath_input_act_modules_ena0_top_sm ;
input  [0:0] datapath_input_act_modules_ena1_top_sm ;
input  [0:0] datapath_input_act_modules_ena2_top_sm ;
input  [0:0] datapath_input_act_modules_ena3_top_sm ;
input  [0:0] datapath_input_act_modules_portaaddrstall_top_sm ;
input  [0:0] datapath_input_act_modules_portabyteenamasks_top_sm ;
input  [0:0] datapath_input_act_modules_portare_top_sm ;
input  [31:0] datapath_input_datain_sm ;
input  [0:0] datapath_mlb_modules_acc_en_top_sm ;
input  [0:0] datapath_mlb_modules_config_en_top_sm ;
input  [0:0] datapath_mlb_modules_config_in_top_sm ;
input  [0:0] datapath_mlb_modules_hp_en_top_sm ;
input  [0:0] datapath_output_act_modules_clk_portain_top_sm ;
input  [0:0] datapath_output_act_modules_clk_portaout_top_sm ;
input  [0:0] datapath_output_act_modules_clr0_top_sm ;
input  [0:0] datapath_output_act_modules_clr1_top_sm ;
input  [0:0] datapath_output_act_modules_ena0_top_sm ;
input  [0:0] datapath_output_act_modules_ena1_top_sm ;
input  [0:0] datapath_output_act_modules_ena2_top_sm ;
input  [0:0] datapath_output_act_modules_ena3_top_sm ;
input  [0:0] datapath_output_act_modules_portaaddrstall_top_sm ;
input  [0:0] datapath_output_act_modules_portabyteenamasks_top_sm ;
input  [0:0] datapath_output_act_modules_portare_top_sm ;
input  [127:0] datapath_weight_datain_sm ;
input  [0:0] datapath_weight_modules_clk_portain_top_sm ;
input  [0:0] datapath_weight_modules_clk_portaout_top_sm ;
input  [0:0] datapath_weight_modules_clr0_top_sm ;
input  [0:0] datapath_weight_modules_clr1_top_sm ;
input  [0:0] datapath_weight_modules_ena0_top_sm ;
input  [0:0] datapath_weight_modules_ena1_top_sm ;
input  [0:0] datapath_weight_modules_ena2_top_sm ;
input  [0:0] datapath_weight_modules_ena3_top_sm ;
input  [0:0] datapath_weight_modules_portaaddrstall_top_sm ;
input  [0:0] datapath_weight_modules_portabyteenamasks_top_sm ;
input  [0:0] datapath_weight_modules_portare_top_sm ;
input  [0:0] external_a_en ;
output [31:0] external_out ;
input  [0:0] reset ;
input  [0:0] sm_start ;
input  [1:0] weight_address ;

//  localparam wire [0:0] __const__INIT_at_connect_weight_address_ff  = 1'd1;
//  localparam wire [1:0] __const__LOADING_W_BUFFERS_at_connect_weight_address_ff  = 2'd2;
//  localparam wire [1:0] __const__LOADING_I_BUFFERS_at_connect_weight_address_ff  = 2'd3;
//  localparam wire [2:0] __const__LOADING_MLBS_at_connect_weight_address_ff  = 3'd4;
//  localparam wire [2:0] __const__STREAMING_MLBS_at_connect_weight_address_ff  = 3'd5;
//  localparam wire [2:0] __const__WRITE_OFFCHIP_at_connect_weight_address_ff  = 3'd6;
//  localparam wire [2:0] __const__DONE_at_connect_weight_address_ff  = 3'd7;
//  localparam wire [2:0] __const__LOADING_MLBS_at_connect_weight_address  = 3'd4;
//  localparam wire [2:0] __const__STREAMING_MLBS_at_connect_weight_address  = 3'd5;
//  localparam wire [0:0] __const__INIT_at_connect_weight_address  = 1'd1;
//  localparam wire [1:0] __const__LOADING_W_BUFFERS_at_connect_weight_address  = 2'd2;
//  localparam wire [1:0] __const__LOADING_I_BUFFERS_at_connect_weight_address  = 2'd3;
  wire [0:0] datapath_input_act_modules_clk_portain_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_clk_portaout_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_clr0_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_clr1_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_ena0_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_ena1_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_ena2_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_ena3_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_portaaddrstall_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_portabyteenamasks_top_sm_tieoff;
  wire [0:0] datapath_input_act_modules_portare_top_sm_tieoff;
  wire [31:0] datapath_input_datain_sm_tieoff;
  wire [0:0] datapath_mlb_modules_acc_en_top_sm_tieoff;
  wire [0:0] datapath_mlb_modules_config_en_top_sm_tieoff;
  wire [0:0] datapath_mlb_modules_config_in_top_sm_tieoff;
  wire [0:0] datapath_mlb_modules_hp_en_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_clk_portain_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_clk_portaout_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_clr0_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_clr1_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_ena0_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_ena1_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_ena2_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_ena3_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_portaaddrstall_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_portabyteenamasks_top_sm_tieoff;
  wire [0:0] datapath_output_act_modules_portare_top_sm_tieoff;
  wire [127:0] datapath_weight_datain_sm_tieoff;
  wire [0:0] datapath_weight_modules_clk_portain_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_clk_portaout_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_clr0_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_clr1_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_ena0_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_ena1_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_ena2_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_ena3_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_portaaddrstall_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_portabyteenamasks_top_sm_tieoff;
  wire [0:0] datapath_weight_modules_portare_top_sm_tieoff;
  wire [0:0] done;
  wire [2:0] state;
  //-------------------------------------------------------------
  // Component datapath
  //-------------------------------------------------------------

  wire [0:0] datapath__clk;
  wire [0:0] datapath__input_act_modules_clk_portain_top;
  wire [0:0] datapath__input_act_modules_clk_portaout_top;
  wire [0:0] datapath__input_act_modules_clr0_top;
  wire [0:0] datapath__input_act_modules_clr1_top;
  wire [0:0] datapath__input_act_modules_ena0_top;
  wire [0:0] datapath__input_act_modules_ena1_top;
  wire [0:0] datapath__input_act_modules_ena2_top;
  wire [0:0] datapath__input_act_modules_ena3_top;
  wire [7:0] datapath__input_act_modules_portaaddr_top;
  wire [0:0] datapath__input_act_modules_portaaddrstall_top;
  wire [0:0] datapath__input_act_modules_portabyteenamasks_top;
  wire [0:0] datapath__input_act_modules_portare_top;
  wire [0:0] datapath__input_act_modules_portawe_0_top;
  wire [0:0] datapath__input_act_modules_portawe_1_top;
  wire [31:0] datapath__input_datain;
  wire [0:0] datapath__mlb_modules_a_en_top;
  wire [0:0] datapath__mlb_modules_acc_en_top;
  wire [0:0] datapath__mlb_modules_b_en_top;
  wire [0:0] datapath__mlb_modules_config_en_top;
  wire [0:0] datapath__mlb_modules_config_in_top;
  wire [0:0] datapath__mlb_modules_hp_en_top;
  wire [0:0] datapath__output_act_modules_clk_portain_top;
  wire [0:0] datapath__output_act_modules_clk_portaout_top;
  wire [0:0] datapath__output_act_modules_clr0_top;
  wire [0:0] datapath__output_act_modules_clr1_top;
  wire [0:0] datapath__output_act_modules_ena0_top;
  wire [0:0] datapath__output_act_modules_ena1_top;
  wire [0:0] datapath__output_act_modules_ena2_top;
  wire [0:0] datapath__output_act_modules_ena3_top;
  wire [7:0] datapath__output_act_modules_portaaddr_top;
  wire [0:0] datapath__output_act_modules_portaaddrstall_top;
  wire [0:0] datapath__output_act_modules_portabyteenamasks_top;
  wire [0:0] datapath__output_act_modules_portare_top;
  wire [0:0] datapath__output_act_modules_portawe_0_top;
  wire [0:0] datapath__output_act_modules_portawe_1_top;
  wire [0:0] datapath__output_act_modules_portawe_2_top;
  wire [0:0] datapath__output_act_modules_portawe_3_top;
  wire [31:0] datapath__portadataout_0;
  wire [31:0] datapath__portadataout_1;
  wire [31:0] datapath__portadataout_2;
  wire [31:0] datapath__portadataout_3;
  wire [0:0] datapath__reset;
  wire [127:0] datapath__weight_datain;
  wire [0:0] datapath__weight_modules_clk_portain_top;
  wire [0:0] datapath__weight_modules_clk_portaout_top;
  wire [0:0] datapath__weight_modules_clr0_top;
  wire [0:0] datapath__weight_modules_clr1_top;
  wire [0:0] datapath__weight_modules_ena0_top;
  wire [0:0] datapath__weight_modules_ena1_top;
  wire [0:0] datapath__weight_modules_ena2_top;
  wire [0:0] datapath__weight_modules_ena3_top;
  wire [1:0] datapath__weight_modules_portaaddr_top;
  wire [0:0] datapath__weight_modules_portaaddrstall_top;
  wire [0:0] datapath__weight_modules_portabyteenamasks_top;
  wire [0:0] datapath__weight_modules_portare_top;
  wire [0:0] datapath__weight_modules_portawe_0_top;
  wire [0:0] datapath__weight_modules_portawe_1_top;

  Datapath__f43943945aa73637 datapath
  (
    .clk( datapath__clk ),
    .input_act_modules_clk_portain_top( datapath__input_act_modules_clk_portain_top ),
    .input_act_modules_clk_portaout_top( datapath__input_act_modules_clk_portaout_top ),
    .input_act_modules_clr0_top( datapath__input_act_modules_clr0_top ),
    .input_act_modules_clr1_top( datapath__input_act_modules_clr1_top ),
    .input_act_modules_ena0_top( datapath__input_act_modules_ena0_top ),
    .input_act_modules_ena1_top( datapath__input_act_modules_ena1_top ),
    .input_act_modules_ena2_top( datapath__input_act_modules_ena2_top ),
    .input_act_modules_ena3_top( datapath__input_act_modules_ena3_top ),
    .input_act_modules_portaaddr_top( datapath__input_act_modules_portaaddr_top ),
    .input_act_modules_portaaddrstall_top( datapath__input_act_modules_portaaddrstall_top ),
    .input_act_modules_portabyteenamasks_top( datapath__input_act_modules_portabyteenamasks_top ),
    .input_act_modules_portare_top( datapath__input_act_modules_portare_top ),
    .input_act_modules_portawe_0_top( datapath__input_act_modules_portawe_0_top ),
    .input_act_modules_portawe_1_top( datapath__input_act_modules_portawe_1_top ),
    .input_datain( datapath__input_datain ),
    .mlb_modules_a_en_top( datapath__mlb_modules_a_en_top ),
    .mlb_modules_acc_en_top( datapath__mlb_modules_acc_en_top ),
    .mlb_modules_b_en_top( datapath__mlb_modules_b_en_top ),
    .mlb_modules_config_en_top( datapath__mlb_modules_config_en_top ),
    .mlb_modules_config_in_top( datapath__mlb_modules_config_in_top ),
    .mlb_modules_hp_en_top( datapath__mlb_modules_hp_en_top ),
    .output_act_modules_clk_portain_top( datapath__output_act_modules_clk_portain_top ),
    .output_act_modules_clk_portaout_top( datapath__output_act_modules_clk_portaout_top ),
    .output_act_modules_clr0_top( datapath__output_act_modules_clr0_top ),
    .output_act_modules_clr1_top( datapath__output_act_modules_clr1_top ),
    .output_act_modules_ena0_top( datapath__output_act_modules_ena0_top ),
    .output_act_modules_ena1_top( datapath__output_act_modules_ena1_top ),
    .output_act_modules_ena2_top( datapath__output_act_modules_ena2_top ),
    .output_act_modules_ena3_top( datapath__output_act_modules_ena3_top ),
    .output_act_modules_portaaddr_top( datapath__output_act_modules_portaaddr_top ),
    .output_act_modules_portaaddrstall_top( datapath__output_act_modules_portaaddrstall_top ),
    .output_act_modules_portabyteenamasks_top( datapath__output_act_modules_portabyteenamasks_top ),
    .output_act_modules_portare_top( datapath__output_act_modules_portare_top ),
    .output_act_modules_portawe_0_top( datapath__output_act_modules_portawe_0_top ),
    .output_act_modules_portawe_1_top( datapath__output_act_modules_portawe_1_top ),
    .output_act_modules_portawe_2_top( datapath__output_act_modules_portawe_2_top ),
    .output_act_modules_portawe_3_top( datapath__output_act_modules_portawe_3_top ),
    .portadataout_0( datapath__portadataout_0 ),
    .portadataout_1( datapath__portadataout_1 ),
    .portadataout_2( datapath__portadataout_2 ),
    .portadataout_3( datapath__portadataout_3 ),
    .reset( datapath__reset ),
    .weight_datain( datapath__weight_datain ),
    .weight_modules_clk_portain_top( datapath__weight_modules_clk_portain_top ),
    .weight_modules_clk_portaout_top( datapath__weight_modules_clk_portaout_top ),
    .weight_modules_clr0_top( datapath__weight_modules_clr0_top ),
    .weight_modules_clr1_top( datapath__weight_modules_clr1_top ),
    .weight_modules_ena0_top( datapath__weight_modules_ena0_top ),
    .weight_modules_ena1_top( datapath__weight_modules_ena1_top ),
    .weight_modules_ena2_top( datapath__weight_modules_ena2_top ),
    .weight_modules_ena3_top( datapath__weight_modules_ena3_top ),
    .weight_modules_portaaddr_top( datapath__weight_modules_portaaddr_top ),
    .weight_modules_portaaddrstall_top( datapath__weight_modules_portaaddrstall_top ),
    .weight_modules_portabyteenamasks_top( datapath__weight_modules_portabyteenamasks_top ),
    .weight_modules_portare_top( datapath__weight_modules_portare_top ),
    .weight_modules_portawe_0_top( datapath__weight_modules_portawe_0_top ),
    .weight_modules_portawe_1_top( datapath__weight_modules_portawe_1_top )
  );

  //-------------------------------------------------------------
  // End of component datapath
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component load_ibufs
  //-------------------------------------------------------------

  wire [7:0] load_ibufs__buf_address;
  wire [0:0] load_ibufs__clk;
  wire [0:0] load_ibufs__rdy;
  wire [0:0] load_ibufs__reset;
  wire [0:0] load_ibufs__start;
  wire [0:0] load_ibufs__wen_0;
  wire [0:0] load_ibufs__wen_1;

  SM_LoadBufs__buffer_count_2__write_count_256 load_ibufs
  (
    .buf_address( load_ibufs__buf_address ),
    .clk( load_ibufs__clk ),
    .rdy( load_ibufs__rdy ),
    .reset( load_ibufs__reset ),
    .start( load_ibufs__start ),
    .wen_0( load_ibufs__wen_0 ),
    .wen_1( load_ibufs__wen_1 )
  );

  //-------------------------------------------------------------
  // End of component load_ibufs
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component load_wbufs
  //-------------------------------------------------------------

  wire [1:0] load_wbufs__buf_address;
  wire [0:0] load_wbufs__clk;
  wire [0:0] load_wbufs__rdy;
  wire [0:0] load_wbufs__reset;
  wire [0:0] load_wbufs__start;
  wire [0:0] load_wbufs__wen_0;
  wire [0:0] load_wbufs__wen_1;

  SM_LoadBufs__buffer_count_2__write_count_4 load_wbufs
  (
    .buf_address( load_wbufs__buf_address ),
    .clk( load_wbufs__clk ),
    .rdy( load_wbufs__rdy ),
    .reset( load_wbufs__reset ),
    .start( load_wbufs__start ),
    .wen_0( load_wbufs__wen_0 ),
    .wen_1( load_wbufs__wen_1 )
  );

  //-------------------------------------------------------------
  // End of component load_wbufs
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component preload_weights
  //-------------------------------------------------------------

  wire [1:0] preload_weights__address;
  wire [0:0] preload_weights__clk;
  wire [0:0] preload_weights__rdy;
  wire [0:0] preload_weights__reset;
  wire [0:0] preload_weights__start;
  wire [0:0] preload_weights__wen;

  SM_PreloadMLBWeights__0d8fd8f20b43a105 preload_weights
  (
    .address( preload_weights__address ),
    .clk( preload_weights__clk ),
    .rdy( preload_weights__rdy ),
    .reset( preload_weights__reset ),
    .start( preload_weights__start ),
    .wen( preload_weights__wen )
  );

  //-------------------------------------------------------------
  // End of component preload_weights
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component stream_inputs
  //-------------------------------------------------------------

  wire [7:0] stream_inputs__address;
  wire [0:0] stream_inputs__clk;
  wire [7:0] stream_inputs__incr;
  wire [0:0] stream_inputs__rdy;
  wire [0:0] stream_inputs__reset;
  wire [0:0] stream_inputs__start;
  wire [0:0] stream_inputs__wen;

  SM_IterateThruAddresses__319b41569fe2d577 stream_inputs
  (
    .address( stream_inputs__address ),
    .clk( stream_inputs__clk ),
    .incr( stream_inputs__incr ),
    .rdy( stream_inputs__rdy ),
    .reset( stream_inputs__reset ),
    .start( stream_inputs__start ),
    .wen( stream_inputs__wen )
  );

  //-------------------------------------------------------------
  // End of component stream_inputs
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component stream_outputs
  //-------------------------------------------------------------

  wire [7:0] stream_outputs__address;
  wire [0:0] stream_outputs__clk;
  wire [7:0] stream_outputs__incr;
  wire [0:0] stream_outputs__rdy;
  wire [0:0] stream_outputs__reset;
  wire [0:0] stream_outputs__start;
  wire [0:0] stream_outputs__wen;

  SM_IterateThruAddresses__740089f8f3ae18c1 stream_outputs
  (
    .address( stream_outputs__address ),
    .clk( stream_outputs__clk ),
    .incr( stream_outputs__incr ),
    .rdy( stream_outputs__rdy ),
    .reset( stream_outputs__reset ),
    .start( stream_outputs__start ),
    .wen( stream_outputs__wen )
  );

  //-------------------------------------------------------------
  // End of component stream_outputs
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component write_off
  //-------------------------------------------------------------

  wire [7:0] write_off__address;
  wire [0:0] write_off__clk;
  wire [31:0] write_off__datain_0;
  wire [31:0] write_off__datain_1;
  wire [31:0] write_off__datain_2;
  wire [31:0] write_off__datain_3;
  wire [31:0] write_off__dataout;
  wire [0:0] write_off__rdy;
  wire [0:0] write_off__reset;
  wire [0:0] write_off__start;
  wire [0:0] write_off__wen;

  SM_WriteOffChip__80fd79e0d378588b write_off
  (
    .address( write_off__address ),
    .clk( write_off__clk ),
    .datain_0( write_off__datain_0 ),
    .datain_1( write_off__datain_1 ),
    .datain_2( write_off__datain_2 ),
    .datain_3( write_off__datain_3 ),
    .dataout( write_off__dataout ),
    .rdy( write_off__rdy ),
    .reset( write_off__reset ),
    .start( write_off__start ),
    .wen( write_off__wen )
  );

  //-------------------------------------------------------------
  // End of component write_off
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:450
  // @update
  // def connect_weight_address():
  //     if (s.state == LOADING_MLBS):
  //         s.datapath.weight_modules_portaaddr_top @= s.preload_weights.address
  //     else:
  //         s.datapath.weight_modules_portaaddr_top @= s.load_wbufs.buf_address
  //     if (s.state == STREAMING_MLBS):
  //         s.datapath.input_act_modules_portaaddr_top @= s.stream_inputs.address
  //     else:
  //         s.datapath.input_act_modules_portaaddr_top @= s.load_ibufs.buf_address
  //     if (s.state == STREAMING_MLBS):
  //         s.datapath.output_act_modules_portaaddr_top @= s.stream_outputs.address
  //     else:
  //         s.datapath.output_act_modules_portaaddr_top @= s.write_off.address
  //     s.load_wbufs.start @= (s.state == INIT) & s.sm_start 
  //     s.load_ibufs.start @= (s.state == LOADING_W_BUFFERS) & s.load_wbufs.rdy 
  //     s.preload_weights.start @= (s.state == LOADING_I_BUFFERS) & s.load_ibufs.rdy
  //     s.stream_inputs.start @= (s.state == LOADING_MLBS) & s.preload_weights.rdy
  //     s.stream_outputs.start @= (s.state == LOADING_MLBS) & s.preload_weights.rdy 
  //     s.write_off.start @= (s.state == STREAMING_MLBS) & s.stream_outputs.rdy
  
  always@(*) begin : connect_weight_address
    if ( state == 3'd4 ) begin
      datapath__weight_modules_portaaddr_top = preload_weights__address;
    end
    else
      datapath__weight_modules_portaaddr_top = load_wbufs__buf_address;
    if ( state == 3'd5 ) begin
      datapath__input_act_modules_portaaddr_top = stream_inputs__address;
    end
    else
      datapath__input_act_modules_portaaddr_top = load_ibufs__buf_address;
    if ( state == 3'd5 ) begin
      datapath__output_act_modules_portaaddr_top = stream_outputs__address;
    end
    else
      datapath__output_act_modules_portaaddr_top = write_off__address;
    load_wbufs__start = ( state == 1'd1 ) & sm_start;
    load_ibufs__start = ( state == 2'd2 ) & load_wbufs__rdy;
    preload_weights__start = ( state == 2'd3 ) & load_ibufs__rdy;
    stream_inputs__start = ( state == 3'd4 ) & preload_weights__rdy;
    stream_outputs__start = ( state == 3'd4 ) & preload_weights__rdy;
    write_off__start = ( state == 3'd5 ) & stream_outputs__rdy;
  end

  // PyMTL Update Block Source
  // At /home/esther/code_gen/verilog_ml_benchmark_generator/verilog_ml_benchmark_generator/state_machine_classes.py:421
  // @update_ff
  // def connect_weight_address_ff():
  //     if s.reset:
  //         s.state <<= INIT
  //         s.done <<= 0
  //     else:
  //         if (s.state == INIT):
  //             if s.sm_start:
  //                 s.state <<= LOADING_W_BUFFERS
  //         if (s.state == LOADING_W_BUFFERS):
  //             if s.load_wbufs.rdy:
  //                 s.state <<= LOADING_I_BUFFERS
  //         if (s.state == LOADING_I_BUFFERS):
  //             if s.load_ibufs.rdy:
  //                 s.state <<= LOADING_MLBS
  //         if (s.state == LOADING_MLBS):
  //             if s.preload_weights.rdy:
  //                 s.state <<= STREAMING_MLBS
  //         elif (s.state == STREAMING_MLBS):
  //             if s.stream_outputs.rdy:
  //                 s.state <<= WRITE_OFFCHIP
  //         elif (s.state == WRITE_OFFCHIP):
  //             if s.write_off.rdy:
  //               s.state <<= DONE
  //               s.done <<= 1
  //         elif s.state == DONE:
  //             s.done <<= 1
  
  always @(posedge clk) begin : connect_weight_address_ff
    if ( reset ) begin
      state <= 1'd1;
      done <= 1'd0;
    end
    else begin
      if ( state == 1'd1 ) begin
        if ( sm_start ) begin
          state <= 2'd2;
        end
      end
      if ( state == 2'd2 ) begin
        if ( load_wbufs__rdy ) begin
          state <= 2'd3;
        end
      end
      if ( state == 2'd3 ) begin
        if ( load_ibufs__rdy ) begin
          state <= 3'd4;
        end
      end
      if ( state == 3'd4 ) begin
        if ( preload_weights__rdy ) begin
          state <= 3'd5;
        end
      end
      else if ( state == 3'd5 ) begin
        if ( stream_outputs__rdy ) begin
          state <= 3'd6;
        end
      end
      else if ( state == 3'd6 ) begin
        if ( write_off__rdy ) begin
          state <= 3'd7;
          done <= 1'd1;
        end
      end
      else if ( state == 3'd7 ) begin
        done <= 1'd1;
      end
    end
  end

  assign datapath__clk = clk;
  assign datapath__reset = reset;
  assign load_wbufs__clk = clk;
  assign load_wbufs__reset = reset;
  assign datapath__weight_modules_portawe_0_top = load_wbufs__wen_0;
  assign datapath__weight_modules_portawe_1_top = load_wbufs__wen_1;
  assign load_ibufs__clk = clk;
  assign load_ibufs__reset = reset;
  assign datapath__input_act_modules_portawe_0_top = load_ibufs__wen_0;
  assign datapath__input_act_modules_portawe_1_top = load_ibufs__wen_1;
  assign preload_weights__clk = clk;
  assign preload_weights__reset = reset;
  assign datapath__mlb_modules_a_en_top = preload_weights__wen;
  assign stream_inputs__clk = clk;
  assign stream_inputs__reset = reset;
  assign stream_outputs__clk = clk;
  assign stream_outputs__reset = reset;
  assign datapath__mlb_modules_b_en_top = stream_inputs__wen;
  assign datapath__output_act_modules_portawe_0_top = stream_outputs__wen;
  assign datapath__output_act_modules_portawe_1_top = stream_outputs__wen;
  assign datapath__output_act_modules_portawe_2_top = stream_outputs__wen;
  assign datapath__output_act_modules_portawe_3_top = stream_outputs__wen;
  assign write_off__clk = clk;
  assign write_off__reset = reset;
  assign write_off__datain_1 = datapath__portadataout_1;
  assign write_off__datain_3 = datapath__portadataout_3;
  assign write_off__datain_0 = datapath__portadataout_0;
  assign write_off__datain_2 = datapath__portadataout_2;
  assign external_out = write_off__dataout;
  assign datapath_input_act_modules_ena3_top_sm_tieoff = datapath_input_act_modules_ena3_top_sm;
  assign datapath__input_act_modules_ena3_top = datapath_input_act_modules_ena3_top_sm;
  assign datapath_output_act_modules_ena2_top_sm_tieoff = datapath_output_act_modules_ena2_top_sm;
  assign datapath__output_act_modules_ena2_top = datapath_output_act_modules_ena2_top_sm;
  assign datapath_weight_modules_portabyteenamasks_top_sm_tieoff = datapath_weight_modules_portabyteenamasks_top_sm;
  assign datapath__weight_modules_portabyteenamasks_top = datapath_weight_modules_portabyteenamasks_top_sm;
  assign datapath_input_act_modules_clk_portaout_top_sm_tieoff = datapath_input_act_modules_clk_portaout_top_sm;
  assign datapath__input_act_modules_clk_portaout_top = datapath_input_act_modules_clk_portaout_top_sm;
  assign datapath_output_act_modules_clr1_top_sm_tieoff = datapath_output_act_modules_clr1_top_sm;
  assign datapath__output_act_modules_clr1_top = datapath_output_act_modules_clr1_top_sm;
  assign datapath_mlb_modules_config_en_top_sm_tieoff = datapath_mlb_modules_config_en_top_sm;
  assign datapath__mlb_modules_config_en_top = datapath_mlb_modules_config_en_top_sm;
  assign datapath_mlb_modules_acc_en_top_sm_tieoff = datapath_mlb_modules_acc_en_top_sm;
  assign datapath__mlb_modules_acc_en_top = datapath_mlb_modules_acc_en_top_sm;
  assign datapath_weight_modules_portaaddrstall_top_sm_tieoff = datapath_weight_modules_portaaddrstall_top_sm;
  assign datapath__weight_modules_portaaddrstall_top = datapath_weight_modules_portaaddrstall_top_sm;
  assign datapath_input_act_modules_ena0_top_sm_tieoff = datapath_input_act_modules_ena0_top_sm;
  assign datapath__input_act_modules_ena0_top = datapath_input_act_modules_ena0_top_sm;
  assign datapath_output_act_modules_clk_portaout_top_sm_tieoff = datapath_output_act_modules_clk_portaout_top_sm;
  assign datapath__output_act_modules_clk_portaout_top = datapath_output_act_modules_clk_portaout_top_sm;
  assign datapath_weight_modules_ena2_top_sm_tieoff = datapath_weight_modules_ena2_top_sm;
  assign datapath__weight_modules_ena2_top = datapath_weight_modules_ena2_top_sm;
  assign datapath_input_act_modules_clk_portain_top_sm_tieoff = datapath_input_act_modules_clk_portain_top_sm;
  assign datapath__input_act_modules_clk_portain_top = datapath_input_act_modules_clk_portain_top_sm;
  assign datapath_output_act_modules_clk_portain_top_sm_tieoff = datapath_output_act_modules_clk_portain_top_sm;
  assign datapath__output_act_modules_clk_portain_top = datapath_output_act_modules_clk_portain_top_sm;
  assign datapath_output_act_modules_portaaddrstall_top_sm_tieoff = datapath_output_act_modules_portaaddrstall_top_sm;
  assign datapath__output_act_modules_portaaddrstall_top = datapath_output_act_modules_portaaddrstall_top_sm;
  assign datapath_mlb_modules_config_in_top_sm_tieoff = datapath_mlb_modules_config_in_top_sm;
  assign datapath__mlb_modules_config_in_top = datapath_mlb_modules_config_in_top_sm;
  assign datapath_weight_datain_sm_tieoff = datapath_weight_datain_sm;
  assign datapath__weight_datain = datapath_weight_datain_sm;
  assign datapath_weight_modules_ena0_top_sm_tieoff = datapath_weight_modules_ena0_top_sm;
  assign datapath__weight_modules_ena0_top = datapath_weight_modules_ena0_top_sm;
  assign datapath_weight_modules_clk_portaout_top_sm_tieoff = datapath_weight_modules_clk_portaout_top_sm;
  assign datapath__weight_modules_clk_portaout_top = datapath_weight_modules_clk_portaout_top_sm;
  assign datapath_input_act_modules_portare_top_sm_tieoff = datapath_input_act_modules_portare_top_sm;
  assign datapath__input_act_modules_portare_top = datapath_input_act_modules_portare_top_sm;
  assign datapath_input_act_modules_ena2_top_sm_tieoff = datapath_input_act_modules_ena2_top_sm;
  assign datapath__input_act_modules_ena2_top = datapath_input_act_modules_ena2_top_sm;
  assign datapath_input_act_modules_portaaddrstall_top_sm_tieoff = datapath_input_act_modules_portaaddrstall_top_sm;
  assign datapath__input_act_modules_portaaddrstall_top = datapath_input_act_modules_portaaddrstall_top_sm;
  assign datapath_output_act_modules_clr0_top_sm_tieoff = datapath_output_act_modules_clr0_top_sm;
  assign datapath__output_act_modules_clr0_top = datapath_output_act_modules_clr0_top_sm;
  assign datapath_input_datain_sm_tieoff = datapath_input_datain_sm;
  assign datapath__input_datain = datapath_input_datain_sm;
  assign datapath_mlb_modules_hp_en_top_sm_tieoff = datapath_mlb_modules_hp_en_top_sm;
  assign datapath__mlb_modules_hp_en_top = datapath_mlb_modules_hp_en_top_sm;
  assign datapath_weight_modules_clk_portain_top_sm_tieoff = datapath_weight_modules_clk_portain_top_sm;
  assign datapath__weight_modules_clk_portain_top = datapath_weight_modules_clk_portain_top_sm;
  assign datapath_input_act_modules_clr0_top_sm_tieoff = datapath_input_act_modules_clr0_top_sm;
  assign datapath__input_act_modules_clr0_top = datapath_input_act_modules_clr0_top_sm;
  assign datapath_input_act_modules_ena1_top_sm_tieoff = datapath_input_act_modules_ena1_top_sm;
  assign datapath__input_act_modules_ena1_top = datapath_input_act_modules_ena1_top_sm;
  assign datapath_output_act_modules_ena1_top_sm_tieoff = datapath_output_act_modules_ena1_top_sm;
  assign datapath__output_act_modules_ena1_top = datapath_output_act_modules_ena1_top_sm;
  assign datapath_output_act_modules_portabyteenamasks_top_sm_tieoff = datapath_output_act_modules_portabyteenamasks_top_sm;
  assign datapath__output_act_modules_portabyteenamasks_top = datapath_output_act_modules_portabyteenamasks_top_sm;
  assign datapath_weight_modules_ena3_top_sm_tieoff = datapath_weight_modules_ena3_top_sm;
  assign datapath__weight_modules_ena3_top = datapath_weight_modules_ena3_top_sm;
  assign datapath_weight_modules_ena1_top_sm_tieoff = datapath_weight_modules_ena1_top_sm;
  assign datapath__weight_modules_ena1_top = datapath_weight_modules_ena1_top_sm;
  assign datapath_weight_modules_portare_top_sm_tieoff = datapath_weight_modules_portare_top_sm;
  assign datapath__weight_modules_portare_top = datapath_weight_modules_portare_top_sm;
  assign datapath_input_act_modules_portabyteenamasks_top_sm_tieoff = datapath_input_act_modules_portabyteenamasks_top_sm;
  assign datapath__input_act_modules_portabyteenamasks_top = datapath_input_act_modules_portabyteenamasks_top_sm;
  assign datapath_input_act_modules_clr1_top_sm_tieoff = datapath_input_act_modules_clr1_top_sm;
  assign datapath__input_act_modules_clr1_top = datapath_input_act_modules_clr1_top_sm;
  assign datapath_output_act_modules_portare_top_sm_tieoff = datapath_output_act_modules_portare_top_sm;
  assign datapath__output_act_modules_portare_top = datapath_output_act_modules_portare_top_sm;
  assign datapath_weight_modules_clr1_top_sm_tieoff = datapath_weight_modules_clr1_top_sm;
  assign datapath__weight_modules_clr1_top = datapath_weight_modules_clr1_top_sm;
  assign datapath_weight_modules_clr0_top_sm_tieoff = datapath_weight_modules_clr0_top_sm;
  assign datapath__weight_modules_clr0_top = datapath_weight_modules_clr0_top_sm;
  assign datapath_output_act_modules_ena0_top_sm_tieoff = datapath_output_act_modules_ena0_top_sm;
  assign datapath__output_act_modules_ena0_top = datapath_output_act_modules_ena0_top_sm;
  assign datapath_output_act_modules_ena3_top_sm_tieoff = datapath_output_act_modules_ena3_top_sm;
  assign datapath__output_act_modules_ena3_top = datapath_output_act_modules_ena3_top_sm;

endmodule